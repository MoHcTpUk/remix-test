/* tslint:disable */
/* eslint-disable */
/**
 * Responses API
 * Responses API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from './../../runtime';
import type {
  GetEntitiesResponses200Response,
  GetEntityResponses200Response,
  Response,
  ResponseType,
} from '../models';

export interface GetEntitiesResponsesRequest {
    max_page_size?: number;
    pages?: Array<number>;
    page_token?: string;
    entity_type?: string;
}

export interface GetEntityResponsesRequest {
    id: string;
    max_page_size?: number;
    page_token?: string;
    response_type?: ResponseType;
}

export interface GetResponseRequest {
    id: string;
}

export interface PatchResponseRequest {
    id: string;
    response?: Response;
}

/**
 *
 */
export class ResponsesApi extends runtime.BaseAPI {

    /**
     * Request to get responses grouped by entity
     * Get responses grouped by entity
     */
    async getEntitiesResponsesRaw(requestParameters: GetEntitiesResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEntitiesResponses200Response>> {
        const queryParameters: any = {};

        if (requestParameters.max_page_size !== undefined) {
            queryParameters['max_page_size'] = requestParameters.max_page_size;
        }

        if (requestParameters.pages) {
            queryParameters['pages'] = requestParameters.pages;
        }

        if (requestParameters.page_token !== undefined) {
            queryParameters['page_token'] = requestParameters.page_token;
        }

        if (requestParameters.entity_type !== undefined) {
            queryParameters['entity_type'] = requestParameters.entity_type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/entities-responses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get responses grouped by entity
     * Get responses grouped by entity
     */
    async getEntitiesResponses(requestParameters: GetEntitiesResponsesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEntitiesResponses200Response> {
        const response = await this.getEntitiesResponsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to get responses for the entity
     * Get responses for the entity
     */
    async getEntityResponsesRaw(requestParameters: GetEntityResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEntityResponses200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEntityResponses.');
        }

        const queryParameters: any = {};

        if (requestParameters.max_page_size !== undefined) {
            queryParameters['max_page_size'] = requestParameters.max_page_size;
        }

        if (requestParameters.page_token !== undefined) {
            queryParameters['page_token'] = requestParameters.page_token;
        }

        if (requestParameters.response_type !== undefined) {
            queryParameters['response_type'] = requestParameters.response_type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/entities-responses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get responses for the entity
     * Get responses for the entity
     */
    async getEntityResponses(requestParameters: GetEntityResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEntityResponses200Response> {
        const response = await this.getEntityResponsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to get response
     * Get response
     */
    async getResponseRaw(requestParameters: GetResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/responses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get response
     * Get response
     */
    async getResponse(requestParameters: GetResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.getResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to update response
     * Update response
     */
    async patchResponseRaw(requestParameters: PatchResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/responses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.response,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to update response
     * Update response
     */
    async patchResponse(requestParameters: PatchResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.patchResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
