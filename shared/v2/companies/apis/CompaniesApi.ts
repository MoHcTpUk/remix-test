/* tslint:disable */
/* eslint-disable */
/**
 * Companies API
 * Companies API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from './../../runtime';
import type {
  Company,
  GetCompanies200Response,
  Locale,
  PostResendVerificationRequest,
} from '../models';

export interface DeleteCompanyRequest {
    id: string;
}

export interface GetCompaniesRequest {
    max_page_size?: number;
    pages?: Array<number>;
    page_token?: string;
    specializations?: Array<string>;
    number_of_employees?: Array<string>;
    number_of_vacancies?: number;
    only_my?: boolean;
    q?: string;
    location?: string;
}

export interface GetCompanyRequest {
    id: string;
}

export interface PatchCompanyRequest {
    id: string;
    company?: Company;
}

export interface PostCompaniesRequest {
    source?: string;
    locale?: Locale;
    company?: Company;
}

export interface PostResendVerificationOperationRequest {
    id: string;
    post_resend_verification_request?: PostResendVerificationRequest;
}

/**
 * 
 */
export class CompaniesApi extends runtime.BaseAPI {

    /**
     * Request to delete company
     * Delete company
     */
    async deleteCompanyRaw(requestParameters: DeleteCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to delete company
     * Delete company
     */
    async deleteCompany(requestParameters: DeleteCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.deleteCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to get companies
     * Get companies
     */
    async getCompaniesRaw(requestParameters: GetCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCompanies200Response>> {
        const queryParameters: any = {};

        if (requestParameters.max_page_size !== undefined) {
            queryParameters['max_page_size'] = requestParameters.max_page_size;
        }

        if (requestParameters.pages) {
            queryParameters['pages'] = requestParameters.pages;
        }

        if (requestParameters.page_token !== undefined) {
            queryParameters['page_token'] = requestParameters.page_token;
        }

        if (requestParameters.specializations) {
            queryParameters['specializations'] = requestParameters.specializations;
        }

        if (requestParameters.number_of_employees) {
            queryParameters['number_of_employees'] = requestParameters.number_of_employees;
        }

        if (requestParameters.number_of_vacancies !== undefined) {
            queryParameters['number_of_vacancies'] = requestParameters.number_of_vacancies;
        }

        if (requestParameters.only_my !== undefined) {
            queryParameters['only_my'] = requestParameters.only_my;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.location !== undefined) {
            queryParameters['location'] = requestParameters.location;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get companies
     * Get companies
     */
    async getCompanies(requestParameters: GetCompaniesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCompanies200Response> {
        const response = await this.getCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to get company
     * Get company
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get company
     * Get company
     */
    async getCompany(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.getCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to update company info
     * Update company
     */
    async patchCompanyRaw(requestParameters: PatchCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.company,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to update company info
     * Update company
     */
    async patchCompany(requestParameters: PatchCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.patchCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to create new company
     * Create company
     */
    async postCompaniesRaw(requestParameters: PostCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        const queryParameters: any = {};

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.company,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to create new company
     * Create company
     */
    async postCompanies(requestParameters: PostCompaniesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.postCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request to resend email company confirmation
     * Resend email company confirmation
     */
    async postResendVerificationRaw(requestParameters: PostResendVerificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postResendVerification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/companies/{id}/resend-verification`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.post_resend_verification_request,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request to resend email company confirmation
     * Resend email company confirmation
     */
    async postResendVerification(requestParameters: PostResendVerificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postResendVerificationRaw(requestParameters, initOverrides);
    }

}
