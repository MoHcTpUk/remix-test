/* tslint:disable */
/* eslint-disable */
/**
 * Dictionary API
 * API for getting countries, regions, cities and etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from './../../runtime';
import type {
  DictionaryInner,
  Location,
} from '../models';

export interface GetLocationRequest {
    id: string;
}

/**
 * 
 */
export class DictionaryApi extends runtime.BaseAPI {

    /**
     * Request to get list of company specializations
     * Get company specializations
     */
    async getCompanySpecializationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DictionaryInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/company-specializations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get list of company specializations
     * Get company specializations
     */
    async getCompanySpecializations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DictionaryInner>> {
        const response = await this.getCompanySpecializationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Request to get list of languages of notify
     * Get languages of notify
     */
    async getLanguagesOfNotifyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DictionaryInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/languages-of-notify`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get list of languages of notify
     * Get languages of notify
     */
    async getLanguagesOfNotify(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DictionaryInner>> {
        const response = await this.getLanguagesOfNotifyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Request to get location
     * Get location (city)
     */
    async getLocationRaw(requestParameters: GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Request to get location
     * Get location (city)
     */
    async getLocation(requestParameters: GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
