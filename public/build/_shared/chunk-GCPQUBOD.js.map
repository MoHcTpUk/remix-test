{
  "version": 3,
  "sources": ["../../../app/components/pages/User/components/CreateEntityCard/index.tsx", "../../../app/components/pages/User/components/CreateEntityCard/styles.ts"],
  "sourcesContent": ["import { Link, useLocation } from '@remix-run/react';\nimport { useState } from 'react';\nimport routes from 'shared/routing/routes';\n\nimport Button from '~/components/common/Button';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ButtonCreate from '~/components/entities/ButtonCreate';\nimport EmptyState from '~/components/entities/EmptyState';\nimport ModalSelectCreateForm from '~/components/entities/ModalSelectCreateForm';\nimport { useApp, useRouteChecks } from '~/hooks';\n\nimport { ButtonWrapper } from './styles';\n\nexport function CreateEntityCard() {\n  const { t, userContext } = useApp();\n  const loc = useLocation();\n  const { isUserResume, isUserVacancy, isUserCompany } = useRouteChecks();\n  const [visibleSelectionCreate, setSelectionCreate] = useState(false);\n  const [variantCreate, setVariantCreate] = useState<'vacancy' | 'resume'>('resume');\n\n  const isRoute = isUserResume || isUserVacancy || isUserCompany;\n  let iconName;\n  let title;\n  let text;\n  let buttonElement;\n\n  switch (isRoute) {\n    case false:\n      iconName = '';\n      title = '';\n      text = '';\n      buttonElement = null;\n      break;\n    case isUserResume:\n      iconName = 'emojiDocument';\n      title = `${t('common:create_resume')}`;\n      text = `${t('user:create_your_first_resume_it_takes_only_a_few_minutes')}`;\n      buttonElement = (\n        <ButtonCreate\n          variant='resume'\n          priority='primary'\n          setVariantCreate={setVariantCreate}\n          setSelectionCreate={setSelectionCreate}\n        />\n      );\n      break;\n    case isUserVacancy:\n      iconName = 'emojiBriefcase';\n      title = `${t('common:create_vacancy')}`;\n      text = `${t('user:create_your_first_vacancy_it_takes_only_a_few_minutes')}`;\n      buttonElement = (\n        <ButtonCreate\n          variant='vacancy'\n          priority='primary'\n          setVariantCreate={setVariantCreate}\n          setSelectionCreate={setSelectionCreate}\n        />\n      );\n      break;\n    case isUserCompany:\n      iconName = 'emojiStar2';\n      title = `${t('common:create_company')}`;\n      text = `${t('user:create_your_first_company_it_takes_only_a_few_minutes')}`;\n      buttonElement = (\n        <Link\n          to={\n            userContext.user.isAuthenticated\n              ? routes.user.company.create\n              : `${loc.pathname}${loc.search ? `${loc.search}&login=true` : '?login=true'}`\n          }\n        >\n          <Button priority='primary'>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:create_company')}</Text>\n          </Button>\n        </Link>\n      );\n      break;\n    default:\n      iconName = '';\n      title = '';\n      text = '';\n      buttonElement = null;\n  }\n\n  return (\n    <>\n      <EmptyState\n        iconName={iconName}\n        title={title}\n        text={text}\n        buttonControl={<ButtonWrapper>{buttonElement}</ButtonWrapper>}\n      />\n\n      <ModalSelectCreateForm\n        visibility={visibleSelectionCreate}\n        setVisibility={setSelectionCreate}\n        variant={variantCreate}\n      />\n    </>\n  );\n}\n", "import styled from 'styled-components';\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: center;\n\n  & a,\n  button {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n  }\n\n  @media (min-width: 768px) {\n    & a,\n    button {\n      width: fit-content;\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAAA,gBAAyB;;;ACClB,IAAM,gBAAgB,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ADqC5B;AAzBD,SAASC,mBAAmB;AACjC,QAAM;IAAEC;IAAGC;EAAY,IAAIC,OAAO;AAClC,QAAMC,MAAMC,YAAY;AACxB,QAAM;IAAEC;IAAcC;IAAeC;EAAc,IAAIC,eAAe;AACtE,QAAM,CAACC,wBAAwBC,kBAAkB,QAAIC,wBAAS,KAAK;AACnE,QAAM,CAACC,eAAeC,gBAAgB,QAAIF,wBAA+B,QAAQ;AAEjF,QAAMG,UAAUT,gBAAgBC,iBAAiBC;AACjD,MAAIQ;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AAEJ,UAAQJ,SAAO;IACb,KAAK;AACHC,iBAAW;AACXC,cAAQ;AACRC,aAAO;AACPC,sBAAgB;AAChB;IACF,KAAKb;AACHU,iBAAW;AACXC,cAAS,GAAEhB,EAAE,sBAAsB;AACnCiB,aAAQ,GAAEjB,EAAE,2DAA2D;AACvEkB,sBACE,mDAAC,gBACC,SAAQ,UACR,UAAS,WACT,kBACA,sBAJF;;;;aAIyC;AAG3C;IACF,KAAKZ;AACHS,iBAAW;AACXC,cAAS,GAAEhB,EAAE,uBAAuB;AACpCiB,aAAQ,GAAEjB,EAAE,4DAA4D;AACxEkB,sBACE,mDAAC,gBACC,SAAQ,WACR,UAAS,WACT,kBACA,sBAJF;;;;aAIyC;AAG3C;IACF,KAAKX;AACHQ,iBAAW;AACXC,cAAS,GAAEhB,EAAE,uBAAuB;AACpCiB,aAAQ,GAAEjB,EAAE,4DAA4D;AACxEkB,sBACE,mDAAC,QACC,IACEjB,YAAYkB,KAAKC,kBACbC,eAAOF,KAAKG,QAAQC,SACnB,GAAEpB,IAAIqB,WAAWrB,IAAIsB,SAAU,GAAEtB,IAAIsB,sBAAsB,iBAGlE,6DAAC,kBAAO,UAAS,WACf,6DAAC,QAAK,SAASC,gBAAgBC,WAAY3B,YAAE,qBAAqB,KAAlE;;;;aAAoE,KADtE;;;;aAEA,KATF;;;;aAUA;AAEF;IACF;AACEe,iBAAW;AACXC,cAAQ;AACRC,aAAO;AACPC,sBAAgB;EACpB;AAEA,SACE,sFACE;uDAAC,sBACC,UACA,OACA,MACA,eAAe,mDAAC,iBAAeA,2BAAhB;;;;WAA8B,KAJ/C;;;;WAIgE;IAGhE,mDAAC,yBACC,YAAYT,wBACZ,eAAeC,oBACf,SAASE,iBAHX;;;;WAGyB;OAX3B;;;;SAaA;AAEJ;",
  "names": ["import_react", "CreateEntityCard", "t", "userContext", "useApp", "loc", "useLocation", "isUserResume", "isUserVacancy", "isUserCompany", "useRouteChecks", "visibleSelectionCreate", "setSelectionCreate", "useState", "variantCreate", "setVariantCreate", "isRoute", "iconName", "title", "text", "buttonElement", "user", "isAuthenticated", "routes", "company", "create", "pathname", "search", "TextVariantEnum", "textBody2"]
}
