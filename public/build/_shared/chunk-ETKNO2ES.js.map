{
  "version": 3,
  "sources": ["../../../app/components/pages/Search/Vacancies/index.tsx", "../../../app/components/entities/cardComponents/fullCard/CompanyFullCardAbout/index.tsx", "../../../app/components/entities/cardComponents/fullCard/CompanyFullCardHeading/index.tsx", "../../../app/components/entities/cardComponents/fullCard/CompanyFullCardInfo/index.tsx", "../../../app/components/entities/cardWidgets/CompanyFullCard/index.tsx"],
  "sourcesContent": ["import { useLocation } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport { List, ListItem } from '~/components/common/BoxInformation/styles';\nimport { CompanyFullCardWidget, VacancyPartCardWidget } from '~/components/entities/cardWidgets';\nimport ModalShare from '~/components/entities/ModalShare';\nimport { BoxSelectedCard } from '~/components/ui/Card';\nimport { useApp, useRouteChecks, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { CLIENT_BASE_URL } from '~/utils/constants';\n\nimport VacancySearchCard from './Vacancy';\n\nexport const SearchVacanciesComponent = memo(\n  ({\n    vacancies,\n    vacancy,\n    dictionaries,\n    companies,\n    company,\n    myResumes,\n  }: {\n    vacancies?: Vacancy[] | null;\n    vacancy?: Vacancy | null;\n    companies?: Company[] | null;\n    dictionaries?: IDictionaries;\n    company?: Company;\n    myResumes?: Resume[] | null;\n  }): JSX.Element => {\n    const { t } = useApp();\n    const [visibleShare, setVisibleShare] = useState(false);\n    const location = useLocation();\n    const { isSearchCompanyVacancies } = useRouteChecks();\n    const widthScreen = useScreenWidth();\n\n    return (\n      <Box gap='24px' flexDirection='column' width='100%'>\n        {isSearchCompanyVacancies && !vacancies?.[0] && (\n          <BoxInformation\n            variant={BoxInformationEnum.info}\n            title={`${t('user:there_are_currently_no_open_positions_at')} ${\n              company?.name || 'company'\n            }`}\n          />\n        )}\n        {isSearchCompanyVacancies && vacancies?.[0] && (\n          <BoxInformation\n            variant={BoxInformationEnum.info}\n            title={`${t('user:all_open_vacancies_at')} ${company?.name || 'company'}`}\n          />\n        )}\n\n        {isSearchCompanyVacancies && widthScreen < 1280 && (\n          <CompanyFullCardWidget company={company} variant={PageVariantEnum.search} />\n        )}\n\n        <Box flexDirection='row' gap='24px' width='100%'>\n          <Box\n            flexDirection='row'\n            alignItems='flex-start'\n            justifyContent='center'\n            width='100%'\n            gap='24px'\n            as={motion.div}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <Box\n              flexDirection='column'\n              width='100%'\n              gap={widthScreen > 1024 ? '24px' : '16px'}\n              style={{ flex: '1' }}\n            >\n              {vacancies?.map((item) => (\n                <VacancyPartCardWidget\n                  vacancy={item}\n                  selectedVacancy={vacancy?.id}\n                  variant={PageVariantEnum.search}\n                  key={item?.id}\n                />\n              ))}\n\n              {!isSearchCompanyVacancies && !vacancies?.[0] && (\n                <BoxInformation\n                  variant={BoxInformationEnum.info}\n                  title={t(\n                    'user:the_search_has_not_given_any_results_try_changing_your_search_terms',\n                  )}\n                  information={\n                    <List>\n                      <ListItem>{t('user:try_more_general_keywords')}</ListItem>\n                      <ListItem>{t('user:try_changing_the_value_of_one_of_the_filters')}</ListItem>\n                      <ListItem>{t('user:check_your_spelling')}</ListItem>\n                    </List>\n                  }\n                  flexDirection='column'\n                />\n              )}\n\n              <ModalShare\n                link={`${CLIENT_BASE_URL}${location.pathname}/${vacancy?.id || ''}`}\n                visibility={visibleShare}\n                setVisibility={setVisibleShare}\n              />\n            </Box>\n\n            {vacancy && (\n              <BoxSelectedCard>\n                <VacancySearchCard vacancy={vacancy} myResumes={myResumes} />\n              </BoxSelectedCard>\n            )}\n          </Box>\n        </Box>\n      </Box>\n    );\n  },\n);\n", "import type { Company } from 'shared/v2/companies';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\n\nexport function CompanyFullCardAbout({ company }: { company?: Company }): JSX.Element {\n  const { t } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {`${t('common:about')} ${company?.name || ''}`}\n      </Text>\n      <DataField data={company?.description} />\n    </BoxDataFieldsInner>\n  );\n}\n", "import { Link } from '@remix-run/react';\nimport type { Company } from 'shared/v2/companies';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxHeading, HeadingInformation } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { DEFAULT_COMPANY_LOGO } from '~/utils/constants';\nimport { getImageUrl, getValueLang } from '~/utils/helpers.client';\n\nexport function CompanyFullCardHeading({ company }: { company?: Company }): JSX.Element {\n  const { theme, userContext } = useApp();\n\n  return (\n    <BoxHeading\n      variant={EntityVariantEnum.company}\n      className='fullCard'\n      sizeVariant={SizeCardVariantEnum.full}\n    >\n      <img\n        src={company?.logo_uri ? getImageUrl(company?.logo_uri) : DEFAULT_COMPANY_LOGO}\n        alt='company logo'\n      />\n      <HeadingInformation variant='company'>\n        <Text className='title' variant={TextVariantEnum.textHeading2}>\n          {company?.name}\n        </Text>\n        <Text variant={TextVariantEnum.textBody1medium} color={theme.user.descriptionTextColor}>\n          {getValueLang(company?.specialization_name, userContext.language)}\n        </Text>\n        <Link\n          to={company?.website || ''}\n          style={{\n            width: '100%',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          <Text variant={TextVariantEnum.textBody2medium} color={theme.accentTextColor}>\n            {company?.website}\n          </Text>\n        </Link>\n      </HeadingInformation>\n    </BoxHeading>\n  );\n}\n", "import type { Company } from 'shared/v2/companies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport function CompanyFullCardInfo({ company }: { company?: Company }): JSX.Element {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:company_information')}\n      </Text>\n      <DataField variant='custom' label={t('user:opened_vacancies')}>\n        <Box>\n          <BoxDataChips>\n            <Text variant={TextVariantEnum.textBody2medium}>\n              {company?.number_of_vacancies?.toFixed()}\n            </Text>\n          </BoxDataChips>\n        </Box>\n      </DataField>\n      <DataField\n        label={t('user:district')}\n        data={getValueLang(company?.city_name, userContext.language)}\n      />\n      <DataField label={t('user:address')} data={company?.address} />\n      <DataField label={t('user:zip_code')} data={company?.zip_code} />\n      <DataField label={t('user:phone')} data={company?.phone} />\n      <DataField\n        label={t('user:number_of_employees')}\n        data={getValueLang(company?.number_of_employees_name, userContext.language)}\n      />\n    </BoxDataFieldsInner>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Company } from 'shared/v2/companies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport {\n  CompanyFullCardAbout,\n  CompanyFullCardHeading,\n  CompanyFullCardInfo,\n} from '~/components/entities/cardComponents/fullCard';\nimport SignInForRequest from '~/components/pages/Search/SignInForRequest';\nimport { BoxDataFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport type { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\n\nimport { BoxControlContainer } from '../../BoxControl';\n\nexport function CompanyFullCardWidget({\n  company,\n  variant,\n}: {\n  company?: Company;\n  variant?: PageVariantEnum;\n}): JSX.Element {\n  const { userContext } = useApp();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <BoxCard nameCard={VacancyCardEnum.vacancy}>\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <CompanyFullCardHeading company={company} />\n\n        <BoxDataFields>\n          <CompanyFullCardInfo company={company} />\n          {company?.description && <CompanyFullCardAbout company={company} />}\n        </BoxDataFields>\n\n        <BoxControlContainer\n          variant={variant}\n          typeEntity={EntityVariantEnum.company}\n          id={company?.id}\n          typeCard={SizeCardVariantEnum.full}\n        />\n\n        {!userContext?.user?.isAuthenticated && widthScreen >= 1280 && (\n          <SignInForRequest variant='vacancy' />\n        )}\n      </CardContainer>\n    </BoxCard>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "CompanyFullCardAbout", "company", "t", "useApp", "TextVariantEnum", "textHeading2", "name", "description", "import_jsx_dev_runtime", "CompanyFullCardHeading", "company", "theme", "userContext", "useApp", "EntityVariantEnum", "SizeCardVariantEnum", "full", "logo_uri", "getImageUrl", "DEFAULT_COMPANY_LOGO", "TextVariantEnum", "textHeading2", "name", "textBody1medium", "user", "descriptionTextColor", "getValueLang", "specialization_name", "language", "website", "width", "whiteSpace", "overflow", "textOverflow", "textBody2medium", "accentTextColor", "import_jsx_dev_runtime", "CompanyFullCardInfo", "company", "t", "userContext", "useApp", "TextVariantEnum", "textHeading2", "textBody2medium", "number_of_vacancies", "toFixed", "getValueLang", "city_name", "language", "address", "zip_code", "phone", "number_of_employees_name", "import_jsx_dev_runtime", "CompanyFullCardWidget", "company", "variant", "userContext", "useApp", "widthScreen", "useScreenWidth", "VacancyCardEnum", "vacancy", "motion", "div", "opacity", "type", "bounce", "duration", "description", "EntityVariantEnum", "id", "SizeCardVariantEnum", "full", "user", "isAuthenticated", "import_jsx_dev_runtime", "SearchVacanciesComponent", "memo", "vacancies", "vacancy", "dictionaries", "companies", "company", "myResumes", "t", "useApp", "visibleShare", "setVisibleShare", "useState", "location", "useLocation", "isSearchCompanyVacancies", "useRouteChecks", "widthScreen", "useScreenWidth", "BoxInformationEnum", "info", "name", "PageVariantEnum", "search", "motion", "div", "opacity", "flex", "map", "item", "id", "CLIENT_BASE_URL", "pathname"]
}
