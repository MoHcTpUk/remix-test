{
  "version": 3,
  "sources": ["../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyAdditional/VacancyAdditionalEdit.tsx", "../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyComponentCard/VacancyComponentCardEdit.tsx", "../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyContacts/VacancyContactsEdit.tsx", "../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyLocation/VacancyLocationEdit.tsx", "../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyRequirements/VacancyRequirementsEdit.tsx", "../../../app/components/pages/User/Vacancies/Vacancy/styles.ts", "../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyResponses/VacancyResponsesEdit.tsx"],
  "sourcesContent": ["import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers.client';\n\nexport default function VacancyAdditionalEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard?: VacancyCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  step?: number;\n  state?: StateCard;\n  actionData?: IUpdateVacancy;\n}) {\n  const { t, userContext } = useApp();\n\n  const staticFields = () => (\n    <>\n      <Select\n        entries={extractTitles(dictionaries?.skills, userContext.language)}\n        placeholder={t('user:skills')}\n        id='skills'\n        name='skills'\n        variant='search-multi'\n        values={vacancy?.additional_skills?.skill_ids}\n        errorText={actionData?.fieldErrors?.skill_ids?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.drivingLicenses, userContext.language)}\n        placeholder={t('user:driver_license')}\n        id='driver_license'\n        name='driver_license'\n        variant='search-multi'\n        values={vacancy?.additional_skills?.driver_license_ids}\n        errorText={actionData?.fieldErrors?.driver_license_ids?.[userContext.language]}\n      />\n\n      <Input\n        placeholder={t('user:other_licenses')}\n        value={vacancy?.additional_skills?.other_licenses?.join(', ')}\n        id='other_licenses'\n        name='other_licenses'\n        errorText={actionData?.fieldErrors?.other_licenses?.[userContext.language]}\n      />\n    </>\n  );\n\n  return (\n    <BoxCard\n      title={t('user:additional_information')}\n      withEditButton\n      nameCard={VacancyCardEnum.additional}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={6}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxFields>\n          <input name='nameCard' type='hidden' value='additional_skills' />\n\n          {staticFields()}\n        </BoxFields>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { EntityCompany } from 'shared/client/data-contracts';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useGetPositionFromSpecialization } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers.client';\n\nexport default function VacancyComponentCardEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  vacancy,\n  dictionaries,\n  companies,\n  actionData,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard?: VacancyCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  companies?: EntityCompany[];\n  actionData?: IUpdateVacancy;\n}) {\n  const { t, userContext } = useApp();\n\n  const { entriesPositions, setSpecializationState, position, specializationState } =\n    useGetPositionFromSpecialization(\n      vacancy?.vacancy_page?.specialization_id,\n      vacancy?.vacancy_page?.position,\n    );\n\n  return (\n    <BoxCard\n      title={t('user:vacancy')}\n      withEditButton\n      nameCard={VacancyCardEnum.vacancy}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      step={step}\n      state={state}\n      maxStep={6}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxFields>\n          <input name='nameCard' type='hidden' value='vacancy_page' />\n\n          <Select\n            entries={extractTitles(dictionaries?.specializations, userContext.language)}\n            placeholder={t('user:specialization')}\n            id='specialization'\n            name='specialization'\n            setExternalState={setSpecializationState}\n            values={specializationState}\n            variant='search-single'\n            errorText={actionData?.fieldErrors?.specialization_id?.[userContext.language]}\n          />\n          <Select\n            placeholder={t('user:position')}\n            id='position'\n            name='position'\n            externalState={[position || '']}\n            values={[position || '']}\n            entries={entriesPositions}\n            variant='single-text'\n            errorText={actionData?.fieldErrors?.position?.[userContext.language]}\n            disabled={!specializationState[0]}\n          />\n\n          <Select\n            entries={extractTitles(dictionaries?.employment, userContext.language)}\n            placeholder={t('user:employment')}\n            id='employment'\n            name='employment'\n            variant='multi'\n            values={vacancy?.vacancy_page?.employment_type_ids}\n            errorText={actionData?.fieldErrors?.employment_type_ids?.[userContext.language]}\n          />\n          <Select\n            entries={extractTitles(dictionaries?.workfeatures, userContext.language)}\n            placeholder={t('user:work_features')}\n            id='work_features'\n            name='work_features'\n            values={vacancy?.vacancy_page?.work_feature_ids}\n            errorText={actionData?.fieldErrors?.work_feature_ids?.[userContext.language]}\n            variant='multi'\n          />\n          <Select\n            entries={extractTitles(dictionaries?.payoutPeriods, userContext.language)}\n            placeholder={t('user:salary_payout_period')}\n            id='salary_payout_period'\n            name='salary_payout_period'\n            values={[vacancy?.vacancy_page?.salary_payout_period_id || '']}\n            errorText={actionData?.fieldErrors?.salary_payout_period_id?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:salary_fixed')}\n            id='fixed'\n            name='fixed'\n            value={vacancy?.vacancy_page?.salary_fixed?.toString()}\n            errorText={actionData?.fieldErrors?.salary_fixed?.[userContext.language]}\n            onlyNumber\n          />\n          <Input\n            placeholder={t('user:from')}\n            id='from'\n            name='from'\n            value={vacancy?.vacancy_page?.salary_from?.toString()}\n            errorText={actionData?.fieldErrors?.salary_from?.[userContext.language]}\n            onlyNumber\n          />\n          <Input\n            placeholder={t('user:to')}\n            id='to'\n            name='to'\n            value={vacancy?.vacancy_page?.salary_to?.toString()}\n            errorText={actionData?.fieldErrors?.salary_to?.[userContext.language]}\n            onlyNumber\n          />\n\n          <Select\n            entries={extractTitles(dictionaries?.currency, userContext.language)}\n            placeholder={t('user:currency')}\n            id='i_currency'\n            name='currency'\n            values={[vacancy?.vacancy_page?.currency_id || '']}\n            errorText={actionData?.fieldErrors?.currency_id?.[userContext.language]}\n          />\n          <Input\n            variant='textarea'\n            placeholder={t('user:description')}\n            id='i_description'\n            name='description'\n            value={vacancy?.vacancy_page?.description}\n            errorText={actionData?.fieldErrors?.description?.[userContext.language]}\n          />\n        </BoxFields>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Link } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport routes from 'shared/routing/routes';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { extractCompanyData, extractTitles } from '~/utils/helpers.client';\n\nexport default function VacancyContactsEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  vacancy,\n  dictionaries,\n  companies,\n  actionData,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard?: VacancyCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  companies?: Company[];\n  actionData?: IUpdateVacancy;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:vacancy_contacts')}\n      withEditButton\n      nameCard={VacancyCardEnum.employer}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={6}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxFields>\n          <input name='nameCard' type='hidden' value='contacts' />\n\n          {state !== 'create' && (\n            <Select\n              entries={extractCompanyData(companies)}\n              placeholder={t('user:company_name')}\n              id='company_id'\n              name='company_id'\n              values={[vacancy?.contacts?.company_id || '']}\n              errorText={actionData?.fieldErrors?.company_id?.[userContext.language]}\n            />\n          )}\n\n          {state === 'create' && (\n            <>\n              <Select\n                entries={extractCompanyData(companies)}\n                placeholder={t('user:choose_company')}\n                name='company_id'\n                id='company_id'\n                values={[vacancy?.contacts?.company_id || '']}\n                errorText={actionData?.fieldErrors?.company_id?.[userContext.language]}\n              />\n\n              <Link to={`${routes.user.company.create}?forvacancy=true`}>\n                <Button name='create-company' priority='secondary' fullwidth>\n                  <Text variant={TextVariantEnum.textBody2}>\n                    {t('user:create_another_company')}\n                  </Text>\n                </Button>\n              </Link>\n            </>\n          )}\n\n          <Input\n            placeholder={t('user:contact_phone')}\n            id='contact_phone'\n            name='contact_phone'\n            variant='phone'\n            value={vacancy?.contacts?.contact_phone || userContext.user.phone}\n            errorText={actionData?.fieldErrors?.contact_phone?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:first_name')}\n            id='first_name'\n            name='first_name'\n            value={vacancy?.contacts?.first_name || userContext.user.firstName}\n            errorText={actionData?.fieldErrors?.first_name?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:last_name')}\n            id='last_name'\n            name='last_name'\n            value={vacancy?.contacts?.last_name || userContext.user.lastName}\n            errorText={actionData?.fieldErrors?.last_name?.[userContext.language]}\n          />\n\n          <Select\n            entries={extractTitles(dictionaries?.sources, userContext.language)}\n            placeholder={t('user:how_did_you_know_about_us')}\n            id='source'\n            name='source'\n            values={[vacancy?.contacts?.source_of_discovery_id || '']}\n            errorText={actionData?.fieldErrors?.source_of_discovery_id?.[userContext.language]}\n          />\n        </BoxFields>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { EntityVacancy } from 'shared/client/data-contracts';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useGetLocation } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { extractTitles, extractTitlesNewWay } from '~/utils/helpers.client';\n\nexport default function VacancyLocationEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard?: VacancyCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateVacancy;\n}) {\n  const { t, userContext } = useApp();\n\n  const {\n    entriesRegions,\n    setNewContry,\n    newRegion,\n    setNewRegion,\n    newCountry,\n    newCity,\n    setNewCity,\n    newEntriesCity,\n  } = useGetLocation(\n    vacancy?.location?.country_id,\n    vacancy?.location?.region_id,\n    vacancy?.location?.city_id,\n    dictionaries?.location,\n  );\n\n  return (\n    <BoxCard\n      title={t('user:location')}\n      withEditButton\n      nameCard={VacancyCardEnum.location}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={6}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxFields>\n          <input name='nameCard' type='hidden' value='location' />\n\n          <Select\n            entries={extractTitles(dictionaries?.countries, userContext.language)}\n            placeholder={t('user:country')}\n            id='country'\n            name='country'\n            values={newCountry}\n            setExternalState={setNewContry}\n            variant='search-single'\n            errorText={actionData?.fieldErrors?.country_id?.[userContext.language]}\n          />\n          <Select\n            entries={extractTitles(entriesRegions, userContext.language)}\n            setExternalState={setNewRegion}\n            values={newRegion}\n            placeholder={t('user:province')}\n            id='region'\n            name='region'\n            variant='search-single'\n            errorText={actionData?.fieldErrors?.region_id?.[userContext.language]}\n            disabled={!entriesRegions || !entriesRegions?.length}\n          />\n          <Select\n            entries={extractTitles(newEntriesCity, userContext.language)}\n            values={newCity}\n            setExternalState={setNewCity}\n            placeholder={t('user:district')}\n            id='i_city'\n            name='city'\n            variant='search-single'\n            errorText={actionData?.fieldErrors?.city_id?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:address')}\n            value={vacancy?.location?.address}\n            id='i_address'\n            name='address'\n          />\n          <Select\n            entries={extractTitlesNewWay(dictionaries?.languagesOfNotify, userContext.language)}\n            placeholder={t('user:language_of_notify')}\n            id='language_of_notify'\n            name='language_of_notify'\n            values={[vacancy?.location?.language_of_notify_id || '']}\n            errorText={actionData?.fieldErrors?.language_of_notify_id?.[userContext.language]}\n          />\n          <Select\n            entries={extractTitles(dictionaries?.employeeNumbers, userContext.language)}\n            placeholder={t('user:number_of_employees')}\n            id='number_of_employees'\n            name='number_of_employees'\n            values={[vacancy?.location?.number_of_employees_id || '']}\n            errorText={actionData?.fieldErrors?.number_of_employees_id?.[userContext.language]}\n          />\n        </BoxFields>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { useState } from 'react';\nimport type { Education, Language, Vacancy, WorkExperience } from 'shared/v2/vacancies';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers.client';\n\ninterface EducationFormFieldProps {\n  education: Education;\n  dictionaries?: IDictionaries;\n  index: number;\n  onChange: (index: number, updatedEducation: Education) => void;\n  onDelete: (index: number) => void;\n  actionData?: IUpdateVacancy;\n}\n\ninterface WorkExperienceFormProps {\n  workExperience: WorkExperience;\n  dictionaries?: IDictionaries;\n  index: number;\n  onChange: (index: number, updatedWorkExperience: WorkExperience) => void;\n  onDelete: (index: number) => void;\n  actionData?: IUpdateVacancy;\n}\n\ninterface LanguageFormProps {\n  language: Language;\n  dictionaries?: IDictionaries;\n  index: number;\n  onChange: (index: number, updatedLanguage: Language) => void;\n  onDelete: (index: number) => void;\n  actionData?: IUpdateVacancy;\n}\n\nfunction EducationForm({\n  education,\n  dictionaries,\n  index,\n  onChange,\n  onDelete,\n  actionData,\n}: EducationFormFieldProps) {\n  const { t, theme, userContext } = useApp();\n\n  const handleChange = (updatedEducation: Education) => {\n    onChange(index, updatedEducation);\n  };\n\n  const handleDelete = () => {\n    onDelete(index);\n  };\n\n  return (\n    <Box\n      width='100%'\n      flexDirection='column'\n      gap='24px'\n      style={{\n        borderBottom: `1px solid ${theme.user.borderColor}`,\n        paddingBottom: '24px',\n      }}\n      key={education.specialization_id}\n    >\n      <Select\n        entries={extractTitles(dictionaries?.requirementsLevel, userContext.language)}\n        placeholder={t('user:education')}\n        id={`${index}.education`}\n        name='education'\n        values={[education.education_id || '']}\n        onChange={(value) => handleChange({ ...education, education_id: value })}\n        errorText={actionData?.fieldErrors?.education_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.educationLevel, userContext.language)}\n        placeholder={t('user:education_level')}\n        id={`${index}.education_level`}\n        name='education_level'\n        values={[education.level_id || '']}\n        onChange={(value) => handleChange({ ...education, level_id: value })}\n        errorText={actionData?.fieldErrors?.level_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.specializations, userContext.language)}\n        placeholder={t('user:specialization')}\n        id={`${index}.education_specialization`}\n        name='education_specialization'\n        values={[education.specialization_id || '']}\n        onChange={(value) => handleChange({ ...education, specialization_id: value })}\n        errorText={actionData?.fieldErrors?.specialization_id?.[userContext.language]}\n      />\n\n      {/* Delete button */}\n      <Button onClick={handleDelete} priority='secondary' fullwidth>\n        <Text variant={TextVariantEnum.textBody2}>{t('common:delete')}</Text>\n      </Button>\n    </Box>\n  );\n}\n\nfunction WorkExperienceForm({\n  workExperience,\n  dictionaries,\n  index,\n  onChange,\n  onDelete,\n  actionData,\n}: WorkExperienceFormProps) {\n  const { t, theme, userContext } = useApp();\n\n  const handleChange = (updatedWorkExperience: WorkExperience) => {\n    onChange(index, updatedWorkExperience);\n  };\n\n  const handleDelete = () => {\n    onDelete(index);\n  };\n\n  return (\n    <Box\n      width='100%'\n      flexDirection='column'\n      gap='24px'\n      style={{\n        borderBottom: `1px solid ${theme.user.borderColor}`,\n        paddingBottom: '24px',\n      }}\n      key={workExperience.specialization_id}\n    >\n      <Select\n        entries={extractTitles(dictionaries?.requirementsLevel, userContext.language)}\n        placeholder={t('user:work_experience')}\n        id={`${index}.work_experience`}\n        name='workExperience'\n        values={[workExperience.work_experience_id || '']}\n        onChange={(value) => handleChange({ ...workExperience, work_experience_id: value })}\n        errorText={actionData?.fieldErrors?.work_experience_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.yearsOfExperience, userContext.language)}\n        placeholder={t('user:period_of_work')}\n        id={`${index}.periodOfWork`}\n        name='periodOfWork'\n        values={[workExperience.period_of_work_id || '']}\n        onChange={(value) => handleChange({ ...workExperience, period_of_work_id: value })}\n        errorText={actionData?.fieldErrors?.period_of_work_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.specializations, userContext.language)}\n        placeholder={t('user:specialization')}\n        id={`${index}.workExperience_specialization`}\n        name='workExperience_specialization'\n        values={[workExperience.specialization_id || '']}\n        onChange={(value) => handleChange({ ...workExperience, specialization_id: value })}\n        errorText={actionData?.fieldErrors?.specialization_id?.[userContext.language]}\n      />\n\n      {/* Delete button */}\n      <Button onClick={handleDelete} priority='secondary' fullwidth>\n        <Text variant={TextVariantEnum.textBody2}>{t('common:delete')}</Text>\n      </Button>\n    </Box>\n  );\n}\n\nfunction LanguageForm({\n  language,\n  dictionaries,\n  index,\n  onChange,\n  onDelete,\n  actionData,\n}: LanguageFormProps) {\n  const { t, theme, userContext } = useApp();\n\n  const handleChange = (updatedLanguage: Language) => {\n    onChange(index, updatedLanguage);\n  };\n\n  const handleDelete = () => {\n    onDelete(index);\n  };\n\n  return (\n    <Box\n      width='100%'\n      flexDirection='column'\n      gap='24px'\n      style={{\n        borderBottom: `1px solid ${theme.user.borderColor}`,\n        paddingBottom: '24px',\n      }}\n      key={language.language_knowledge_id}\n    >\n      <Select\n        entries={extractTitles(dictionaries?.requirementsLevel, userContext.language)}\n        placeholder={t('user:language_knowledge')}\n        id={`${index}.language_knowledge`}\n        name='language_knowledge'\n        values={[language.language_knowledge_id || '']}\n        onChange={(value) => handleChange({ ...language, language_knowledge_id: value })}\n        errorText={actionData?.fieldErrors?.language_knowledge_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.languages, userContext.language)}\n        placeholder={t('user:language')}\n        id={`${index}.language`}\n        name='language'\n        values={[language.language_id || '']}\n        onChange={(value) => handleChange({ ...language, language_id: value })}\n        errorText={actionData?.fieldErrors?.language_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.languageLevel, userContext.language)}\n        placeholder={t('user:level')}\n        id={`${index}.language_level`}\n        name='language_level'\n        values={[language.level_id || '']}\n        onChange={(value) => handleChange({ ...language, level_id: value })}\n        errorText={actionData?.fieldErrors?.level_id?.[userContext.language]}\n      />\n\n      {/* Delete button */}\n      <Button onClick={handleDelete} priority='secondary' fullwidth>\n        <Text variant={TextVariantEnum.textBody2}>{t('common:delete')}</Text>\n      </Button>\n    </Box>\n  );\n}\n\nexport default function VacancyRequirementsEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard?: VacancyCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateVacancy;\n}) {\n  const { t } = useApp();\n\n  const educations: Education[] = [\n    {\n      education_id: '',\n      level_id: '',\n      specialization_id: '',\n    },\n  ];\n\n  const works: WorkExperience[] = [\n    {\n      work_experience_id: '',\n      period_of_work_id: '',\n      specialization_id: '',\n    },\n  ];\n\n  const langs: Language[] = [\n    {\n      language_id: '',\n      level_id: '',\n      language_knowledge_id: '',\n    },\n  ];\n\n  const [educationExperiences, setEducationExperiences] = useState(\n    vacancy?.requirements?.education || educations,\n  );\n  const [workExperiences, setWorkExperiences] = useState(\n    vacancy?.requirements?.work_experience || works,\n  );\n  const [languages, setLanguages] = useState(vacancy?.requirements?.language || langs);\n\n  const handleAddEducationClick = () => {\n    setEducationExperiences((prevExperiences) => [\n      ...prevExperiences,\n      {\n        education_id: '',\n        level_id: '',\n        specialization_id: '',\n      },\n    ]);\n  };\n\n  const handleAddWorksClick = () => {\n    setWorkExperiences((prevExperiences) => [\n      ...prevExperiences,\n      {\n        work_experience_id: '',\n        period_of_work_id: '',\n        specialization_id: '',\n      },\n    ]);\n  };\n\n  const handleAddLangsClick = () => {\n    setLanguages((prevLanguages) => [\n      ...prevLanguages,\n      {\n        language_id: '',\n        level_id: '',\n        language_knowledge_id: '',\n      },\n    ]);\n  };\n\n  const handleDeleteEducation = (index: number) => {\n    setEducationExperiences((prevExperiences) => prevExperiences.filter((_, i) => i !== index));\n  };\n\n  const handleDeleteWorkExperience = (index: number) => {\n    setWorkExperiences((prevExperiences) => prevExperiences.filter((_, i) => i !== index));\n  };\n\n  const handleDeleteLanguage = (index: number) => {\n    setLanguages((prevLanguages) => prevLanguages.filter((_, i) => i !== index));\n  };\n\n  const handleEducationChange = (index: number, updatedEducation: Education) => {\n    const updatedExperiences = [...educationExperiences];\n    updatedExperiences[index] = updatedEducation;\n    setEducationExperiences(updatedExperiences);\n  };\n\n  const handleWorkExperienceChange = (index: number, updatedWorkExperience: WorkExperience) => {\n    const updatedExperiences = [...workExperiences];\n    updatedExperiences[index] = updatedWorkExperience;\n    setWorkExperiences(updatedExperiences);\n  };\n\n  const handleLanguageChange = (index: number, updatedLanguage: Language) => {\n    const updatedLanguages = [...languages];\n    updatedLanguages[index] = updatedLanguage;\n    setLanguages(updatedLanguages);\n  };\n\n  return (\n    <BoxCard\n      title={t('user:requirements')}\n      withEditButton\n      nameCard={VacancyCardEnum.requirements}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={6}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <input name='nameCard' type='hidden' value='requirements' />\n        <BoxFields>\n          {educationExperiences?.map((education, index) => {\n            const key = uuidv4();\n            return (\n              <EducationForm\n                key={key}\n                index={index}\n                education={education}\n                dictionaries={dictionaries}\n                onChange={handleEducationChange}\n                onDelete={handleDeleteEducation}\n                actionData={actionData}\n              />\n            );\n          })}\n          <Button onClick={handleAddEducationClick} priority='secondary' fullwidth>\n            <Text variant={TextVariantEnum.textBody2}> {t('user:add_education')}</Text>\n          </Button>\n          {workExperiences?.map((workExperience, index) => {\n            const key = uuidv4();\n            return (\n              <WorkExperienceForm\n                key={key}\n                index={index}\n                workExperience={workExperience}\n                dictionaries={dictionaries}\n                onChange={handleWorkExperienceChange}\n                onDelete={handleDeleteWorkExperience}\n                actionData={actionData}\n              />\n            );\n          })}\n          <Button onClick={handleAddWorksClick} priority='secondary' fullwidth>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:add_work_experience')}</Text>\n          </Button>\n          {languages?.map((language, index) => {\n            const key = uuidv4();\n            return (\n              <LanguageForm\n                key={key}\n                index={index}\n                language={language}\n                dictionaries={dictionaries}\n                onChange={handleLanguageChange}\n                onDelete={handleDeleteLanguage}\n                actionData={actionData}\n              />\n            );\n          })}\n          <Button onClick={handleAddLangsClick} priority='secondary' fullwidth>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:add_language')}</Text>\n          </Button>\n        </BoxFields>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { styled } from 'styled-components';\n\nexport const BoxCustomData = styled.div`\n  padding: 8px 12px;\n  border-radius: 80px;\n  border: 1px solid ${({ theme }) => theme.user.borderColor};\n  height: 40px;\n  @media (min-width: 1024px) {\n    height: 44px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 16px;\n  @media (min-width: 1024px) {\n    gap: 24px;\n  }\n`;\n\nexport const FieldsWrapper = styled.div<{ variant?: 'edit' | 'data' }>`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 100%;\n  @media (min-width: 768px) {\n    padding-top: ${({ variant }) => (variant === 'data' ? '8px' : '0')};\n    margin-bottom: ${({ variant }) => (variant === 'edit' ? '-4px' : '0')};\n  }\n`;\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Switcher } from '~/components/common/Switcher';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxSetting } from '~/components/pages/User/Resumes/Resume/components/ResumeSettings/styles';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers.client';\n\nimport { FieldsWrapper } from '../../styles';\n\nexport default function VacancyResponsesEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard?: VacancyCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  step?: number;\n  state?: StateCard;\n  actionData?: IUpdateVacancy;\n}) {\n  const { t, theme, userContext } = useApp();\n\n  const renderFormFields = (disabled?: boolean) => (\n    <>\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>\n          {t('user:show_phone_number_for_verified_employees_only')}\n        </Text>\n        <Switcher\n          checked={Boolean(vacancy?.responses_vacancy?.show_phone_number)}\n          htmlLabel='i_show_phone'\n          name='show_phone'\n          variant='default'\n          checkedLabel={t('common:show')}\n          unCheckedLabel={t('common:hide')}\n        />\n      </BoxSetting>\n\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>\n          {t('user:show_email_for_verified_employees_only')}\n        </Text>\n        <Switcher\n          htmlLabel='i_show_email'\n          name='show_email'\n          checked={Boolean(vacancy?.responses_vacancy?.show_email)}\n          variant='default'\n          checkedLabel={t('common:show')}\n          unCheckedLabel={t('common:hide')}\n        />\n      </BoxSetting>\n    </>\n  );\n\n  return (\n    <BoxCard\n      title={t('user:responses_vacancy')}\n      withEditButton\n      nameCard={VacancyCardEnum.responses}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={6}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxFields>\n          <input name='nameCard' type='hidden' value='responses_vacancy' />\n          <Select\n            entries={extractTitles(dictionaries?.responseCanBeDoneBy, userContext.language)}\n            placeholder={t('user:response_can_be_done_by')}\n            id='canBeDoneBy'\n            name='canBeDoneBy'\n            values={[vacancy?.responses_vacancy?.response_can_be_done_by_id || '']}\n            errorText={actionData?.fieldErrors?.response_can_be_done_by_id?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:email_for_the_responses')}\n            id='email'\n            name='email'\n            value={vacancy?.responses_vacancy?.email_for_the_responses || userContext.user.email}\n            errorText={actionData?.fieldErrors?.email_for_the_responses?.[userContext.language]}\n          />\n          <Select\n            entries={extractTitles(dictionaries?.emailNotificationsSettings, userContext.language)}\n            placeholder={t('user:get_email_notifications_for')}\n            id='notificationsSettings'\n            name='notificationsSettings'\n            values={[vacancy?.responses_vacancy?.response_can_be_done_by_id || '']}\n            errorText={actionData?.fieldErrors?.response_can_be_done_by_id?.[userContext.language]}\n          />\n\n          <Select\n            entries={extractTitles(dictionaries?.complianceOfRequirements, userContext.language)}\n            placeholder={t('user:compliance_of_requirements')}\n            id='complianceOfRequirements'\n            name='complianceOfRequirements'\n            values={[vacancy?.responses_vacancy?.compliance_of_requirements_id || '']}\n            errorText={\n              actionData?.fieldErrors?.compliance_of_requirements_id?.[userContext.language]\n            }\n          />\n          <FieldsWrapper variant='edit'>{renderFormFields()}</FieldsWrapper>\n        </BoxFields>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n"],
  "mappings": "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",
  "names": ["editCard", "setEditCard", "state", "step", "vacancy", "dictionaries", "actionData", "t", "userContext", "useApp", "staticFields", "extractTitles", "skills", "language", "additional_skills", "skill_ids", "fieldErrors", "drivingLicenses", "driver_license_ids", "other_licenses", "join", "VacancyCardEnum", "additional", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "vacancy", "dictionaries", "companies", "actionData", "t", "userContext", "useApp", "entriesPositions", "setSpecializationState", "position", "specializationState", "useGetPositionFromSpecialization", "vacancy_page", "specialization_id", "VacancyCardEnum", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "extractTitles", "specializations", "language", "fieldErrors", "employment", "employment_type_ids", "workfeatures", "work_feature_ids", "payoutPeriods", "salary_payout_period_id", "salary_fixed", "toString", "salary_from", "salary_to", "currency", "currency_id", "description", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "vacancy", "dictionaries", "companies", "actionData", "t", "userContext", "useApp", "VacancyCardEnum", "employer", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "extractCompanyData", "contacts", "company_id", "fieldErrors", "language", "routes", "user", "company", "create", "TextVariantEnum", "textBody2", "contact_phone", "phone", "first_name", "firstName", "last_name", "lastName", "extractTitles", "sources", "source_of_discovery_id", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "vacancy", "dictionaries", "actionData", "t", "userContext", "useApp", "entriesRegions", "setNewContry", "newRegion", "setNewRegion", "newCountry", "newCity", "setNewCity", "newEntriesCity", "useGetLocation", "location", "country_id", "region_id", "city_id", "VacancyCardEnum", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "extractTitles", "countries", "language", "fieldErrors", "length", "address", "extractTitlesNewWay", "languagesOfNotify", "language_of_notify_id", "employeeNumbers", "number_of_employees_id", "import_react", "import_jsx_dev_runtime", "EducationForm", "education", "dictionaries", "index", "onChange", "onDelete", "actionData", "t", "theme", "userContext", "useApp", "handleChange", "updatedEducation", "handleDelete", "borderBottom", "user", "borderColor", "paddingBottom", "extractTitles", "requirementsLevel", "language", "education_id", "value", "fieldErrors", "educationLevel", "level_id", "specializations", "specialization_id", "TextVariantEnum", "textBody2", "WorkExperienceForm", "workExperience", "updatedWorkExperience", "work_experience_id", "yearsOfExperience", "period_of_work_id", "LanguageForm", "updatedLanguage", "language_knowledge_id", "languages", "language_id", "languageLevel", "editCard", "setEditCard", "state", "step", "vacancy", "educations", "works", "langs", "educationExperiences", "setEducationExperiences", "useState", "requirements", "workExperiences", "setWorkExperiences", "work_experience", "setLanguages", "handleAddEducationClick", "prevExperiences", "handleAddWorksClick", "handleAddLangsClick", "prevLanguages", "handleDeleteEducation", "filter", "_", "i", "handleDeleteWorkExperience", "handleDeleteLanguage", "handleEducationChange", "updatedExperiences", "handleWorkExperienceChange", "handleLanguageChange", "updatedLanguages", "VacancyCardEnum", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "map", "key", "uuidv4", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "vacancy", "dictionaries", "actionData", "t", "theme", "userContext", "useApp", "renderFormFields", "disabled", "TextVariantEnum", "textBody2medium", "Boolean", "responses_vacancy", "show_phone_number", "show_email", "VacancyCardEnum", "responses", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "extractTitles", "responseCanBeDoneBy", "language", "response_can_be_done_by_id", "fieldErrors", "email_for_the_responses", "user", "email", "emailNotificationsSettings", "complianceOfRequirements", "compliance_of_requirements_id"]
}
