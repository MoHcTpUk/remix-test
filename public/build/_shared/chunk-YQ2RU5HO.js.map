{
  "version": 3,
  "sources": ["../../../app/components/entities/cardWidgets/ResumePartCard/index.tsx"],
  "sourcesContent": ["import { Link, useLocation } from '@remix-run/react';\nimport { memo } from 'react';\nimport type { ResponseType } from 'shared/v2/responses';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport ResponseTypeHeading from '~/components/common/ResponseTypeStatus';\nimport { BoxControlContainer } from '~/components/entities/BoxControl';\nimport {\n  ResumePartCardHeading,\n  ResumePartCardInfo,\n} from '~/components/entities/cardComponents/partCard';\nimport { MediaBox } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { ResponseState } from '~/types/enums/responseState';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport { updateSearchString } from '~/utils/helpers.client';\n\nexport const ResumePartCardWidget = memo(\n  ({\n    resume,\n    state,\n    type,\n    selectedResume,\n    variant,\n    responseId,\n    responseAction,\n    handleRequest,\n  }: {\n    resume?: Resume;\n    selectedResume?: string;\n    variant?: PageVariantEnum;\n    type?: ResponseType;\n    state?: ResponseState | string;\n    responseId?: string;\n    responseAction?: boolean;\n    handleRequest?: () => void;\n  }): JSX.Element => {\n    const { theme } = useApp();\n    const location = useLocation();\n    const widthScreen = useScreenWidth();\n\n    const boxHeading = (resume?: Resume) => (\n      <Box flexDirection='column' width='100%'>\n        {variant === 'response' && <ResponseTypeHeading state={state} type={type} />}\n        <ResumePartCardHeading resume={resume} variant={variant} />\n        <ResumePartCardInfo resume={resume} variant={variant} />\n      </Box>\n    );\n\n    return (\n      <Box\n        width='100%'\n        style={{\n          cursor: 'pointer',\n          position: 'relative',\n          borderRadius: '12px',\n          transition: 'all 0.2s cubic-bezier(0.2, 0, 0, 1)',\n          border:\n            widthScreen >= 1280 && resume?.id === selectedResume\n              ? `2px solid ${theme.modal.borderCardsColor}`\n              : '',\n        }}\n      >\n        <BoxCard key={resume?.id} variant={VariantCardEnum.userCard}>\n          <MediaBox variant='mobile'>\n            <Link\n              to={responseId || resume?.id || '#'}\n              style={{\n                paddingTop: variant === PageVariantEnum.response ? '62px' : '',\n              }}\n            >\n              {boxHeading(resume)}\n            </Link>\n          </MediaBox>\n          <MediaBox variant='desktop'>\n            <Link\n              to={\n                variant === 'search'\n                  ? `/search/resume${updateSearchString(location.search, resume?.id)}`\n                  : `${resume?.id || ''}?responseId=${responseId || ''}`\n              }\n              preventScrollReset\n              style={{\n                paddingTop: variant === PageVariantEnum.response ? '62px' : '',\n              }}\n            >\n              {boxHeading(resume)}\n            </Link>\n          </MediaBox>\n          <BoxControlContainer\n            id={resume?.id}\n            responseId={responseId}\n            variant={variant}\n            stateResponse={state}\n            typeResponse={type}\n            typeEntity={EntityVariantEnum.resume}\n            typeCard={SizeCardVariantEnum.part}\n            style={{ marginTop: variant === PageVariantEnum.response ? '-16px' : '' }}\n            responseAction={responseAction}\n            handleRequest={handleRequest}\n          />\n        </BoxCard>\n      </Box>\n    );\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAAA,gBAAqB;AA+Cc;AA1B5B,IAAMC,2BAAuBC,oBAClC,CAAC;EACCC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AAUF,MAAmB;AACjB,QAAM;IAAEC;EAAM,IAAIC,OAAO;AACzB,QAAMC,WAAWC,YAAY;AAC7B,QAAMC,cAAcC,eAAe;AAEnC,QAAMC,aAAaA,CAACd,YAClB,mDAAC,OAAI,eAAc,UAAS,OAAM,QAC/BI;gBAAY,cAAc,mDAAC,8BAAoB,OAAc,QAAnC;;;;WAA8C;IACzE,mDAAC,yBAAsB,QAAQJ,SAAQ,WAAvC;;;;WAAwD;IACxD,mDAAC,sBAAmB,QAAQA,SAAQ,WAApC;;;;WAAqD;OAHvD;;;;SAIA;AAGF,SACE,mDAAC,OACC,OAAM,QACN,OAAO;IACLe,QAAQ;IACRC,UAAU;IACVC,cAAc;IACdC,YAAY;IACZC,QACEP,eAAe,QAAQZ,QAAQoB,OAAOjB,iBACjC,aAAYK,MAAMa,MAAMC,qBACzB;EACR,GAEA,6DAAC,WAAyB,SAASC,gBAAgBC,UACjD;uDAAC,YAAS,SAAQ,UAChB,6DAAC,QACC,IAAInB,cAAcL,QAAQoB,MAAM,KAChC,OAAO;MACLK,YAAYrB,YAAYsB,gBAAgBC,WAAW,SAAS;IAC9D,GAECb,qBAAWd,MAAM,KANpB;;;;WAOA,KARF;;;;WASA;IACA,mDAAC,YAAS,SAAQ,WAChB,6DAAC,QACC,IACEI,YAAY,WACP,iBAAgBwB,mBAAmBlB,SAASmB,QAAQ7B,QAAQoB,EAAE,MAC9D,GAAEpB,QAAQoB,MAAM,iBAAiBf,cAAc,MAEtD,oBAAkB,MAClB,OAAO;MACLoB,YAAYrB,YAAYsB,gBAAgBC,WAAW,SAAS;IAC9D,GAECb,qBAAWd,MAAM,KAXpB;;;;WAYA,KAbF;;;;WAcA;IACA,mDAAC,uBACC,IAAIA,QAAQoB,IACZ,YACA,SACA,eAAenB,OACf,cAAcC,MACd,YAAY4B,kBAAkB9B,QAC9B,UAAU+B,oBAAoBC,MAC9B,OAAO;MAAEC,WAAW7B,YAAYsB,gBAAgBC,WAAW,UAAU;IAAG,GACxE,gBACA,iBAVF;;;;WAU+B;OApCnB3B,QAAQoB,IAAtB;;;;SAsCA,KAnDF;;;;SAoDA;AAEJ,CACF;",
  "names": ["import_react", "ResumePartCardWidget", "memo", "resume", "state", "type", "selectedResume", "variant", "responseId", "responseAction", "handleRequest", "theme", "useApp", "location", "useLocation", "widthScreen", "useScreenWidth", "boxHeading", "cursor", "position", "borderRadius", "transition", "border", "id", "modal", "borderCardsColor", "VariantCardEnum", "userCard", "paddingTop", "PageVariantEnum", "response", "updateSearchString", "search", "EntityVariantEnum", "SizeCardVariantEnum", "part", "marginTop"]
}
