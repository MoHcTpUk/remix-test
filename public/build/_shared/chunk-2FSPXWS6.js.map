{
  "version": 3,
  "sources": ["../../../app/components/entities/cardComponents/fullCard/VacancyFullCardAbout/index.tsx", "../../../app/components/entities/cardComponents/fullCard/VacancyFullCardAdditional/index.tsx", "../../../app/components/entities/cardComponents/fullCard/VacancyFullCardContacts/index.tsx", "../../../app/components/entities/cardComponents/fullCard/VacancyFullCardDate/index.tsx", "../../../app/components/entities/cardComponents/fullCard/VacancyFullCardHeading/index.tsx", "../../../app/components/entities/cardComponents/fullCard/VacancyFullCardInfo/index.tsx", "../../../app/components/entities/cardComponents/fullCard/VacancyFullCardLocation/index.tsx", "../../../app/components/entities/cardComponents/fullCard/VacancyFullCardSkills/index.tsx", "../../../app/components/entities/cardWidgets/VacancyFullCard/index.tsx"],
  "sourcesContent": ["import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\n\nexport function VacancyFullCardAbout({ vacancy }: { vacancy?: Vacancy | null }): JSX.Element {\n  const { t } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:vacancy_description')}\n      </Text>\n      <DataField data={vacancy?.vacancy_page?.description} />\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport function VacancyFullCardAdditional({ vacancy }: { vacancy?: Vacancy | null }): JSX.Element {\n  const { userContext, t } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:additionals')}\n      </Text>\n      {vacancy?.additional_skills?.driver_license_ids?.[0] && (\n        <DataField variant='custom' label={t('user:driver_license')}>\n          <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n            {vacancy?.additional_skills?.driver_license_names?.map((item) => (\n              <BoxDataChips key={item.en}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n      )}\n      {vacancy?.additional_skills?.other_licenses?.[0] && (\n        <DataField variant='custom' label={t('user:other_licenses')}>\n          <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n            {vacancy?.additional_skills?.other_licenses?.map((item) => (\n              <BoxDataChips key={item}>\n                <Text variant={TextVariantEnum.textBody2medium}>{item}</Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n      )}\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\n\nexport function VacancyFullCardContacts({ vacancy }: { vacancy?: Vacancy | null }): JSX.Element {\n  const { t } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:vacancy_contacts')}\n      </Text>\n      <DataField label={t('user:contact_phone')} data={vacancy?.contacts?.contact_phone} />\n      <DataField\n        label={t('user:first_and_last_name')}\n        data={`${vacancy?.contacts?.first_name || ''} ${vacancy?.contacts?.last_name || ''}`}\n      />\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport type { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport function VacancyFullCardDate({\n  vacancy,\n  variant,\n}: {\n  vacancy?: Vacancy | null;\n  variant?: PageVariantEnum;\n}): JSX.Element {\n  const { theme, t, userContext } = useApp();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <Box\n      flexDirection='row'\n      gap='8px'\n      padding={widthScreen > 768 && variant !== 'response' ? '16px 0 0' : '8px 0 0'}\n    >\n      <Text variant={TextVariantEnum.textBody2}>{t('user:vacancy_date')}</Text>\n      <Text variant={TextVariantEnum.textBody2medium} color={theme.accentTextColor}>\n        {getValueLang(vacancy?.created_at, userContext.language)}\n      </Text>\n    </Box>\n  );\n}\n", "import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxHeading, HeadingInformation } from '~/components/ui/Card';\nimport { BoxAvatar } from '~/components/ui/Card/BoxAvatar';\nimport { DataBox } from '~/components/ui/DataBox';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { DEFAULT_COMPANY_LOGO } from '~/utils/constants';\nimport { getImageUrl, getSalary } from '~/utils/helpers.client';\n\nexport function VacancyFullCardHeading({ vacancy }: { vacancy?: Vacancy | null }): JSX.Element {\n  const { theme, userContext } = useApp();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <>\n      <BoxHeading\n        variant={EntityVariantEnum.vacancy}\n        className='fullCard'\n        sizeVariant={SizeCardVariantEnum.full}\n      >\n        <BoxAvatar variant='search'>\n          <img\n            src={\n              vacancy?.company_logo_uri\n                ? getImageUrl(vacancy?.company_logo_uri)\n                : DEFAULT_COMPANY_LOGO\n            }\n            alt='company logo'\n          />\n        </BoxAvatar>\n\n        <HeadingInformation>\n          <Text className='title' variant={TextVariantEnum.textHeading2}>\n            {vacancy?.vacancy_page?.position}\n          </Text>\n\n          {vacancy?.contacts?.company_name && (\n            <Text variant={TextVariantEnum.textBody1medium} color={theme.user.descriptionTextColor}>\n              {vacancy?.contacts?.company_name}\n            </Text>\n          )}\n          {widthScreen >= 768 &&\n            (vacancy?.vacancy_page?.salary_fixed ||\n              (vacancy?.vacancy_page?.salary_from && vacancy?.vacancy_page?.salary_to)) && (\n              <Box>\n                {vacancy.vacancy_page?.salary_from && vacancy.vacancy_page?.salary_to ? (\n                  <Text className='price' variant={TextVariantEnum.textHeading3}>\n                    {vacancy.vacancy_page?.salary_from} - {vacancy.vacancy_page?.salary_to}\n                    &nbsp;\n                    {getSalary(\n                      vacancy?.vacancy_page?.currency_name?.en,\n                      vacancy?.vacancy_page?.salary_payout_period_name?.en,\n                      userContext.language,\n                    )}\n                  </Text>\n                ) : (\n                  <Text className='price' variant={TextVariantEnum.textHeading3}>\n                    {vacancy.vacancy_page?.salary_fixed}&nbsp;\n                    {getSalary(\n                      vacancy.vacancy_page.currency_name?.en,\n                      vacancy.vacancy_page.salary_payout_period_name?.en,\n                      userContext.language,\n                    )}\n                  </Text>\n                )}\n              </Box>\n            )}\n        </HeadingInformation>\n      </BoxHeading>\n\n      {widthScreen < 768 &&\n        (vacancy?.vacancy_page?.salary_fixed ||\n          (vacancy?.vacancy_page?.salary_from && vacancy?.vacancy_page?.salary_to)) && (\n          <DataBox variantSize={SizeCardVariantEnum.full} borderBottom={widthScreen < 768}>\n            <Box>\n              {vacancy?.vacancy_page?.salary_from && vacancy?.vacancy_page?.salary_to ? (\n                <Text className='price' variant={TextVariantEnum.textHeading3}>\n                  {vacancy?.vacancy_page?.salary_from} - {vacancy?.vacancy_page?.salary_to}\n                  &nbsp;\n                  {getSalary(\n                    vacancy?.vacancy_page?.currency_name?.en,\n                    vacancy?.vacancy_page?.salary_payout_period_name?.en,\n                    userContext.language,\n                  )}\n                </Text>\n              ) : (\n                <Text className='price' variant={TextVariantEnum.textHeading3}>\n                  {vacancy?.vacancy_page?.salary_fixed}&nbsp;\n                  {getSalary(\n                    vacancy?.vacancy_page?.currency_name?.en,\n                    vacancy?.vacancy_page?.salary_payout_period_name?.en,\n                    userContext.language,\n                  )}\n                </Text>\n              )}\n            </Box>\n          </DataBox>\n        )}\n    </>\n  );\n}\n", "import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport function VacancyFullCardInfo({ vacancy }: { vacancy?: Vacancy | null }): JSX.Element {\n  const { userContext, t } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:job_information')}\n      </Text>\n      <DataField\n        label={t('user:specialization')}\n        data={getValueLang(vacancy?.vacancy_page?.specialization_name, userContext.language)}\n      />\n      <DataField variant='custom' label={t('user:employment')}>\n        <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n          {vacancy?.vacancy_page?.employment_type_names?.map((item) => (\n            <BoxDataChips key={item.en}>\n              <Text variant={TextVariantEnum.textBody2medium}>\n                {getValueLang(item, userContext.language)}\n              </Text>\n            </BoxDataChips>\n          ))}\n        </Box>\n      </DataField>\n      <DataField variant='custom' label={t('user:work_features')}>\n        <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n          {vacancy?.vacancy_page?.work_feature_names?.map((item) => (\n            <BoxDataChips key={item.en}>\n              <Text variant={TextVariantEnum.textBody2medium}>\n                {getValueLang(item, userContext.language)}\n              </Text>\n            </BoxDataChips>\n          ))}\n        </Box>\n      </DataField>\n\n      {vacancy?.requirements?.education?.length &&\n        vacancy?.requirements?.education?.[0].education_id && (\n          <DataField variant='custom' label={t('user:education')}>\n            <Box flexDirection='column' flexWrap='wrap' gap='8px'>\n              {vacancy?.requirements?.education?.map((item) => (\n                <DataField\n                  key={item.specialization_id}\n                  data={`${getValueLang(item.specialization_name, userContext.language) || ''}\n                (${getValueLang(item.level_name, userContext.language) || ''} -\n                ${getValueLang(item.education_name, userContext.language) || ''})`}\n                />\n              ))}\n            </Box>\n          </DataField>\n        )}\n\n      {vacancy?.requirements?.work_experience?.length &&\n        vacancy?.requirements?.work_experience?.[0].work_experience_id && (\n          <DataField variant='custom' label={t('user:work_experience')}>\n            <Box flexDirection='column' flexWrap='wrap' gap='8px'>\n              {vacancy?.requirements?.work_experience?.map((item) => (\n                <DataField\n                  key={item.specialization_id}\n                  data={`${getValueLang(item.specialization_name, userContext.language) || ''}\n                  (${getValueLang(item.work_experience_name, userContext.language) || ''})\n                  ${getValueLang(item.period_of_work_name, userContext.language) || ''}`}\n                />\n              ))}\n            </Box>\n          </DataField>\n        )}\n\n      {vacancy?.requirements?.language?.length &&\n        vacancy?.requirements?.language?.[0].language_id && (\n          <DataField variant='custom' label={t('user:language')}>\n            <Box flexDirection='column' flexWrap='wrap' gap='8px'>\n              {vacancy?.requirements?.language?.map((item) => (\n                <DataField\n                  key={item.language_id}\n                  data={`${getValueLang(item.language_name, userContext.language) || ''}\n                (${getValueLang(item.level_name, userContext.language) || ''} -\n                ${getValueLang(item.language_knowledge_name, userContext.language) || ''})`}\n                />\n              ))}\n            </Box>\n          </DataField>\n        )}\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport function VacancyFullCardLocation({ vacancy }: { vacancy?: Vacancy | null }): JSX.Element {\n  const { userContext, t } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:location')}\n      </Text>\n      <Box gap='24px'>\n        {vacancy?.location?.country_id && (\n          <DataField\n            label={t('user:country')}\n            data={getValueLang(vacancy?.location?.country_name, userContext.language)}\n          />\n        )}\n        {vacancy?.location?.region_id && (\n          <DataField\n            label={t('user:province')}\n            data={getValueLang(vacancy?.location?.region_name, userContext.language)}\n          />\n        )}\n      </Box>\n      {vacancy?.location?.city_id && (\n        <DataField\n          label={t('user:district')}\n          data={getValueLang(vacancy?.location?.city_name, userContext.language)}\n        />\n      )}\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport function VacancyFullCardSkills({ vacancy }: { vacancy?: Vacancy | null }): JSX.Element {\n  const { userContext, t } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:skills')}\n      </Text>\n      <DataField variant='custom'>\n        <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n          {vacancy?.additional_skills?.skill_names?.map((item) => (\n            <BoxDataChips key={item.en}>\n              <Text variant={TextVariantEnum.textBody2medium}>\n                {getValueLang(item, userContext.language)}\n              </Text>\n            </BoxDataChips>\n          ))}\n        </Box>\n      </DataField>\n    </BoxDataFieldsInner>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { ResponseType } from 'shared/v2/responses';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { BoxControlContainer } from '~/components/entities/BoxControl';\nimport {\n  VacancyFullCardAbout,\n  VacancyFullCardAdditional,\n  VacancyFullCardContacts,\n  VacancyFullCardDate,\n  VacancyFullCardHeading,\n  VacancyFullCardInfo,\n  VacancyFullCardLocation,\n  VacancyFullCardSkills,\n} from '~/components/entities/cardComponents/fullCard';\nimport SignInForRequest from '~/components/pages/Search/SignInForRequest';\nimport { BoxDataFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport type { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { ResponseState } from '~/types/enums/responseState';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nexport function VacancyFullCardWidget({\n  vacancy,\n  dictionaries,\n  handleRequest,\n  stateResponse,\n  typeResponse,\n  variant,\n  status,\n  responseId,\n  responseAction,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  handleRequest?: () => void;\n  stateResponse?: ResponseState | string;\n  typeResponse?: ResponseType;\n  variant?: PageVariantEnum;\n  status?: JSX.Element;\n  responseId?: string;\n  responseAction?: boolean;\n}): JSX.Element {\n  const { userContext } = useApp();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <BoxCard nameCard={VacancyCardEnum.vacancy}>\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <VacancyFullCardHeading vacancy={vacancy} />\n\n        <BoxDataFields variant={EntityVariantEnum.vacancy}>\n          <Box flexDirection='column'>\n            {status && (\n              <Box padding='16px 0 0' width='fit-content'>\n                {status}\n              </Box>\n            )}\n            <VacancyFullCardDate vacancy={vacancy} variant={variant} />\n          </Box>\n\n          {vacancy?.location?.country_id &&\n            vacancy?.location?.region_id &&\n            vacancy?.location?.city_id && <VacancyFullCardLocation vacancy={vacancy} />}\n\n          <VacancyFullCardContacts vacancy={vacancy} />\n          <VacancyFullCardInfo vacancy={vacancy} />\n\n          {vacancy?.additional_skills?.skill_ids &&\n            vacancy?.additional_skills?.skill_ids?.length > 0 && (\n              <VacancyFullCardSkills vacancy={vacancy} />\n            )}\n\n          {(vacancy?.additional_skills?.driver_license_ids?.[0] ||\n            vacancy?.additional_skills?.other_licenses?.[0]) && (\n            <VacancyFullCardAdditional vacancy={vacancy} />\n          )}\n\n          {vacancy?.vacancy_page?.description && <VacancyFullCardAbout vacancy={vacancy} />}\n        </BoxDataFields>\n\n        <BoxControlContainer\n          variant={variant}\n          typeEntity={EntityVariantEnum.vacancy}\n          id={vacancy?.id}\n          responseId={responseId}\n          typeCard={SizeCardVariantEnum.full}\n          handleRequest={handleRequest}\n          stateResponse={stateResponse}\n          typeResponse={typeResponse}\n          responseAction={responseAction}\n        />\n\n        {!userContext?.user?.isAuthenticated && widthScreen >= 1280 && (\n          <SignInForRequest variant='vacancy' />\n        )}\n      </CardContainer>\n    </BoxCard>\n  );\n}\n"],
  "mappings": "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",
  "names": ["VacancyFullCardAbout", "vacancy", "t", "useApp", "TextVariantEnum", "textHeading2", "vacancy_page", "description", "import_jsx_dev_runtime", "VacancyFullCardAdditional", "vacancy", "userContext", "t", "useApp", "TextVariantEnum", "textHeading2", "additional_skills", "driver_license_ids", "driver_license_names", "map", "item", "textBody2medium", "getValueLang", "language", "en", "other_licenses", "import_jsx_dev_runtime", "VacancyFullCardContacts", "vacancy", "t", "useApp", "TextVariantEnum", "textHeading2", "contacts", "contact_phone", "first_name", "last_name", "import_jsx_dev_runtime", "VacancyFullCardDate", "vacancy", "variant", "theme", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "TextVariantEnum", "textBody2", "textBody2medium", "accentTextColor", "getValueLang", "created_at", "language", "import_jsx_dev_runtime", "VacancyFullCardHeading", "vacancy", "theme", "userContext", "useApp", "widthScreen", "useScreenWidth", "EntityVariantEnum", "SizeCardVariantEnum", "full", "company_logo_uri", "getImageUrl", "DEFAULT_COMPANY_LOGO", "TextVariantEnum", "textHeading2", "vacancy_page", "position", "contacts", "company_name", "textBody1medium", "user", "descriptionTextColor", "salary_fixed", "salary_from", "salary_to", "textHeading3", "getSalary", "currency_name", "en", "salary_payout_period_name", "language", "import_jsx_dev_runtime", "VacancyFullCardInfo", "vacancy", "userContext", "t", "useApp", "TextVariantEnum", "textHeading2", "getValueLang", "vacancy_page", "specialization_name", "language", "employment_type_names", "map", "item", "textBody2medium", "en", "work_feature_names", "requirements", "education", "length", "education_id", "level_name", "education_name", "specialization_id", "work_experience", "work_experience_id", "work_experience_name", "period_of_work_name", "language_id", "language_name", "language_knowledge_name", "import_jsx_dev_runtime", "VacancyFullCardLocation", "vacancy", "userContext", "t", "useApp", "TextVariantEnum", "textHeading2", "location", "country_id", "getValueLang", "country_name", "language", "region_id", "region_name", "city_id", "city_name", "import_jsx_dev_runtime", "VacancyFullCardSkills", "vacancy", "userContext", "t", "useApp", "TextVariantEnum", "textHeading2", "additional_skills", "skill_names", "map", "item", "textBody2medium", "getValueLang", "language", "en", "import_jsx_dev_runtime", "VacancyFullCardWidget", "vacancy", "dictionaries", "handleRequest", "stateResponse", "typeResponse", "variant", "status", "responseId", "responseAction", "userContext", "useApp", "widthScreen", "useScreenWidth", "VacancyCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "EntityVariantEnum", "location", "country_id", "region_id", "city_id", "additional_skills", "skill_ids", "length", "driver_license_ids", "other_licenses", "vacancy_page", "description", "id", "SizeCardVariantEnum", "full", "user", "isAuthenticated"]
}
