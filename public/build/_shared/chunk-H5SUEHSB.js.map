{
  "version": 3,
  "sources": ["../../../app/components/common/Heading/index.tsx", "../../../app/components/common/Heading/components/HeadingForArticles/index.tsx", "../../../app/components/common/Heading/styles.ts", "../../../app/components/common/Heading/components/HeadingForCompany/index.tsx", "../../../app/components/common/Heading/components/HeadingForFaq/index.tsx", "../../../app/components/common/Heading/components/HeadingForMyProfile/index.tsx", "../../../app/components/common/Heading/components/HeadingForNews/index.tsx", "../../../app/components/common/Heading/components/HeadingForResponses/index.tsx", "../../../app/components/common/Heading/components/HeadingForResume/index.tsx", "../../../app/components/common/Heading/components/HeadingForSearchCompany/styles.ts", "../../../app/components/common/Heading/components/HeadingForSearchCompany/index.tsx", "../../../app/components/common/Heading/components/HeadingForVacancy/index.tsx"],
  "sourcesContent": ["import { useMatches, useSearchParams } from '@remix-run/react';\nimport { useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport ModalSelectCreateForm from '~/components/entities/ModalSelectCreateForm';\nimport { useRouteChecks, useScreenWidth } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { useMatchesData } from '~/utils/helpers.client';\n\nimport {\n  HeadingForArticles,\n  HeadingForCompany,\n  HeadingForFaq,\n  HeadingForMyProfile,\n  HeadingForNews,\n  HeadingForResponses,\n  HeadingForResume,\n  HeadingForSearchCompany,\n  HeadingForVacancy,\n} from './components';\nimport { BoxHeading } from './styles';\n\nexport function Heading(): JSX.Element {\n  const matchesFromCompnyVacancies = useMatchesData('routes/search/company.$id.vacancy');\n\n  const matches = useMatches();\n\n  const resumes = matches[2]?.data.resumes?.data as Resume[];\n  const vacancies = matches[2]?.data.vacancies?.data as Vacancy[];\n  const companies = matches[2]?.data.companies?.data as Company[];\n\n  const company: Company = matchesFromCompnyVacancies?.company;\n  const dictionaries: IDictionaries = matchesFromCompnyVacancies?.dictionaries;\n\n  const [searchParams] = useSearchParams();\n  const step = Number(searchParams.get('step') ?? '1');\n\n  const {\n    isUserProfile,\n    isUserResume,\n    isUserVacancy,\n    isUserCompany,\n    isUserResponses,\n    isSearchResume,\n    isSearchVacancy,\n    isSearchCompany,\n    isSearchCompanyVacancies,\n    isMaterialsArticles,\n    isMaterialsNews,\n    isFaq,\n    isId,\n  } = useRouteChecks();\n\n  const [visibleSelectionCreate, setSelectionCreate] = useState(false);\n  const [variantCreate, setVariantCreate] = useState<'vacancy' | 'resume'>('resume');\n  const widthScreen = useScreenWidth();\n\n  return (\n    <>\n      {isSearchCompanyVacancies && widthScreen >= 1280 ? (\n        <HeadingForSearchCompany company={company} dictionaries={dictionaries} />\n      ) : (\n        <BoxHeading style={{ maxWidth: isSearchCompanyVacancies ? '920px' : 'auto' }}>\n          {isUserProfile && (\n            <HeadingForMyProfile\n              isId={isId}\n              variantCreate={variantCreate}\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          )}\n          {isUserResume && (\n            <HeadingForResume\n              isId={isId}\n              variantCreate={variantCreate}\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n              resumes={resumes}\n              step={step}\n            />\n          )}\n          {isUserVacancy && (\n            <HeadingForVacancy\n              isId={isId}\n              variantCreate={variantCreate}\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n              vacancies={vacancies}\n              step={step}\n            />\n          )}\n          {isUserCompany && <HeadingForCompany isId={isId} companies={companies} />}\n          {isUserResponses && <HeadingForResponses />}\n\n          {isSearchResume && (\n            <HeadingForResume\n              title='Find employee'\n              isId={isId}\n              variantCreate={variantCreate}\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          )}\n          {isSearchVacancy && (\n            <HeadingForVacancy\n              title='Find Job'\n              isId={isId}\n              variantCreate={variantCreate}\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          )}\n          {isSearchCompany && <HeadingForCompany title='Companies' isId={isId} />}\n\n          {isMaterialsArticles && <HeadingForArticles isId={isId} variant='materials' />}\n          {isMaterialsNews && <HeadingForNews isId={isId} variant='materials' />}\n          {isFaq && <HeadingForFaq variant='materials' />}\n        </BoxHeading>\n      )}\n\n      <ModalSelectCreateForm\n        visibility={visibleSelectionCreate}\n        setVisibility={setSelectionCreate}\n        variant={variantCreate}\n      />\n    </>\n  );\n}\n", "import { memo } from 'react';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\n\nimport { BoxTitle, ContainerBox } from '../../styles';\n\nexport const HeadingForArticles = memo(\n  ({ isId, title, variant }: { isId: boolean; title?: string; variant?: string }): JSX.Element => {\n    const { theme, t } = useApp();\n\n    return (\n      <ContainerBox variant='materials'>\n        <BoxTitle>\n          <Text\n            className='title'\n            variant={TextVariantEnum.textHeading1}\n            color={theme.user.headingTextColor}\n          >\n            {title || t('home:articles')}\n          </Text>\n        </BoxTitle>\n      </ContainerBox>\n    );\n  },\n);\n", "import { styled } from 'styled-components';\n\nimport {\n  FONT_SIZES_DESC,\n  FONT_SIZES_MOB,\n  LINE_HEIGHTS_DESC,\n  LINE_HEIGHTS_MOB,\n} from '~/components/common/Text';\n\nexport const BoxHeading = styled.div`\n  background: url('/images/homePage/noiseSectionTop.png') repeat,\n    url('/images/user/backgroundHeading.png');\n  background-size: cover;\n  background-position: bottom center;\n  width: 100%;\n  padding: 16px;\n  border-radius: 8px;\n  box-shadow: ${({ theme }) => theme.\u0441ards.shadow};\n  & .title {\n    font-size: ${FONT_SIZES_MOB.textHeading2};\n    line-height: ${LINE_HEIGHTS_MOB.textHeading2};\n  }\n\n  @media (min-width: 768px) {\n    background: url('/images/homePage/noiseSectionTop.png') repeat,\n      url('/images/user/backgroundTabletHeading.png') no-repeat;\n    background-size: cover;\n    background-position: bottom center;\n    padding: 16px 24px 24px;\n    gap: 24px;\n    & .title {\n      font-size: ${FONT_SIZES_DESC.textHeading3};\n      line-height: ${LINE_HEIGHTS_DESC.textHeading3};\n    }\n  }\n\n  @media (min-width: 1024px) {\n    border-radius: 12px;\n  }\n\n  @media (min-width: 1280px) {\n    background: url('/images/homePage/noiseSectionTop.png') repeat,\n      url('/images/user/backgroundDesktopHeading.png') no-repeat;\n    background-size: cover;\n    background-position: bottom center;\n    padding: 24px;\n  }\n`;\n\nexport const ButtonsControl = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 16px;\n  @media (min-width: 768px) {\n    gap: 24px;\n  }\n  @media (min-width: 1280px) {\n    .goBackButton {\n      display: none;\n    }\n  }\n  &:empty {\n    display: none;\n  }\n`;\n\nexport const MobileBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  @media (min-width: 768px) {\n    gap: 24px;\n  }\n\n  @media (min-width: 1280px) {\n    display: none;\n  }\n`;\n\nexport const ContainerBox = styled.div<{ variant?: string }>`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  @media (min-width: 768px) {\n    gap: 24px;\n    padding-top: 8px;\n  }\n\n  @media (min-width: 1280px) {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    padding-top: 0;\n  }\n`;\n\nexport const DesktopProfile = styled.div`\n  display: none;\n  @media (min-width: 1280px) {\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-content: space-between;\n  }\n`;\n\nexport const LeftBoxProfile = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 24px;\n`;\n\nexport const AvatarBox = styled.div`\n  width: 124px;\n  height: 124px;\n  border-radius: 50%;\n  border: 2px solid ${({ theme }) => theme.user.borderAvatar};\n\n  img {\n    height: 100%;\n    width: 100%;\n    border-radius: 50%;\n    object-fit: cover;\n  }\n`;\n\nexport const InformationBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: space-between;\n`;\n\nexport const BoxTitle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 24px;\n\n  button {\n    display: none;\n  }\n\n  @media (min-width: 1280px) {\n    button {\n      display: flex;\n    }\n  }\n`;\n", "import { Link, useLocation, useNavigate } from '@remix-run/react';\nimport { memo } from 'react';\nimport routes from 'shared/routing/routes';\nimport type { Company } from 'shared/v2/companies';\n\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp, useRouteChecks } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\n\nimport { BoxTitle, ButtonsControl, ContainerBox } from '../../styles';\n\nexport const HeadingForCompany = memo(\n  ({\n    isId,\n    title,\n    companies,\n  }: {\n    isId: boolean;\n    title?: string;\n    companies?: Company[] | null;\n  }): JSX.Element => {\n    const { theme, t, userContext } = useApp();\n    const loc = useLocation();\n\n    const navigate = useNavigate();\n    const goBack = () => navigate(-1);\n    const { isSearchCompany } = useRouteChecks();\n\n    return (\n      <ContainerBox>\n        <BoxTitle>\n          {isId && !isSearchCompany && (\n            <Button onClick={goBack} priority='secondary' onlyIcon>\n              <Icon name={IconEnum.arrowLeft} />\n            </Button>\n          )}\n          <Text\n            className='title'\n            variant={TextVariantEnum.textHeading1}\n            color={theme.user.headingTextColor}\n          >\n            {title || t('user:companies')}\n          </Text>\n        </BoxTitle>\n        <ButtonsControl>\n          {isId && (\n            <>\n              {!isSearchCompany && (\n                <Button className='goBackButton' onClick={goBack} priority='secondary' onlyIcon>\n                  <Icon name={IconEnum.arrowLeft} />\n                </Button>\n              )}\n              <Link to={routes.user.vacancy.create}>\n                <Button priority='primary'>\n                  <Text variant={TextVariantEnum.textBody2}>{t('user:create_vacancy')}</Text>\n                </Button>\n              </Link>\n            </>\n          )}\n          {!isId && companies?.[0] && (\n            <Link\n              to={\n                userContext.user.isAuthenticated\n                  ? routes.user.company.create\n                  : `${loc.pathname}${loc.search ? `${loc.search}&login=true` : '?login=true'}`\n              }\n            >\n              <Button priority='primary'>\n                <Text variant={TextVariantEnum.textBody2}>{t('user:create_company')}</Text>\n              </Button>\n            </Link>\n          )}\n        </ButtonsControl>\n      </ContainerBox>\n    );\n  },\n);\n", "import { memo } from 'react';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\n\nimport { BoxTitle, ContainerBox } from '../../styles';\n\nexport const HeadingForFaq = memo(\n  ({ title, variant }: { title?: string; variant?: string }): JSX.Element => {\n    const { theme, t } = useApp();\n\n    return (\n      <ContainerBox variant='materials'>\n        <BoxTitle>\n          <Text\n            className='title'\n            variant={TextVariantEnum.textHeading1}\n            color={theme.user.headingTextColor}\n          >\n            {title || t('common:menu.faq')}\n          </Text>\n        </BoxTitle>\n      </ContainerBox>\n    );\n  },\n);\n", "import { styled } from 'styled-components';\n\nimport { Box } from '~/components/common/Box';\nimport { Icon } from '~/components/common/Icon';\nimport ProgressBar from '~/components/common/ProgressBar';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ButtonCreate from '~/components/entities/ButtonCreate';\nimport { useApp } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { DEFAULT_USER_AVATAR } from '~/utils/constants';\nimport { getImageUrl } from '~/utils/helpers.client';\n\nimport {\n  ButtonsControl,\n  DesktopProfile,\n  InformationBox,\n  LeftBoxProfile,\n  MobileBox,\n} from '../../styles';\n\nexport const AvatarBox = styled.div`\n  width: 124px;\n  height: 124px;\n  border-radius: 50%;\n  border: 2px solid ${({ theme }) => theme.user.borderAvatar};\n\n  img {\n    height: 100%;\n    width: 100%;\n    border-radius: 50%;\n    object-fit: cover;\n  }\n`;\n\nexport function HeadingForMyProfile({\n  isId,\n  variantCreate,\n  setVariantCreate,\n  setSelectionCreate,\n}: {\n  isId: boolean;\n  variantCreate: 'vacancy' | 'resume';\n  setVariantCreate: (value: 'vacancy' | 'resume') => void;\n  setSelectionCreate: (value: boolean) => void;\n}) {\n  const { theme, t, userContext } = useApp();\n\n  return (\n    <Box width='100%'>\n      <MobileBox>\n        <Text\n          className='title'\n          variant={TextVariantEnum.textHeading3}\n          color={theme.user.headingTextColor}\n        >\n          {t('user:my_profile')}\n        </Text>\n        <ButtonsControl>\n          <ButtonCreate\n            variant='resume'\n            setVariantCreate={setVariantCreate}\n            setSelectionCreate={setSelectionCreate}\n          />\n\n          <ButtonCreate\n            variant='vacancy'\n            priority='primary'\n            setVariantCreate={setVariantCreate}\n            setSelectionCreate={setSelectionCreate}\n          />\n        </ButtonsControl>\n      </MobileBox>\n      <DesktopProfile>\n        <LeftBoxProfile>\n          <AvatarBox>\n            <img\n              style={{}}\n              src={\n                userContext.user.avatar ? getImageUrl(userContext.user.avatar) : DEFAULT_USER_AVATAR\n              }\n              alt='avatar'\n            />\n          </AvatarBox>\n          <InformationBox>\n            <Text variant={TextVariantEnum.textHeading3} color={theme.user.headingTextColor}>\n              {`${userContext.user.firstName || ''} ${userContext.user.lastName || ''}`}\n            </Text>\n            <Box flexDirection='row' gap='4px' alignItems='center'>\n              <Icon\n                name={userContext.user.isEmailConfirm ? IconEnum.verifed : IconEnum.notVerifed}\n              />\n              <Text variant={TextVariantEnum.textBody2medium} color={theme.user.headingTextColor}>\n                {userContext.user.email}\n              </Text>\n            </Box>\n\n            <Box flexDirection='column' width='210px' gap='4px'>\n              <Box flexDirection='row' width='100%' justifyContent='space-between'>\n                <Text variant={TextVariantEnum.textBody2medium} color={theme.user.headingTextColor}>\n                  {t('user:profile_completeness')}\n                </Text>\n                <Text\n                  variant={TextVariantEnum.textBody2medium}\n                  color={theme.user.headingTextColor}\n                >{`${userContext.user.progressInfo || ''}%`}</Text>\n              </Box>\n              <ProgressBar percent={userContext.user.progressInfo} />\n            </Box>\n          </InformationBox>\n        </LeftBoxProfile>\n        <Box flexDirection='column' justifyContent='space-between' alignItems='flex-end'>\n          <Text\n            className='title'\n            variant={TextVariantEnum.textHeading3}\n            color={theme.user.headingTextColor}\n          >\n            {t('user:my_profile')}\n          </Text>\n          <ButtonsControl>\n            <ButtonCreate\n              variant='resume'\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n\n            <ButtonCreate\n              variant='vacancy'\n              priority='primary'\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          </ButtonsControl>\n        </Box>\n      </DesktopProfile>\n    </Box>\n  );\n}\n", "import { memo } from 'react';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\n\nimport { BoxTitle, ContainerBox } from '../../styles';\n\nexport const HeadingForNews = memo(\n  ({ isId, title, variant }: { isId: boolean; title?: string; variant?: string }): JSX.Element => {\n    const { theme, t } = useApp();\n\n    return (\n      <ContainerBox variant='materials'>\n        <BoxTitle>\n          <Text\n            className='title'\n            variant={TextVariantEnum.textHeading1}\n            color={theme.user.headingTextColor}\n          >\n            {title || t('home:news')}\n          </Text>\n        </BoxTitle>\n      </ContainerBox>\n    );\n  },\n);\n", "import { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\n\nimport { BoxTitle, ContainerBox } from '../../styles';\n\nexport function HeadingForResponses({\n  title,\n  variant,\n}: {\n  title?: string;\n  variant?: string;\n}): JSX.Element {\n  const { theme, t } = useApp();\n\n  return (\n    <ContainerBox>\n      <BoxTitle>\n        <Text\n          className='title'\n          variant={TextVariantEnum.textHeading1}\n          color={theme.user.headingTextColor}\n        >\n          {title || t('user:responses')}\n        </Text>\n      </BoxTitle>\n    </ContainerBox>\n  );\n}\n", "import { Link, useMatches, useNavigate } from '@remix-run/react';\nimport { memo } from 'react';\nimport routes from 'shared/routing/routes';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ButtonCreate from '~/components/entities/ButtonCreate';\nimport { useApp, useRouteChecks } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\n\nimport { BoxTitle, ButtonsControl, ContainerBox } from '../../styles';\n\nexport const HeadingForResume = memo(\n  ({\n    isId,\n    title,\n    variantCreate,\n    setVariantCreate,\n    setSelectionCreate,\n    resumes,\n    step,\n  }: {\n    isId: boolean;\n    title?: string;\n    variantCreate?: 'vacancy' | 'resume';\n    setVariantCreate?: (value: 'vacancy' | 'resume') => void;\n    setSelectionCreate?: (value: boolean) => void;\n    resumes?: Resume[] | null;\n    step?: number;\n  }): JSX.Element => {\n    const { theme, t } = useApp();\n\n    const navigate = useNavigate();\n    const goBack = () => navigate(-1);\n\n    const matches = useMatches();\n    const isCreate = matches.some((m) => m.id.includes('.create'));\n    const { isSearchResume } = useRouteChecks();\n\n    return (\n      <ContainerBox>\n        <BoxTitle>\n          {isId && !isSearchResume && (\n            <Button onClick={goBack} priority='secondary' onlyIcon>\n              <Icon name={IconEnum.arrowLeft} />\n            </Button>\n          )}\n          <Text\n            className='title'\n            variant={TextVariantEnum.textHeading1}\n            color={theme.user.headingTextColor}\n          >\n            {title || t('user:my_resumes')}\n          </Text>\n        </BoxTitle>\n        <ButtonsControl>\n          {isId && !isSearchResume && (\n            <Button className='goBackButton' onClick={goBack} priority='secondary' onlyIcon>\n              <Icon name={IconEnum.arrowLeft} />\n            </Button>\n          )}\n\n          {isCreate && step && step !== 1 && (\n            <Link to={routes.user.resume.root}>\n              <Button priority='secondary'>\n                <Text variant={TextVariantEnum.textBody2}>{t('user:complete_later')}</Text>\n              </Button>\n            </Link>\n          )}\n          {!isCreate && resumes?.[0] && (\n            <ButtonCreate\n              variant='resume'\n              priority='primary'\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          )}\n          {isSearchResume && (\n            <ButtonCreate\n              variant='resume'\n              priority='primary'\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          )}\n        </ButtonsControl>\n      </ContainerBox>\n    );\n  },\n);\n", "import { styled } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  padding: 24px;\n  background-color: ${({ theme }) => theme.search.backgroundWrapper};\n  border-radius: 12px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n\nexport const AvatarBox = styled.div`\n  width: 264px;\n  height: 264px;\n  border-radius: 8px;\n\n  img {\n    height: 100%;\n    width: 100%;\n    object-fit: cover;\n    border-radius: 8px;\n  }\n`;\n\nexport const InformationBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 24px;\n  justify-content: space-between;\n`;\n\nexport const TitlesBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  gap: 8px;\n`;\n\nexport const BoxInfo = styled.div`\n  width: 240px;\n  height: 120px;\n  padding: 16px;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.user.borderColor};\n  background-color: ${({ theme }) => theme.buttons.chips.backgroundColor};\n`;\n\nexport const DescriptionBox = styled.div`\n  gap: 8px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const DescriptionInfoBox = styled.div`\n  border-radius: 8px;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.user.borderColor};\n  padding: 16px;\n`;\n", "import type { Company } from 'shared/v2/companies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxDataChips } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { DEFAULT_COMPANY_LOGO } from '~/utils/constants';\nimport { getImageUrl, getValueLang } from '~/utils/helpers.client';\n\nimport {\n  AvatarBox,\n  BoxInfo,\n  DescriptionBox,\n  DescriptionInfoBox,\n  InformationBox,\n  TitlesBox,\n  Wrapper,\n} from './styles';\n\nexport function HeadingForSearchCompany({\n  company,\n  dictionaries,\n}: {\n  company: Company;\n  dictionaries?: IDictionaries;\n}): JSX.Element {\n  const { theme, t, userContext } = useApp();\n\n  return (\n    <Wrapper>\n      <InformationBox>\n        <Box gap='24px' flexDirection='row'>\n          <AvatarBox>\n            <img\n              src={company?.logo_uri ? getImageUrl(company?.logo_uri) : DEFAULT_COMPANY_LOGO}\n              alt=''\n            />\n          </AvatarBox>\n          <TitlesBox>\n            <Text variant={TextVariantEnum.textHeading3}>{company.name}</Text>\n\n            <Text variant={TextVariantEnum.textBody1medium}>{company.name}</Text>\n\n            <Text variant={TextVariantEnum.textBody1medium} color={theme.accentTextColor}>\n              {company.website}\n            </Text>\n          </TitlesBox>\n        </Box>\n        <Box\n          display='grid'\n          style={{ gridTemplateRows: 'repeat(2, 1fr)', gridTemplateColumns: 'repeat(2, 1fr)' }}\n          gap='24px'\n          justifyContent='center'\n        >\n          <BoxInfo>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:opened_vacancies')}</Text>\n            <Box>\n              <BoxDataChips>\n                <Text variant={TextVariantEnum.textBody2medium}>{company.number_of_vacancies}</Text>\n              </BoxDataChips>\n            </Box>\n          </BoxInfo>\n          <BoxInfo>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:number_of_employees')}</Text>\n            <Text variant={TextVariantEnum.textBody2medium}>\n              {getValueLang(company?.number_of_employees_name, userContext.language)}\n            </Text>\n          </BoxInfo>\n          <BoxInfo>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:district')}</Text>\n            <Text variant={TextVariantEnum.textBody2medium}>\n              {getValueLang(company?.city_name, userContext.language)}\n            </Text>\n          </BoxInfo>\n          <BoxInfo>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:city')}</Text>\n            <Text variant={TextVariantEnum.textBody2medium}>\n              {getValueLang(company?.city_name, userContext.language)}\n            </Text>\n          </BoxInfo>\n        </Box>\n      </InformationBox>\n      <DescriptionBox>\n        <Text variant={TextVariantEnum.textHeading3}>{t('user:about_company')}</Text>\n        <DescriptionInfoBox>\n          <Text variant={TextVariantEnum.textBody2medium}>{company.description}</Text>\n        </DescriptionInfoBox>\n      </DescriptionBox>\n    </Wrapper>\n  );\n}\n", "import { Link, useMatches, useNavigate } from '@remix-run/react';\nimport { memo } from 'react';\nimport routes from 'shared/routing/routes';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ButtonCreate from '~/components/entities/ButtonCreate';\nimport { useApp, useRouteChecks } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\n\nimport { BoxTitle, ButtonsControl, ContainerBox } from '../../styles';\n\nexport const HeadingForVacancy = memo(\n  ({\n    isId,\n    title,\n    variantCreate,\n    setVariantCreate,\n    setSelectionCreate,\n    vacancies,\n    step,\n  }: {\n    isId: boolean;\n    title?: string;\n    variantCreate?: 'vacancy' | 'resume';\n    setVariantCreate?: (value: 'vacancy' | 'resume') => void;\n    setSelectionCreate?: (value: boolean) => void;\n    vacancies?: Vacancy[] | null;\n    step?: number;\n  }): JSX.Element => {\n    const { theme, t } = useApp();\n\n    const navigate = useNavigate();\n    const goBack = () => navigate(-1);\n\n    const matches = useMatches();\n    const isCreate = matches.some((m) => m.id.includes('.create'));\n    const { isSearchVacancy } = useRouteChecks();\n\n    return (\n      <ContainerBox>\n        <BoxTitle>\n          {isId && !isSearchVacancy && (\n            <Button onClick={goBack} priority='secondary' onlyIcon>\n              <Icon name={IconEnum.arrowLeft} />\n            </Button>\n          )}\n          <Text\n            className='title'\n            variant={TextVariantEnum.textHeading1}\n            color={theme.user.headingTextColor}\n          >\n            {title || t('user:my_vacancies')}\n          </Text>\n        </BoxTitle>\n        <ButtonsControl>\n          {isId && !isSearchVacancy && (\n            <Button className='goBackButton' onClick={goBack} priority='secondary' onlyIcon>\n              <Icon name={IconEnum.arrowLeft} />\n            </Button>\n          )}\n          {isCreate && step && step !== 1 && (\n            <Link to={routes.user.vacancy.root}>\n              <Button priority='secondary'>\n                <Text variant={TextVariantEnum.textBody2}>{t('user:complete_later')}</Text>\n              </Button>\n            </Link>\n          )}\n          {!isCreate && vacancies?.[0] && (\n            <ButtonCreate\n              variant='vacancy'\n              priority='primary'\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          )}\n          {isSearchVacancy && (\n            <ButtonCreate\n              variant='vacancy'\n              priority='primary'\n              setVariantCreate={setVariantCreate}\n              setSelectionCreate={setSelectionCreate}\n            />\n          )}\n        </ButtonsControl>\n      </ContainerBox>\n    );\n  },\n);\n"],
  "mappings": "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",
  "names": ["import_react", "HeadingForArticles", "memo", "isId", "title", "variant", "theme", "t", "useApp", "TextVariantEnum", "textHeading1", "user", "headingTextColor", "import_react", "import_jsx_dev_runtime", "HeadingForCompany", "memo", "isId", "title", "companies", "theme", "t", "userContext", "useApp", "loc", "useLocation", "navigate", "useNavigate", "goBack", "isSearchCompany", "useRouteChecks", "IconEnum", "arrowLeft", "TextVariantEnum", "textHeading1", "user", "headingTextColor", "routes", "vacancy", "create", "textBody2", "isAuthenticated", "company", "pathname", "search", "import_react", "import_jsx_dev_runtime", "HeadingForFaq", "memo", "title", "variant", "theme", "t", "useApp", "TextVariantEnum", "textHeading1", "user", "headingTextColor", "import_jsx_dev_runtime", "AvatarBox", "styled", "div", "withConfig", "displayName", "componentId", "theme", "user", "borderAvatar", "HeadingForMyProfile", "isId", "variantCreate", "setVariantCreate", "setSelectionCreate", "t", "userContext", "useApp", "TextVariantEnum", "textHeading3", "headingTextColor", "avatar", "getImageUrl", "DEFAULT_USER_AVATAR", "firstName", "lastName", "isEmailConfirm", "IconEnum", "verifed", "notVerifed", "textBody2medium", "email", "progressInfo", "import_react", "import_jsx_dev_runtime", "HeadingForNews", "memo", "isId", "title", "variant", "theme", "t", "useApp", "TextVariantEnum", "textHeading1", "user", "headingTextColor", "import_jsx_dev_runtime", "HeadingForResponses", "title", "variant", "theme", "t", "useApp", "TextVariantEnum", "textHeading1", "user", "headingTextColor", "import_react", "import_jsx_dev_runtime", "HeadingForResume", "memo", "isId", "title", "variantCreate", "setVariantCreate", "setSelectionCreate", "resumes", "step", "theme", "t", "useApp", "navigate", "useNavigate", "goBack", "matches", "useMatches", "isCreate", "some", "m", "id", "includes", "isSearchResume", "useRouteChecks", "IconEnum", "arrowLeft", "TextVariantEnum", "textHeading1", "user", "headingTextColor", "routes", "resume", "root", "textBody2", "AvatarBox", "InformationBox", "import_jsx_dev_runtime", "HeadingForSearchCompany", "company", "dictionaries", "theme", "t", "userContext", "useApp", "InformationBox", "AvatarBox", "logo_uri", "getImageUrl", "DEFAULT_COMPANY_LOGO", "TextVariantEnum", "textHeading3", "name", "textBody1medium", "accentTextColor", "website", "gridTemplateRows", "gridTemplateColumns", "textBody2", "textBody2medium", "number_of_vacancies", "getValueLang", "number_of_employees_name", "language", "city_name", "description", "import_react", "import_jsx_dev_runtime", "HeadingForVacancy", "memo", "isId", "title", "variantCreate", "setVariantCreate", "setSelectionCreate", "vacancies", "step", "theme", "t", "useApp", "navigate", "useNavigate", "goBack", "matches", "useMatches", "isCreate", "some", "m", "id", "includes", "isSearchVacancy", "useRouteChecks", "IconEnum", "arrowLeft", "TextVariantEnum", "textHeading1", "user", "headingTextColor", "routes", "vacancy", "root", "textBody2", "import_jsx_dev_runtime", "Heading", "matchesFromCompnyVacancies", "useMatchesData", "matches", "useMatches", "resumes", "data", "vacancies", "companies", "company", "dictionaries", "searchParams", "useSearchParams", "step", "Number", "get", "isUserProfile", "isUserResume", "isUserVacancy", "isUserCompany", "isUserResponses", "isSearchResume", "isSearchVacancy", "isSearchCompany", "isSearchCompanyVacancies", "isMaterialsArticles", "isMaterialsNews", "isFaq", "isId", "useRouteChecks", "visibleSelectionCreate", "setSelectionCreate", "useState", "variantCreate", "setVariantCreate", "widthScreen", "useScreenWidth", "maxWidth"]
}
