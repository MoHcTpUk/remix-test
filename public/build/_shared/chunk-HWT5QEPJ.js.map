{
  "version": 3,
  "sources": ["../../../app/components/common/Checkbox/index.tsx", "../../../app/components/common/Checkbox/styles.ts"],
  "sourcesContent": ["import type { ChangeEvent } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useApp } from '~/hooks';\n\nimport { Box } from '../Box';\nimport SvgStroke from '../Icons/Stroke';\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport { BoxErrors, CheckboxBtn, CheckboxBtnWrapper, Checkmark, ContainerCheckbox } from './styles';\n\ninterface CheckboxProps {\n  checked?: boolean;\n  label?: string;\n  disabled?: boolean;\n  id?: string;\n  name?: string;\n  errorText?: string;\n  onChange?: (checked: boolean) => void;\n  value?: string;\n  style?: React.CSSProperties;\n}\n\nexport function CheckBox({\n  checked,\n  label,\n  disabled,\n  id,\n  name,\n  errorText,\n  onChange,\n  value,\n  style,\n}: CheckboxProps): JSX.Element {\n  const { theme } = useApp();\n  const checkboxRef = useRef<HTMLInputElement>(null);\n  const [checkedState, setCheckedState] = useState(checked);\n\n  useEffect(() => {\n    setCheckedState(checked);\n  }, [checked]);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const isChecked = e.target.checked;\n    setCheckedState(isChecked);\n\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  return (\n    <Box style={style} width='100%' flexDirection='column'>\n      <CheckboxBtnWrapper>\n        <ContainerCheckbox disabled={disabled}>\n          <CheckboxBtn\n            value={\n              value === 'true' || value === 'false' ? checkedState?.toString() : value || 'false'\n            }\n            disabled={disabled}\n            type='checkbox'\n            id={id}\n            name={name}\n            ref={checkboxRef}\n            checked={checkedState} // Используем checkedState вместо checked\n            onChange={handleChange}\n          />\n          <Checkmark disabled={disabled}>\n            <SvgStroke />\n          </Checkmark>\n        </ContainerCheckbox>\n        <Text variant={TextVariantEnum.textBody2medium}>{label}</Text>\n      </CheckboxBtnWrapper>\n      {Boolean(errorText) && (\n        <BoxErrors isText={Boolean(errorText)}>\n          <Text variant={TextVariantEnum.textSmall} color={theme.errorTextColor}>\n            {errorText}\n          </Text>\n        </BoxErrors>\n      )}\n    </Box>\n  );\n}\n", "import { styled } from 'styled-components';\n\nimport { TextVariantEnum } from '../Text/enums';\n\nexport const CheckboxBtnWrapper = styled.label`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 8px;\n  cursor: pointer;\n  height: 20px;\n  span {\n    font-size: ${TextVariantEnum.textBody2medium};\n    @media (min-width: 768px) {\n      font-size: ${TextVariantEnum.textBody1medium};\n    }\n  }\n  & > span {\n    margin-bottom: -4px;\n  }\n`;\n\nexport const ContainerCheckbox = styled.div<{ disabled?: boolean }>`\n  position: relative;\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  font-size: 22px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  &:hover input ~ span {\n    background-color: transparent;\n    border: 1px solid\n      ${({ theme, disabled }) => (disabled ? theme.defaultTextColor : theme.auth.radioButtonColor)};\n  }\n\n  & input:checked ~ span {\n    background-color: ${({ theme, disabled }) =>\n      disabled ? theme.defaultTextColor : theme.auth.radioButtonColor};\n    & svg path {\n      fill: #fff;\n    }\n  }\n\n  input:checked ~ span:after {\n    display: block;\n  }\n`;\n\nexport const Checkmark = styled.span<{ disabled?: boolean }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 20px;\n  height: 20px;\n  background-color: transparent;\n  border: 1px solid\n    ${({ theme, disabled }) => (disabled ? theme.defaultTextColor : theme.auth.radioButtonColor)};\n  border-radius: 50%;\n  transition: all 0.2s cubic-bezier(0.2, 0, 0, 1);\n\n  & svg {\n    position: absolute;\n    right: 3.5px;\n    top: 4.25px;\n    & path {\n      fill: none;\n    }\n  }\n`;\n\nexport const CheckboxBtn = styled.input<{ disabled?: boolean }>`\n  accent-color: ${({ theme, disabled }) =>\n    disabled ? theme.defaultTextColor : theme.auth.radioButtonColor};\n  position: absolute;\n  opacity: 0;\n  height: 0;\n  width: 0;\n`;\n\nexport const BoxErrors = styled.div<{ isText?: boolean }>`\n  position: absolute;\n  top: ${({ isText }) => isText && '16px'};\n  left: ${({ isText }) => isText && '26px'};\n  /* margin-left: 16px;\n  margin: ${({ isText }) => isText && '4px 0'}; */\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AACA,mBAAmD;;;ACG5C,IAAM,qBAAqB,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAQxB,gBAAgB;AAAA;AAAA,mBAEd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ5B,IAAM,oBAAoB,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAchC,CAAC,EAAE,OAAO,SAAS,MAAO,WAAW,MAAM,mBAAmB,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA,wBAIzD,CAAC,EAAE,OAAO,SAAS,MACrC,WAAW,MAAM,mBAAmB,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW9C,IAAM,YAAY,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ1B,CAAC,EAAE,OAAO,SAAS,MAAO,WAAW,MAAM,mBAAmB,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcxE,IAAM,cAAc,sCAAO;AAAA,kBAChB,CAAC,EAAE,OAAO,SAAS,MACjC,WAAW,MAAM,mBAAmB,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAO5C,IAAM,YAAY,sCAAO;AAAA;AAAA,SAEvB,CAAC,EAAE,OAAO,MAAM,UAAU;AAAA,UACzB,CAAC,EAAE,OAAO,MAAM,UAAU;AAAA;AAAA,YAExB,CAAC,EAAE,OAAO,MAAM,UAAU;AAAA;;;ADjC5B;AAhCH,SAASA,SAAS;EACvBC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AACa,GAAgB;AAC7B,QAAM;IAAEC;EAAM,IAAIC,OAAO;AACzB,QAAMC,kBAAcC,qBAAyB,IAAI;AACjD,QAAM,CAACC,cAAcC,eAAe,QAAIC,uBAASf,OAAO;AAExDgB,8BAAU,MAAM;AACdF,oBAAgBd,OAAO;EACzB,GAAG,CAACA,OAAO,CAAC;AAEZ,QAAMiB,eAAeA,CAACC,MAAqC;AACzD,UAAMC,YAAYD,EAAEE,OAAOpB;AAC3Bc,oBAAgBK,SAAS;AAEzB,QAAIb,UAAU;AACZA,eAASa,SAAS;IACpB;EACF;AAEA,SACE,mDAAC,OAAI,OAAc,OAAM,QAAO,eAAc,UAC5C;uDAAC,sBACC;yDAAC,qBAAkB,UACjB;;UAAC;;YACC,OACEZ,UAAU,UAAUA,UAAU,UAAUM,cAAcQ,SAAS,IAAId,SAAS;YAE9E;YACA,MAAK;YACL;YACA;YACA,KAAKI;YACL,SAASE;YACT,UAAUI;;UAVZ;;;;;;;;QAUyB;QAEzB,mDAAC,aAAU,UACT,6DAAC,oBAAD;;;;eAAU,KADZ;;;;eAEA;WAfF;;;;aAgBA;MACA,mDAAC,QAAK,SAASK,gBAAgBC,iBAAkBtB,mBAAjD;;;;aAAuD;SAlBzD;;;;WAmBA;IACCuB,QAAQnB,SAAS,KAChB,mDAAC,aAAU,QAAQmB,QAAQnB,SAAS,GAClC,6DAAC,QAAK,SAASiB,gBAAgBG,WAAW,OAAOhB,MAAMiB,gBACpDrB,uBADH;;;;WAEA,KAHF;;;;WAIA;OA1BJ;;;;SA4BA;AAEJ;",
  "names": ["CheckBox", "checked", "label", "disabled", "id", "name", "errorText", "onChange", "value", "style", "theme", "useApp", "checkboxRef", "useRef", "checkedState", "setCheckedState", "useState", "useEffect", "handleChange", "e", "isChecked", "target", "toString", "TextVariantEnum", "textBody2medium", "Boolean", "textSmall", "errorTextColor"]
}
