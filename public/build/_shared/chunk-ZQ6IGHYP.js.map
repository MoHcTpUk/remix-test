{
  "version": 3,
  "sources": ["../../../app/components/common/Modal/index.tsx"],
  "sourcesContent": ["import { Link, useMatches } from '@remix-run/react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport type { ReactNode } from 'react';\nimport { useEffect } from 'react';\nimport routes from 'shared/routing/routes';\nimport { v1 as uuidv1 } from 'uuid';\n\nimport { ModalBox } from '~/components/ui/ModalBox';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { VariantModalEnum } from '~/types/enums/variantModalEnum';\nimport { DEFAULT_USER_AVATAR } from '~/utils/constants';\nimport { getImageUrl } from '~/utils/helpers';\n\nimport { Box } from '../Box';\nimport SvgClose from '../Icons/Close';\nimport SvgLogo from '../Icons/Logo';\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport {\n  AvatarContainer,\n  Background,\n  LogoWrapper,\n  ModalCloseButton,\n  ModalContainer,\n  ModalHeader,\n  ModalInner,\n  UserBox,\n} from './styles';\n\ntype ModalTypeProps = {\n  visibility: boolean;\n  variant?: VariantModalEnum;\n  setVisibility: (visibility: boolean) => void;\n  children: ReactNode;\n};\n\nexport function Modal({ visibility, setVisibility, variant, children }: ModalTypeProps) {\n  const { theme, userContext, t } = useApp();\n  const modalId = uuidv1();\n  const widthScreen = useScreenWidth();\n  const matches = useMatches();\n  const indexMatches = matches.some((m) => m.id === 'routes/index');\n\n  useEffect(() => {\n    document.body.classList.toggle('has-modal', visibility);\n\n    return () => {\n      document.body.classList.toggle('has-modal', false);\n    };\n  }, [visibility]);\n\n  return (\n    <AnimatePresence>\n      {visibility && (\n        <>\n          <Background\n            className={\n              variant === VariantModalEnum.navbar && indexMatches && widthScreen > 1280\n                ? 'navBackground'\n                : ''\n            }\n          >\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 0.75 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.15 }}\n              style={{\n                position: 'absolute',\n                inset: 0,\n                backgroundColor: 'rgb(63 63 70)',\n                zIndex: 998,\n              }}\n            />\n          </Background>\n          <ModalContainer\n            // eslint-disable-next-line jsx-a11y/aria-role\n            role='dialog'\n            aria-labelledby={modalId}\n            aria-modal='true'\n            variant={variant}\n          >\n            <ModalInner\n              initial={{ x: '50%', y: '-50%', opacity: 0, scale: 0 }}\n              animate={{ x: 0, y: 0, opacity: 1, scale: 1 }}\n              exit={{\n                x: '50%',\n                y: '-50%',\n                opacity: 0,\n                transition: {\n                  ease: [0.3, 0, 0.8, 0.15],\n                  duration: 0.2,\n                },\n                scale: 0,\n              }}\n              transition={{\n                ease: [0.05, 0.7, 0.1, 1],\n                duration: 0.5,\n              }}\n              variant={variant}\n              id={modalId}\n              className={\n                variant === VariantModalEnum.navbar && indexMatches && widthScreen > 1280\n                  ? 'homePageNavbar'\n                  : ''\n              }\n            >\n              {variant === VariantModalEnum.navbar && (\n                <ModalHeader>\n                  {userContext?.user?.isAuthenticated ? (\n                    <UserBox>\n                      <AvatarContainer>\n                        <Link to={routes.user.root}>\n                          <img\n                            src={\n                              userContext.user.avatar\n                                ? getImageUrl(userContext.user.avatar)\n                                : DEFAULT_USER_AVATAR\n                            }\n                            alt=''\n                          />\n                        </Link>\n                      </AvatarContainer>\n                      <Box flexDirection='column'>\n                        <Text variant={TextVariantEnum.textBody1medium}>\n                          {userContext.user.firstName}\n                        </Text>\n                        <Text variant={TextVariantEnum.textBody1medium}>\n                          {userContext.user.lastName}\n                        </Text>\n                      </Box>\n                    </UserBox>\n                  ) : (\n                    <Link to={routes.root}>\n                      <LogoWrapper>\n                        <SvgLogo color={theme.navbar.logoColor} />\n                      </LogoWrapper>\n                    </Link>\n                  )}\n                  <ModalCloseButton\n                    type='button'\n                    onClick={() => setVisibility(!visibility)}\n                    variant='withHeader'\n                    className={indexMatches && widthScreen > 1280 ? 'hidden' : ''}\n                  >\n                    <SvgClose color={theme.modal.svgColor} />\n                  </ModalCloseButton>\n                </ModalHeader>\n              )}\n              {variant === VariantModalEnum.filter && (\n                <ModalHeader>\n                  <UserBox>\n                    <Text variant={TextVariantEnum.textHeading2}>{t('common:search_filters')}</Text>\n                  </UserBox>\n                  <ModalCloseButton\n                    type='button'\n                    onClick={() => setVisibility(!visibility)}\n                    variant='withHeader'\n                  >\n                    <SvgClose color={theme.modal.svgColor} />\n                  </ModalCloseButton>\n                </ModalHeader>\n              )}\n              {variant !== VariantModalEnum.navbar &&\n                variant !== VariantModalEnum.filter &&\n                variant !== VariantModalEnum.confirmDelete &&\n                variant !== VariantModalEnum.confirmDeleteCompany &&\n                variant !== VariantModalEnum.providingContacts &&\n                variant !== VariantModalEnum.uploading &&\n                variant !== VariantModalEnum.companyCreated &&\n                variant !== VariantModalEnum.verification && (\n                  <ModalCloseButton type='button' onClick={() => setVisibility(!visibility)}>\n                    <SvgClose color={theme.modal.svgColor} />\n                  </ModalCloseButton>\n                )}\n              {children}\n            </ModalInner>\n            <ModalBox onClick={() => setVisibility(!visibility)} />\n          </ModalContainer>\n        </>\n      )}\n    </AnimatePresence>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "Modal", "visibility", "setVisibility", "variant", "children", "theme", "userContext", "t", "useApp", "modalId", "uuidv1", "widthScreen", "useScreenWidth", "matches", "useMatches", "indexMatches", "some", "m", "id", "useEffect", "document", "body", "classList", "toggle", "VariantModalEnum", "navbar", "opacity", "duration", "position", "inset", "backgroundColor", "zIndex", "x", "y", "scale", "transition", "ease", "user", "isAuthenticated", "routes", "root", "avatar", "getImageUrl", "DEFAULT_USER_AVATAR", "TextVariantEnum", "textBody1medium", "firstName", "lastName", "logoColor", "modal", "svgColor", "filter", "textHeading2", "confirmDelete", "confirmDeleteCompany", "providingContacts", "uploading", "companyCreated", "verification"]
}
