{
  "version": 3,
  "sources": ["../../../app/components/common/Switcher/index.tsx", "../../../app/components/common/Switcher/styles.ts"],
  "sourcesContent": ["import type { ChangeEvent } from 'react';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useApp } from '~/hooks';\n\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport { BoxLabel, Checkbox, Switch, SwitcherBox, Wrapper } from './styles';\nimport type { SwitcherProps } from './types';\n\nexport function Switcher({\n  checked,\n  onChange,\n  htmlLabel,\n  label,\n  disabled,\n  name,\n  value,\n  variant = 'default',\n  checkedLabel,\n  unCheckedLabel,\n  control,\n}: SwitcherProps): JSX.Element {\n  const { theme } = useApp();\n\n  const custom = {\n    onChange: (ev: ChangeEvent<HTMLInputElement>) => {\n      if (onChange) {\n        onChange(!ev.target.checked);\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(!ev.target.checked);\n      }\n    },\n  };\n  const [checkedState, setCheckedState] = useState(checked);\n\n  const checkboxRef = useRef<HTMLInputElement>(null);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setCheckedState((prevChecked) => !prevChecked);\n\n    if (checkboxRef.current) {\n      const isChecked = checkboxRef.current.checked;\n      if (onChange) onChange(isChecked);\n    }\n  };\n\n  useEffect(() => {\n    if (checked !== undefined) {\n      setCheckedState(checked);\n      if (checkboxRef.current) {\n        checkboxRef.current.checked = checked;\n      }\n    }\n  }, [checked]);\n\n  return (\n    <Wrapper>\n      {variant === 'lang' && (\n        <Switch checked={checked} htmlFor={htmlLabel} title={label} variant='lang'>\n          <Checkbox disabled={disabled} id={htmlLabel} type='checkbox' {...custom} />\n        </Switch>\n      )}\n      {variant === 'default' && (\n        <SwitcherBox>\n          <Switch\n            data-content={checkedState ? 'on' : 'off'}\n            checked={checkedState}\n            variant='default'\n            htmlFor={htmlLabel}\n            title={label}\n          >\n            <Checkbox\n              value={\n                value === 'true' || value === 'false' || !value ? checkedState?.toString() : value\n              }\n              disabled={disabled}\n              type='checkbox'\n              id={htmlLabel}\n              name={name}\n              ref={checkboxRef}\n              checked={control ? checkedState : undefined}\n              defaultChecked={!checked ? checked : undefined}\n              onChange={(e) => (control ? console.log(e.target.value) : handleChange(e))}\n            />\n          </Switch>\n\n          <BoxLabel style={{ cursor: 'pointer' }}>\n            <Text\n              color={\n                checkedState ? theme.switcher.backgroundChecked : theme.switcher.textDefaultColor\n              }\n              variant={TextVariantEnum.textBody2}\n            >\n              {checkedState ? checkedLabel : unCheckedLabel}\n            </Text>\n          </BoxLabel>\n        </SwitcherBox>\n      )}\n    </Wrapper>\n  );\n}\n", "import styled from 'styled-components';\n\nimport type { SwitcherProps } from './types';\n\nexport const Wrapper = styled.div`\n  /* width: max-content; */\n  height: max-content;\n`;\n\nexport const Switch = styled.label<SwitcherProps>`\n  background: ${({ theme, variant, checked }) =>\n    // eslint-disable-next-line no-nested-ternary\n    variant === 'lang'\n      ? theme.switcher.backgroundDefault\n      : checked && variant === 'default'\n      ? theme.switcher.backgroundChecked\n      : theme.switcher.backgroundDefault};\n  display: block;\n  border-radius: 20px;\n  position: relative;\n  cursor: pointer;\n  transition: background-color 0.2s cubic-bezier(0.2, 0, 0, 1);\n  width: 56px;\n  height: 32px;\n\n  &::before {\n    content: attr(data-content);\n    display: ${({ variant }) => (variant === 'default' ? 'flex' : 'none')};\n    position: absolute;\n    color: ${({ checked, theme }) =>\n      checked ? theme.switcher.textCheckedColor : theme.switcher.textDefaultColor};\n    font-size: 9px;\n    top: 11px;\n    right: ${({ checked }) => !checked && '10px'};\n    left: ${({ checked }) => checked && '10px'};\n  }\n\n  &::after {\n    content: '';\n    display: block;\n    position: absolute;\n    background: var(--white);\n    border-radius: 50%;\n    left: 4px;\n    top: 4px;\n    width: 24px;\n    height: 24px;\n    transition: left 0.15s ease-in;\n    left: ${({ checked }) => checked && '28px'};\n    background: ${({ checked, variant, theme }) =>\n      // eslint-disable-next-line no-nested-ternary\n      variant === 'default'\n        ? theme.switcher.backgroundTogglerColor\n        : checked && variant === 'lang'\n        ? \"url('/images/flags/English.png')\"\n        : \"url('/images/flags/Thailand.png')\"};\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n  }\n`;\n\nexport const Checkbox = styled.input`\n  display: none;\n`;\n\nexport const BoxLabel = styled.div`\n  cursor: pointer;\n`;\n\nexport const SwitcherBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  align-items: center;\n`;\n"],
  "mappings": "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",
  "names": ["Switcher", "checked", "onChange", "htmlLabel", "label", "disabled", "name", "value", "variant", "checkedLabel", "unCheckedLabel", "control", "theme", "useApp", "custom", "ev", "target", "console", "log", "checkedState", "setCheckedState", "useState", "checkboxRef", "useRef", "handleChange", "e", "prevChecked", "current", "isChecked", "useEffect", "undefined", "toString", "cursor", "switcher", "backgroundChecked", "textDefaultColor", "TextVariantEnum", "textBody2"]
}
