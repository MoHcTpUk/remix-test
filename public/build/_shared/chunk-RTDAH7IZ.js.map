{
  "version": 3,
  "sources": ["../../../app/components/pages/User/Companies/Company/components/CompanyInformation/CompanyInformationEdit.tsx", "../../../app/components/pages/User/Companies/Company/components/CompanyInformation/styles.ts", "../../../app/components/pages/User/Companies/Company/styles.ts"],
  "sourcesContent": ["import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { useEffect, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\n\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { UploadingImageModal } from '~/components/entities/UploadingImageModal';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { BoxAvatar } from '~/components/ui/Card/BoxAvatar';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { CompanyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateCompany } from '~/types/interfaces/iForms';\nimport { DEFAULT_COMPANY_LOGO } from '~/utils/constants';\nimport { extractTitles, extractTitlesNewWay, getImageUrl } from '~/utils/helpers';\n\nimport { BoxPicture, Image } from './styles';\n\nexport default function CompanyInformationEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  company,\n  dictionaries,\n  actionData,\n}: {\n  editCard?: CompanyCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  company?: Company | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateCompany;\n}) {\n  const { t, userContext, theme } = useApp();\n  const [photo, setPhoto] = useState(\n    company?.logo_uri ? getImageUrl(company?.logo_uri) : DEFAULT_COMPANY_LOGO,\n  );\n  const [showUploader, setShowUploader] = useState(false);\n  const [errorTextForImage, setErrorTextForImage] = useState(false);\n\n  useEffect(() => {\n    if (\n      !photo?.startsWith('data:image/jpg') &&\n      !photo?.startsWith('data:image/jpeg') &&\n      !photo?.startsWith('https://api.test.upjob.com/m') &&\n      !photo?.startsWith('/images/user') &&\n      photo\n    ) {\n      setErrorTextForImage(true);\n    } else {\n      setErrorTextForImage(false);\n    }\n  }, [photo]);\n\n  return (\n    <BoxCard\n      title={t('user:general_information')}\n      withEditButton\n      nameCard={CompanyCardEnum.information}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={1}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxPicture>\n          <Text variant={TextVariantEnum.textBody1medium}>{t('user:profile_picture')}</Text>\n          <BoxAvatar variant='user'>\n            <input type='hidden' name='logo' value={photo} />\n            <Image src={photo || DEFAULT_COMPANY_LOGO} alt='avatar' />\n            <Button priority='secondary' onClick={() => setShowUploader(!showUploader)}>\n              <Text variant={TextVariantEnum.textBody2}> {t('user:edit_photo')}</Text>\n            </Button>\n          </BoxAvatar>\n          {errorTextForImage && (\n            <Text variant={TextVariantEnum.textSmall} color={theme.errorTextColor}>\n              {t('user:image_type_must_be_jpeg')}\n            </Text>\n          )}\n          <UploadingImageModal\n            visibility={showUploader}\n            setVisibility={setShowUploader}\n            defaultImage={photo}\n            setDefaultImage={setPhoto}\n          />\n        </BoxPicture>\n        <BoxFields>\n          <Input\n            placeholder={t('user:company_name')}\n            id='name'\n            name='name'\n            value={company?.name}\n            errorText={actionData?.fieldErrors?.name?.[userContext.language]}\n            disabled={company?.verified}\n          />\n          {company?.verified && <input name='name' type='hidden' value={company?.name} />}\n          <Select\n            entries={extractTitlesNewWay(dictionaries?.specializations, userContext.language)}\n            placeholder={t('user:specialization')}\n            name='specialization_id'\n            values={[company?.specialization_id || '']}\n            errorText={actionData?.fieldErrors?.specialization_id?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:phone')}\n            id='phone'\n            name='phone'\n            variant='phone'\n            value={company?.phone || userContext.user.phone}\n            errorText={actionData?.fieldErrors?.phone?.[userContext.language]}\n          />\n          <Select\n            entries={extractTitles(dictionaries?.location, userContext.language)}\n            placeholder={t('user:district')}\n            name='city'\n            values={[company?.city_id || '']}\n            errorText={actionData?.fieldErrors?.city_id?.[userContext.language]}\n            variant='search-single'\n          />\n          <Input\n            placeholder={t('user:address')}\n            id='address'\n            name='address'\n            value={company?.address}\n            errorText={actionData?.fieldErrors?.address?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:zip_code')}\n            id='zip'\n            name='zip_code'\n            value={company?.zip_code}\n            errorText={actionData?.fieldErrors?.zip_code?.[userContext.language]}\n          />\n          <Input\n            placeholder={t('user:website_or_facebook_page')}\n            id='website'\n            name='website'\n            variant='website'\n            value={company?.website}\n            errorText={actionData?.fieldErrors?.website?.[userContext.language]}\n          />\n          <Select\n            entries={extractTitles(dictionaries?.employeeNumbers, userContext.language)}\n            placeholder={t('user:number_of_employees')}\n            id='employee'\n            name='employee'\n            values={[company?.number_of_employees_id || '']}\n            errorText={actionData?.fieldErrors?.number_of_employees_id?.[userContext.language]}\n          />\n          <Input\n            variant='textarea'\n            placeholder={t('user:description')}\n            id='i_description'\n            name='description'\n            value={company?.description}\n            errorText={actionData?.fieldErrors?.description?.[userContext.language]}\n          />\n\n          {/* <Switcher\n            checked={Boolean(company?.published)}\n            htmlLabel='published'\n            name='published'\n            variant='default'\n            checkedLabel={t('user:published')}\n            unCheckedLabel={t('user:published')}\n          /> */}\n        </BoxFields>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import styled from 'styled-components';\n\nexport const BoxPicture = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n`;\n\nexport const Image = styled.img`\n  width: 96px;\n  height: 96px;\n  object-fit: cover;\n  border-radius: 50%;\n  @media (min-width: 768px) {\n    width: 136px;\n    height: 136px;\n  }\n`;\n\nexport const BoxWebsite = styled.div`\n  padding: 8px 0;\n`;\n\nexport const VerificationStatus = styled.div<{ verified?: boolean }>`\n  display: flex;\n  flex-direction: row;\n  gap: 6px;\n  align-items: center;\n\n  & > span {\n    margin-top: 3px;\n    color: ${({ theme, verified }) =>\n      verified ? theme.accentTextColor : theme.boxInformation.warning.borderColor};\n  }\n`;\n", "import styled from 'styled-components';\n\nexport const BoxCustomData = styled.div`\n  padding: 8px 12px;\n  border-radius: 80px;\n  border: 1px solid ${({ theme }) => theme.user.borderColor};\n  height: 40px;\n  @media (min-width: 1024px) {\n    height: 44px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 16px;\n  @media (min-width: 1024px) {\n    gap: 24px;\n  }\n`;\n"],
  "mappings": "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",
  "names": ["editCard", "setEditCard", "state", "step", "company", "dictionaries", "actionData", "t", "userContext", "theme", "useApp", "photo", "setPhoto", "useState", "logo_uri", "getImageUrl", "DEFAULT_COMPANY_LOGO", "showUploader", "setShowUploader", "errorTextForImage", "setErrorTextForImage", "useEffect", "startsWith", "CompanyCardEnum", "information", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "TextVariantEnum", "textBody1medium", "textBody2", "textSmall", "errorTextColor", "name", "fieldErrors", "language", "verified", "extractTitlesNewWay", "specializations", "specialization_id", "phone", "user", "extractTitles", "location", "city_id", "address", "zip_code", "website", "employeeNumbers", "number_of_employees_id", "description"]
}
