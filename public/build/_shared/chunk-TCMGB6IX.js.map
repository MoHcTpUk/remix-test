{
  "version": 3,
  "sources": ["../../../app/components/common/Input/index.tsx", "../../../app/utils/masks.ts"],
  "sourcesContent": ["// import InputMask from 'react-input-mask'\n// Импортируем библиотеку для масок\nimport type { KeyboardEvent, RefObject } from 'react';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useApp } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { maskPhone, maskWebsite } from '~/utils/masks';\n\nimport { Icon } from '../Icon';\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport {\n  AttentionErrorIcon,\n  BoxErrors,\n  ButtonClear,\n  InputComponent,\n  PlaceHolder,\n  TextareaComponent,\n  TextareaIcon,\n  Wrapper,\n  WrapperInner,\n} from './styles';\n\nexport type InputProps = {\n  value?: string;\n  id: string;\n  placeholder?: string;\n  errorText?: string;\n  disabled?: boolean;\n  htmlType?: HTMLInputElement['type'];\n  variant?: 'default' | 'password' | 'search' | 'phone' | 'email' | 'website' | 'textarea';\n  background?: string;\n  name?: string;\n  textHelper?: string;\n  onlyNumber?: boolean;\n  onChange?: (value: string) => void;\n};\n\nexport function Input({\n  id,\n  value = '',\n  placeholder,\n  errorText,\n  disabled,\n  name,\n  htmlType = 'text',\n  variant = 'default',\n  background,\n  textHelper,\n  onlyNumber,\n  onChange,\n}: InputProps) {\n  const { theme } = useApp();\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n  const [password, setPassword] = useState('');\n  const [hidePassword, setHidePassword] = useState(true);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    if (onChange) {\n      onChange(e.target.value);\n      // if (variant === 'password') {\n      //   setPassword(e.target.value)\n      // }\n    }\n  };\n\n  useEffect(() => {\n    const { current } = inputRef;\n    if (current) {\n      current.value = value;\n      setTextAreaValue(current.value);\n      if (current.scrollHeight > 45) {\n        current.style.borderRadius = `8px`;\n        current.style.height = `${current.scrollHeight}px`;\n      } else {\n        current.style.borderRadius = `80px`;\n      }\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }, [value]);\n\n  function clearInput() {\n    const { current } = inputRef;\n    if (current) {\n      current.value = '';\n      const event = new Event('input' || 'textarea', { bubbles: true });\n      // reset textarea\n      current.dispatchEvent(event);\n      current.style.height = 'auto';\n      current.style.borderRadius = `80px`;\n      setTextAreaValue('');\n      if (onChange) onChange('');\n    }\n  }\n\n  const handleKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (onlyNumber) {\n      const keyCode = event.keyCode || event.which;\n      const keyValue = String.fromCharCode(keyCode);\n\n      // Allow only numbers (0-9) and the backspace key\n      if (!/^[0-9\\b]+$/.test(keyValue)) {\n        event.preventDefault();\n      }\n    }\n  };\n\n  const adjustTechAreaHeight = () => {\n    const { current } = inputRef;\n    if (current) {\n      setTextAreaValue(current.value);\n      current.style.height = 'auto';\n      current.style.height = `${current.scrollHeight}px`;\n\n      if (current.scrollHeight > 44) {\n        current.style.borderRadius = `8px`;\n      } else {\n        current.style.borderRadius = `80px`;\n      }\n    }\n  };\n\n  const [textAreaValue, setTextAreaValue] = useState('');\n  const isEmptyTextArea = inputRef?.current?.value === '' || textAreaValue.length < 1;\n\n  // let inputElement;\n\n  // switch (variant) {\n  //   case 'phone':\n  //     inputElement = (\n  //       <InputMask\n  //         mask='+99 999 999 9999'\n  //         maskChar=' '\n  //         // ref={maskRef}\n  //         placeholder=' '\n  //         disabled={disabled}\n  //         id={id}\n  //         name={name}\n  //         // error={Boolean(errorText)}\n  //         onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n  //           if (onChange) onChange(e.target.value);\n  //         }}\n  //       >\n  //           {(inputProps: React.InputHTMLAttributes<HTMLInputElement>) => (\n  //             <InputComponent\n  //               ref={inputRef as React.Ref<HTMLInputElement>}\n  //               {...inputProps}\n  //               onKeyPress={(e) => {\n  //                 if (!/^[0-9\\b]+$/.test(e.key)) {\n  //                   e.preventDefault();\n  //                 }\n  //               }}\n  //               error={Boolean(errorText)}\n  //             />\n  //           )}\n  //       </InputMask>\n  //     );\n  //     break;\n  //   case 'email':\n  //     inputElement = (\n  //       <InputMask\n  //         // ref={inputRef}\n  //         mask='*'\n  //         placeholder=' '\n  //         disabled={disabled}\n  //         id={id}\n  //         name={name}\n  //         // error={Boolean(errorText)}\n  //         onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n  //           if (onChange) onChange(e.target.value);\n  //         }}\n  //       >\n  //           {(inputProps: React.InputHTMLAttributes<HTMLInputElement>) => (\n  //             <InputComponent\n  //               {...inputProps}\n  //               onKeyPress={(e) => {\n  //                 const allowedChars = /^[A-Za-z0-9_.-@]+$/;\n  //                 if (!allowedChars.test(e.key)) {\n  //                   e.preventDefault();\n  //                 }\n  //               }}\n  //               error={Boolean(errorText)}\n  //               ref={inputRef as React.Ref<HTMLInputElement>}\n  //             />\n  //           )}\n  //       </InputMask>\n  //     );\n  //     break;\n  //   case 'website':\n  //     inputElement = (\n  //       <InputMask\n  //         // ref={inputRef}\n  //         mask='https://*'\n  //         placeholder=' '\n  //         disabled={disabled}\n  //         id={id}\n  //         name={name}\n  //         // error={Boolean(errorText)}\n  //         onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n  //           if (onChange) onChange(e.target.value);\n  //         }}\n  //       >\n  //           {(inputProps: React.InputHTMLAttributes<HTMLInputElement>) => (\n  //             <InputComponent {...inputProps} error={Boolean(errorText)} ref={inputRef as React.Ref<HTMLInputElement>} />\n  //           )}\n  //       </InputMask>\n  //     );\n  //     break;\n  //   default:\n  //     inputElement = (\n  //       <InputComponent\n  //         ref={inputRef as React.Ref<HTMLInputElement>}\n  //         background={background}\n  //         // type={htmlType}\n  //         placeholder=' '\n  //         disabled={disabled}\n  //         id={id}\n  //         name={name}\n  //         error={Boolean(errorText)}\n  //         onKeyPress={(e) => {\n  //           if (onlyNumber) handleKeyPress(e);\n  //         }}\n  //         onChange={(e) => {\n  //           if (onChange) onChange(e.target.value);\n  //         }}\n  //       />\n  //     );\n  // }\n\n  return (\n    <Wrapper disabled={disabled}>\n      <WrapperInner variant={variant} tabIndex={-1}>\n        {variant === 'textarea' ? (\n          <TextareaComponent\n            rows={1}\n            ref={inputRef as RefObject<HTMLTextAreaElement>}\n            background={background}\n            placeholder=' '\n            id={id}\n            name={name}\n            onChange={adjustTechAreaHeight}\n          />\n        ) : (\n          <InputComponent\n            ref={inputRef as RefObject<HTMLInputElement>}\n            background={background}\n            // type={htmlType}\n            placeholder=' '\n            disabled={disabled}\n            id={id}\n            name={name}\n            error={Boolean(errorText)}\n            onKeyPress={(e) => {\n              if (onlyNumber) handleKeyPress(e);\n            }}\n            type={variant === 'password' && hidePassword ? 'password' : 'text'}\n            onChange={(e) => {\n              if (variant === 'password') setPassword(e.target.value);\n              if (variant === 'phone') handleChange(maskPhone(e));\n              if (variant === 'website') handleChange(maskWebsite(e));\n              return handleChange(e);\n            }}\n            autoComplete={variant === 'password' ? 'off' : 'on'}\n          />\n        )}\n        {placeholder && variant !== 'search' && (\n          <PlaceHolder\n            htmlFor={id}\n            className='placeholder'\n            error={Boolean(errorText)}\n            variant={variant}\n          >\n            {placeholder}\n          </PlaceHolder>\n        )}\n        {variant === 'textarea' &&\n          (isEmptyTextArea ? (\n            <TextareaIcon className='editPencil'>\n              <Icon name={IconEnum.editPencilLine} />\n            </TextareaIcon>\n          ) : (\n            <ButtonClear disabled={disabled} type='button' onClick={() => clearInput()}>\n              <Icon name={IconEnum.closeMd} />\n            </ButtonClear>\n          ))}\n        {variant !== 'textarea' && errorText && (\n          <AttentionErrorIcon className='editPencil'>\n            <Icon name={IconEnum.attentionError} />\n          </AttentionErrorIcon>\n        )}\n        {variant !== 'textarea' &&\n          !errorText &&\n          (variant === 'password' ? (\n            <ButtonClear\n              disabled={disabled}\n              type='button'\n              onClick={() => setHidePassword(!hidePassword)}\n            >\n              {hidePassword ? (\n                <Icon name={IconEnum.view} color={theme.buttons.secondary.iconColor} />\n              ) : (\n                <Icon name={IconEnum.viewHide} />\n              )}\n            </ButtonClear>\n          ) : (\n            <ButtonClear disabled={disabled} type='button' onClick={() => clearInput()}>\n              <Icon name={IconEnum.closeMd} />\n            </ButtonClear>\n          ))}\n      </WrapperInner>\n      <BoxErrors isText={Boolean(errorText) || Boolean(textHelper)}>\n        {Boolean(errorText) && (\n          <Text variant={TextVariantEnum.textSmall} color={theme.errorTextColor}>\n            {errorText}\n          </Text>\n        )}\n        {!errorText && Boolean(textHelper) && (\n          <Text variant={TextVariantEnum.textSmall}>{textHelper}</Text>\n        )}\n      </BoxErrors>\n    </Wrapper>\n  );\n}\n", "export const maskPhone = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n  let { value } = e.target;\n  value = value.replace(/\\D/g, '');\n  value = value.length ? `+${value}` : '';\n  e.target.value = value;\n  return e;\n};\n\nexport const maskWebsite = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n  let { value } = e.target;\n  value = value.replace(/https?:\\/\\//g, '');\n  value = value.replace(/\\s/g, '');\n  value = value.length ? `https://${value}` : '';\n  // value = value.endsWith('/') ? value.slice(0, -1) : value\n  e.target.value = value;\n  return e;\n};\n\nexport const maskTaxId = (value: number | undefined) => {\n  let taxId = value?.toString();\n  taxId = taxId?.replace(/^(\\d{9})(\\d)/, '$1-$2');\n  return taxId;\n};\n"],
  "mappings": "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",
  "names": ["Input", "id", "value", "placeholder", "errorText", "disabled", "name", "htmlType", "variant", "background", "textHelper", "onlyNumber", "onChange", "theme", "useApp", "inputRef", "useRef", "password", "setPassword", "useState", "hidePassword", "setHidePassword", "handleChange", "e", "target", "useEffect", "current", "setTextAreaValue", "scrollHeight", "style", "borderRadius", "height", "clearInput", "event", "Event", "bubbles", "dispatchEvent", "handleKeyPress", "keyCode", "which", "keyValue", "String", "fromCharCode", "test", "preventDefault", "adjustTechAreaHeight", "textAreaValue", "isEmptyTextArea", "length", "Boolean", "maskPhone", "maskWebsite", "IconEnum", "editPencilLine", "closeMd", "attentionError", "view", "buttons", "secondary", "iconColor", "viewHide", "TextVariantEnum", "textSmall", "errorTextColor"]
}
