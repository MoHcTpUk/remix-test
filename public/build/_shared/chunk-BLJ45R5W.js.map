{
  "version": 3,
  "sources": ["../../../app/components/common/Pagination/index.tsx", "../../../app/components/common/Pagination/styles.ts"],
  "sourcesContent": ["import { Fragment, useEffect, useState } from 'react';\n\nimport { useApp } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport type { IPaginationRange } from '~/types/interfaces/IPaginationRange';\n\nimport { Box } from '../Box';\nimport Button from '../Button';\nimport { Icon } from '../Icon';\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport { BoxPagination, PageButton } from './styles';\n\nexport function Pagination({\n  currentPage,\n  paginationRange,\n  maxPages,\n  setCurrentToken,\n  setCurrentPage,\n  handleSubmit,\n  setMaxPageSize,\n  maxPageSize,\n  widthScreen,\n  setCheckChangeSearch,\n  checkChangeSearch,\n}: {\n  currentPage: number;\n  paginationRange: IPaginationRange[] | undefined;\n  maxPages?: number;\n  setCurrentPage: (value: number) => void;\n  setCurrentToken: (value?: string) => void;\n  handleSubmit?: (scrollReset?: boolean) => void;\n  setMaxPageSize: (value: number) => void;\n  maxPageSize?: number;\n  widthScreen?: number;\n  setCheckChangeSearch?: (value: boolean) => void;\n  checkChangeSearch?: boolean;\n}) {\n  const { theme, t } = useApp();\n  const [initialRendering, setInitialRendering] = useState(false);\n\n  const onNext = () => {\n    const token = paginationRange?.find((item) => item.page === currentPage + 1)?.token;\n    setCurrentPage(+currentPage + 1);\n    setCurrentToken(token);\n    if (setCheckChangeSearch && checkChangeSearch) {\n      setCheckChangeSearch(false);\n    }\n  };\n\n  const onPrevious = () => {\n    const token = paginationRange?.find((item) => item.page === currentPage - 1)?.token;\n    setCurrentPage(+currentPage - 1);\n    setCurrentToken(token);\n    if (setCheckChangeSearch && checkChangeSearch) {\n      setCheckChangeSearch(false);\n    }\n  };\n\n  const handlePageClick = (pageNumber: number, token?: string) => {\n    setCurrentToken(token);\n    setCurrentPage(pageNumber);\n    if (setCheckChangeSearch && checkChangeSearch) {\n      setCheckChangeSearch(false);\n    }\n  };\n\n  const handleMaxPagesSize = () => {\n    setMaxPageSize(+(maxPageSize || 0) + 10);\n  };\n\n  useEffect(() => {\n    if (initialRendering && handleSubmit) {\n      if (!checkChangeSearch) {\n        handleSubmit(true);\n      }\n    } else {\n      setInitialRendering(true);\n    }\n  }, [currentPage]);\n\n  useEffect(() => {\n    if (handleSubmit && maxPageSize && +maxPageSize !== 10) {\n      handleSubmit();\n    }\n  }, [maxPageSize]);\n\n  return maxPages && maxPages > 1 ? (\n    <BoxPagination>\n      {widthScreen && widthScreen < 1280 ? (\n        <Button priority='secondary' onClick={handleMaxPagesSize}>\n          <Text variant={TextVariantEnum.textBody2}>{t('user:show_more')}</Text>\n        </Button>\n      ) : (\n        <Box flexDirection='row' gap='16px' alignItems='center'>\n          {currentPage !== 1 && (\n            <Button\n              onlyIcon\n              type='button'\n              priority='tertiary'\n              onClick={onPrevious}\n              className='pagination__arrow'\n              style={{ cursor: 'pointer', width: '32px', height: '32px' }}\n            >\n              <Icon name={IconEnum.left} color={theme.accentTextColor} />\n            </Button>\n          )}\n          {paginationRange\n            ?.filter((page, index, array) => array.findIndex((p) => p.page === page.page) === index) // Убираем дубликаты\n            .map((pageNumber, index) => (\n              <Fragment key={`${pageNumber.page}_${pageNumber.token}`}>\n                {index === paginationRange.length - 1 &&\n                  paginationRange[index - 1]?.page !== pageNumber.page - 1 && <Box>...</Box>}\n                {pageNumber.token !== '' && ( // Добавлена проверка на пустой token\n                  <PageButton\n                    key={pageNumber.page}\n                    onClick={() => handlePageClick(pageNumber.page, pageNumber?.token)}\n                    disabled={currentPage === pageNumber.page}\n                    active={currentPage === pageNumber.page}\n                  >\n                    <Text variant={TextVariantEnum.textBody2medium}>{pageNumber.page}</Text>\n                  </PageButton>\n                )}\n                {pageNumber.page === 1 &&\n                  paginationRange[index + 1]?.page !== pageNumber.page + 1 && <Box>...</Box>}\n              </Fragment>\n            ))}\n          {currentPage !== maxPages && (\n            <Button\n              onlyIcon\n              type='button'\n              priority='tertiary'\n              onClick={onNext}\n              className='pagination__arrow'\n              style={{\n                cursor: 'pointer',\n                width: '32px',\n                height: '32px',\n              }}\n            >\n              <Icon name={IconEnum.rightLine} color={theme.accentTextColor} />\n            </Button>\n          )}\n        </Box>\n      )}\n    </BoxPagination>\n  ) : null;\n}\n", "import { styled } from 'styled-components';\n\nexport const BoxPagination = styled.div`\n  width: 100%;\n  display: flex;\n  /* align-items: center; */\n  justify-content: center;\n  max-width: 920px;\n  margin-bottom: 16px;\n  flex-direction: row;\n  gap: 16px;\n\n  @media (min-width: 1024px) {\n    margin-bottom: 24px;\n    gap: 24px;\n  }\n  @media (min-width: 1280px) {\n    max-width: 100%;\n  }\n\n  .pagination__arrow {\n    background-color: ${({ theme }) => theme.pagination.backgroundArrowColor};\n  }\n`;\n\nexport const PageButton = styled.button<{ active: boolean }>`\n  cursor: ${({ active }) => (active ? 'auto' : 'pointer')};\n  transition: all 0.2s cubic-bezier(0.2, 0, 0, 1);\n  display: flex;\n  width: 32px;\n  height: 32px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n  border-radius: 50%;\n  border: 1px solid\n    ${({ theme, active }) =>\n      active ? theme.pagination.activeBorderColor : theme.pagination.borderColor};\n  background-color: ${({ theme, active }) => active && theme.pagination.backgroundActiveColor};\n\n  span {\n    color: ${({ active }) => active && '#FFF'};\n    margin-top: 2px;\n    margin-right: 1px;\n  }\n\n  &:hover {\n    border: 1px solid\n      ${({ theme, active }) =>\n        active ? theme.pagination.activeBorderColor : theme.pagination.borderColor};\n    background-color: ${({ theme, active }) =>\n      active ? theme.pagination.backgroundActiveColor : theme.pagination.backgroundHoverColor};\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA,mBAA8C;;;ACEvC,IAAM,gBAAgB,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAmBZ,CAAC,EAAE,MAAM,MAAM,MAAM,WAAW;AAAA;AAAA;AAIjD,IAAM,aAAa,sCAAO;AAAA,YACrB,CAAC,EAAE,OAAO,MAAO,SAAS,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWzC,CAAC,EAAE,OAAO,OAAO,MACjB,SAAS,MAAM,WAAW,oBAAoB,MAAM,WAAW;AAAA,sBAC/C,CAAC,EAAE,OAAO,OAAO,MAAM,UAAU,MAAM,WAAW;AAAA;AAAA;AAAA,aAG3D,CAAC,EAAE,OAAO,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAO/B,CAAC,EAAE,OAAO,OAAO,MACjB,SAAS,MAAM,WAAW,oBAAoB,MAAM,WAAW;AAAA,wBAC/C,CAAC,EAAE,OAAO,OAAO,MACnC,SAAS,MAAM,WAAW,wBAAwB,MAAM,WAAW;AAAA;AAAA;;;ADuC/D;AA9EH,SAASA,WAAW;EACzBC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AAaF,GAAG;AACD,QAAM;IAAEC;IAAOC;EAAE,IAAIC,OAAO;AAC5B,QAAM,CAACC,kBAAkBC,mBAAmB,QAAIC,uBAAS,KAAK;AAE9D,QAAMC,SAASA,MAAM;AACnB,UAAMC,QAAQjB,iBAAiBkB,KAAMC,UAASA,KAAKC,SAASrB,cAAc,CAAC,GAAGkB;AAC9Ed,mBAAe,CAACJ,cAAc,CAAC;AAC/BG,oBAAgBe,KAAK;AACrB,QAAIT,wBAAwBC,mBAAmB;AAC7CD,2BAAqB,KAAK;IAC5B;EACF;AAEA,QAAMa,aAAaA,MAAM;AACvB,UAAMJ,QAAQjB,iBAAiBkB,KAAMC,UAASA,KAAKC,SAASrB,cAAc,CAAC,GAAGkB;AAC9Ed,mBAAe,CAACJ,cAAc,CAAC;AAC/BG,oBAAgBe,KAAK;AACrB,QAAIT,wBAAwBC,mBAAmB;AAC7CD,2BAAqB,KAAK;IAC5B;EACF;AAEA,QAAMc,kBAAkBA,CAACC,YAAoBN,UAAmB;AAC9Df,oBAAgBe,KAAK;AACrBd,mBAAeoB,UAAU;AACzB,QAAIf,wBAAwBC,mBAAmB;AAC7CD,2BAAqB,KAAK;IAC5B;EACF;AAEA,QAAMgB,qBAAqBA,MAAM;AAC/BnB,mBAAe,EAAEC,eAAe,KAAK,EAAE;EACzC;AAEAmB,8BAAU,MAAM;AACd,QAAIZ,oBAAoBT,cAAc;AACpC,UAAI,CAACK,mBAAmB;AACtBL,qBAAa,IAAI;MACnB;IACF,OAAO;AACLU,0BAAoB,IAAI;IAC1B;EACF,GAAG,CAACf,WAAW,CAAC;AAEhB0B,8BAAU,MAAM;AACd,QAAIrB,gBAAgBE,eAAe,CAACA,gBAAgB,IAAI;AACtDF,mBAAa;IACf;EACF,GAAG,CAACE,WAAW,CAAC;AAEhB,SAAOL,YAAYA,WAAW,IAC5B,mDAAC,iBACEM,yBAAeA,cAAc,OAC5B,mDAAC,kBAAO,UAAS,aAAY,SAASiB,oBACpC,6DAAC,QAAK,SAASE,gBAAgBC,WAAYhB,YAAE,gBAAgB,KAA7D;;;;SAA+D,KADjE;;;;SAEA,IAEA,mDAAC,OAAI,eAAc,OAAM,KAAI,QAAO,YAAW,UAC5CZ;oBAAgB,KACf,mDAAC,kBACC,UAAQ,MACR,MAAK,UACL,UAAS,YACT,SAASsB,YACT,WAAU,qBACV,OAAO;MAAEO,QAAQ;MAAWC,OAAO;MAAQC,QAAQ;IAAO,GAE1D,6DAAC,QAAK,MAAMC,SAASC,MAAM,OAAOtB,MAAMuB,mBAAxC;;;;WAAwD,KAR1D;;;;WASA;IAEDjC,iBACGkC,OAAO,CAACd,MAAMe,OAAOC,UAAUA,MAAMC,UAAWC,OAAMA,EAAElB,SAASA,KAAKA,IAAI,MAAMe,KAAK,EACtFI,IAAI,CAAChB,YAAYY,UAChB,mDAAC,yBACEA;gBAAUnC,gBAAgBwC,SAAS,KAClCxC,gBAAgBmC,QAAQ,CAAC,GAAGf,SAASG,WAAWH,OAAO,KAAK,mDAAC,OAAI,mBAAL;;;;aAAQ;MACrEG,WAAWN,UAAU;MACpB,mDAAC,cAEC,SAAS,MAAMK,gBAAgBC,WAAWH,MAAMG,YAAYN,KAAK,GACjE,UAAUlB,gBAAgBwB,WAAWH,MACrC,QAAQrB,gBAAgBwB,WAAWH,MAEnC,6DAAC,QAAK,SAASM,gBAAgBe,iBAAkBlB,qBAAWH,QAA5D;;;;aAAiE,KAL5DG,WAAWH,MADlB;;;;aAOA;MAEDG,WAAWH,SAAS,KACnBpB,gBAAgBmC,QAAQ,CAAC,GAAGf,SAASG,WAAWH,OAAO,KAAK,mDAAC,OAAI,mBAAL;;;;aAAQ;SAdxD,GAAEG,WAAWH,QAAQG,WAAWN,SAAhD;;;;WAeA,CACD;IACFlB,gBAAgBE,YACf,mDAAC,kBACC,UAAQ,MACR,MAAK,UACL,UAAS,YACT,SAASe,QACT,WAAU,qBACV,OAAO;MACLY,QAAQ;MACRC,OAAO;MACPC,QAAQ;IACV,GAEA,6DAAC,QAAK,MAAMC,SAASW,WAAW,OAAOhC,MAAMuB,mBAA7C;;;;WAA6D,KAZ/D;;;;WAaA;OA/CJ;;;;SAiDA,KAvDJ;;;;SAyDA,IACE;AACN;",
  "names": ["Pagination", "currentPage", "paginationRange", "maxPages", "setCurrentToken", "setCurrentPage", "handleSubmit", "setMaxPageSize", "maxPageSize", "widthScreen", "setCheckChangeSearch", "checkChangeSearch", "theme", "t", "useApp", "initialRendering", "setInitialRendering", "useState", "onNext", "token", "find", "item", "page", "onPrevious", "handlePageClick", "pageNumber", "handleMaxPagesSize", "useEffect", "TextVariantEnum", "textBody2", "cursor", "width", "height", "IconEnum", "left", "accentTextColor", "filter", "index", "array", "findIndex", "p", "map", "length", "textBody2medium", "rightLine"]
}
