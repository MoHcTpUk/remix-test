{
  "version": 3,
  "sources": ["../../../app/components/pages/Search/Companies/Company/index.tsx", "../../../app/components/pages/Search/Companies/Company/styles.ts"],
  "sourcesContent": ["import { useLocation } from '@remix-run/react';\nimport { useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { CompanyFullCardWidget } from '~/components/entities/cardWidgets';\nimport ModalShare from '~/components/entities/ModalShare';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { CLIENT_BASE_URL } from '~/utils/constants';\n\nimport SignInForRequest from '../../SignInForRequest';\nimport { SearchVacanciesComponent } from '../../Vacancies';\nimport { BoxSearchCompany } from './styles';\n\nexport default function CompanySearchCard({\n  vacancies,\n  company,\n  dictionaries,\n}: {\n  vacancies?: Vacancy[] | null;\n  company?: Company;\n  dictionaries?: IDictionaries;\n}) {\n  const { userContext } = useApp();\n  const location = useLocation();\n  const widthScreen = useScreenWidth();\n  const [visibleShare, setVisibleShare] = useState(false);\n\n  return (\n    <BoxSearchCompany>\n      <CompanyFullCardWidget company={company} variant={PageVariantEnum.search} />\n\n      {!userContext?.user?.isAuthenticated && widthScreen < 1280 && (\n        <SignInForRequest variant='vacancy' />\n      )}\n\n      <ModalShare\n        link={`${CLIENT_BASE_URL}${location.pathname}/${company?.id || ''}`}\n        visibility={visibleShare}\n        setVisibility={setVisibleShare}\n      />\n      {vacancies && <SearchVacanciesComponent vacancies={vacancies} dictionaries={dictionaries} />}\n    </BoxSearchCompany>\n  );\n}\n", "import { styled } from 'styled-components';\n\nexport const BoxControl = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-top: 1px solid ${({ theme }) => theme.user.borderColor};\n\n  form {\n    align-items: center;\n    padding-top: 16px;\n  }\n\n  @media (min-width: 768px) {\n    align-items: flex-end;\n\n    form {\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-end;\n      align-items: center;\n      width: 100%;\n      align-items: flex-end;\n    }\n  }\n\n  @media (min-width: 1280px) {\n    .requestCard {\n      justify-content: center;\n    }\n  }\n`;\n\nexport const BoxSearchCompany = styled.div`\n  gap: 16px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  position: sticky;\n  align-items: center;\n  min-height: 100%;\n  justify-content: center;\n  @media (min-width: 1024px) {\n    gap: 24px;\n  }\n  @media (min-width: 1280px) {\n    min-height: 100%;\n    position: sticky;\n    top: 0;\n    /* overflow: hidden; */\n    justify-content: flex-start;\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAAA,gBAAyB;;;ACClB,IAAM,aAAa,sCAAO;AAAA;AAAA;AAAA;AAAA,0BAIP,CAAC,EAAE,MAAM,MAAM,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2B7C,IAAM,mBAAmB,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ADDjC;AAhBS,SAAf,kBAA0C;EACxCC;EACAC;EACAC;AAKF,GAAG;AACD,QAAM;IAAEC;EAAY,IAAIC,OAAO;AAC/B,QAAMC,WAAWC,YAAY;AAC7B,QAAMC,cAAcC,eAAe;AACnC,QAAM,CAACC,cAAcC,eAAe,QAAIC,wBAAS,KAAK;AAEtD,SACE,mDAAC,oBACC;uDAAC,yBAAsB,SAAkB,SAASC,gBAAgBC,UAAlE;;;;WAAyE;IAExE,CAACV,aAAaW,MAAMC,mBAAmBR,cAAc,QACpD,mDAAC,oBAAiB,SAAQ,aAA1B;;;;WAAmC;IAGrC,mDAAC,cACC,MAAO,GAAES,kBAAkBX,SAASY,YAAYhB,SAASiB,MAAM,MAC/D,YAAYT,cACZ,eAAeC,mBAHjB;;;;WAGiC;IAEhCV,aAAa,mDAAC,4BAAyB,WAAsB,gBAAhD;;;;WAA2E;OAZ3F;;;;SAaA;AAEJ;",
  "names": ["import_react", "vacancies", "company", "dictionaries", "userContext", "useApp", "location", "useLocation", "widthScreen", "useScreenWidth", "visibleShare", "setVisibleShare", "useState", "PageVariantEnum", "search", "user", "isAuthenticated", "CLIENT_BASE_URL", "pathname", "id"]
}
