{
  "version": 3,
  "sources": ["../../../app/components/pages/User/Resumes/Resume/components/ResumeAdditionalInformation/ResumeAdditionalInformationEdit.tsx", "../../../app/components/pages/User/Resumes/Resume/components/ResumeEducation/ResumeEducationEdit.tsx", "../../../app/components/pages/User/Resumes/Resume/components/ResumeInformation/ResumeInformationEdit.tsx", "../../../app/components/pages/User/Resumes/Resume/components/ResumeInformation/styles.ts", "../../../app/components/pages/User/Resumes/Resume/components/ResumeJobPosition/ResumeJobPositionEdit.tsx", "../../../app/components/pages/User/Resumes/Resume/components/ResumeLocation/ResumeLocationEdit.tsx", "../../../app/components/pages/User/Resumes/Resume/components/ResumeSettings/ResumeSettingsEdit.tsx", "../../../app/components/pages/User/Resumes/Resume/components/ResumeWorkExperience/ResumeWorkExperienceEdit.tsx", "../../../app/components/pages/User/Resumes/Resume/styles.ts"],
  "sourcesContent": ["import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { useState } from 'react';\nimport type { Language, Resume } from 'shared/v2/resumes';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxUserEditData } from '~/components/pages/User/MyProfile/components/Info/styles';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { FieldErrors } from '~/types/interfaces/IError';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers';\n\ninterface LanguagesFieldProps {\n  language: Language;\n  dictionaries?: IDictionaries;\n  index: number;\n  onChange: (index: number, updatedLanguage: Language) => void;\n  onDelete: (index: number) => void;\n}\n\nfunction LanguageForm({ language, dictionaries, index, onChange, onDelete }: LanguagesFieldProps) {\n  const { t, theme, userContext } = useApp();\n\n  const handleChange = (updatedLanguage: Language) => {\n    onChange(index, updatedLanguage);\n  };\n\n  const handleDelete = () => {\n    onDelete(index);\n  };\n\n  return (\n    <Box\n      width='100%'\n      flexDirection='column'\n      gap='24px'\n      style={{\n        borderBottom: `1px solid ${theme.user.borderColor}`,\n        paddingBottom: '24px',\n      }}\n    >\n      <Select\n        entries={extractTitles(dictionaries?.languages, userContext.language)}\n        placeholder={t('user:language')}\n        id='language_id'\n        name='language_id'\n        values={[language?.language_id || '']}\n        onChange={(value) => handleChange({ ...language, language_id: value })}\n      />\n      <Select\n        entries={extractTitles(dictionaries?.languageLevel, userContext.language)}\n        placeholder={t('user:proficiency_level')}\n        id='proficiency_level_id'\n        name='proficiency_level_id'\n        variant='search-single'\n        values={[language?.proficiency_level_id || '']}\n        onChange={(value) => handleChange({ ...language, proficiency_level_id: value })}\n      />\n\n      <Button onClick={handleDelete} priority='secondary' fullwidth>\n        <Text variant={TextVariantEnum.textBody2}>{t('common:delete')}</Text>\n      </Button>\n    </Box>\n  );\n}\n\nexport default function ResumeAdditionalinformationEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard?: ResumeCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateResume;\n}) {\n  const { t, userContext } = useApp();\n\n  const langs: Language[] = [\n    {\n      language_id: '',\n      proficiency_level_id: '',\n    },\n  ];\n\n  const [languages, setLanguages] = useState(resume?.additional_information?.languages || langs);\n\n  const handleAddLangsClick = () => {\n    setLanguages((prevLanguages) => [\n      ...prevLanguages,\n      {\n        language_id: '',\n        proficiency_level_id: '',\n      },\n    ]);\n  };\n\n  const handleDeleteLanguage = (index: number) => {\n    setLanguages((prevLanguages) => prevLanguages.filter((_, i) => i !== index));\n  };\n\n  const handleLanguageChange = (index: number, updatedLanguage: Language) => {\n    const updatedLanguages = [...languages];\n    updatedLanguages[index] = updatedLanguage;\n    setLanguages(updatedLanguages);\n  };\n\n  const staticFields = () => (\n    <>\n      <Select\n        entries={extractTitles(dictionaries?.skills, userContext.language)}\n        placeholder={t('user:skills')}\n        id='skill_ids'\n        name='skill_ids'\n        variant='search-multi'\n        values={resume?.additional_information?.skill_ids}\n        errorText={actionData?.fieldErrors?.skill_ids?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.drivingLicenses, userContext.language)}\n        placeholder={t('user:driver_license')}\n        id='driver_license'\n        name='driver_license_ids'\n        variant='search-multi'\n        values={resume?.additional_information?.driver_license_ids}\n        errorText={actionData?.fieldErrors?.driver_license_ids?.[userContext.language]}\n      />\n\n      <Input\n        placeholder={t('user:other_licenses')}\n        value={resume?.additional_information?.other_license}\n        id='other_licenses'\n        name='other_license'\n        errorText={actionData?.fieldErrors?.other_license?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.religions, userContext.language)}\n        placeholder={t('user:religion')}\n        id='religion'\n        name='religion_id'\n        values={[resume?.additional_information?.religion_id || '']}\n        errorText={actionData?.fieldErrors?.religion_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.maritalStatuses, userContext.language)}\n        placeholder={t('user:marital_status')}\n        id='marital_status'\n        name='marital_status_id'\n        values={[resume?.additional_information?.marital_status_id || '']}\n        errorText={actionData?.fieldErrors?.marital_status_id?.[userContext.language]}\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.citizenship, userContext.language)}\n        placeholder={t('user:citizenship')}\n        id='citizenship'\n        name='citizenship_id'\n        values={[resume?.additional_information?.citizenship_id || '']}\n        errorText={actionData?.fieldErrors?.citizenship_id?.[userContext.language]}\n      />\n    </>\n  );\n\n  return (\n    <BoxCard\n      title={t('user:additional_information')}\n      withEditButton\n      nameCard={ResumeCardEnum.additionalInformation}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={7}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxUserEditData>\n          <input name='nameCard' type='hidden' value='additional_information' />\n\n          <BoxFields>\n            {languages?.map((language, index) => {\n              const key = `education-${index}`;\n              return (\n                <LanguageForm\n                  key={key}\n                  index={index}\n                  language={language}\n                  dictionaries={dictionaries}\n                  onChange={handleLanguageChange}\n                  onDelete={handleDeleteLanguage}\n                />\n              );\n            })}\n            <Button onClick={handleAddLangsClick} priority='secondary' fullwidth>\n              <Text variant={TextVariantEnum.textBody2}>{t('user:add_language')}</Text>\n            </Button>\n            {staticFields()}\n          </BoxFields>\n        </BoxUserEditData>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { useEffect, useState } from 'react';\nimport type { MultiLingualValue } from 'shared/client/dictionary-contracts';\nimport type { Education, MultiDateValue, Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { CheckBox } from '~/components/common/Checkbox';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DatePicker } from '~/components/entities/DatePicker';\nimport { BoxUserEditData } from '~/components/pages/User/MyProfile/components/Info/styles';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useGetPositionFromSpecialization } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { FieldError, IUpdateResume } from '~/types/interfaces/iForms';\nimport { extractTitles, getValueLang } from '~/utils/helpers';\n\ninterface ExtendedEducation extends Omit<Education, 'from' | 'to'> {\n  start_year?: string | MultiLingualValue | MultiDateValue | undefined;\n  end_year?: string | MultiLingualValue | MultiDateValue | undefined;\n  present?: boolean;\n}\n\ninterface EducationFormFieldProps {\n  educationExperience: ExtendedEducation;\n  dictionaries?: IDictionaries;\n  index: number;\n  onChange: (index: number, updatedEducation: ExtendedEducation) => void;\n  onDelete: (index: number) => void;\n  actionData?: IUpdateResume;\n}\n\nfunction EducationForm({\n  educationExperience,\n  dictionaries,\n  index,\n  onChange,\n  onDelete,\n  actionData,\n}: EducationFormFieldProps) {\n  const { t, theme, userContext } = useApp();\n\n  const handleChange = (updatedEducation: ExtendedEducation) => {\n    onChange(index, updatedEducation);\n  };\n\n  const handleDelete = () => {\n    onDelete(index);\n  };\n\n  const { entriesPositions, setSpecializationState, position, specializationState } =\n    useGetPositionFromSpecialization(\n      educationExperience?.specialization_id,\n      educationExperience?.position,\n    );\n\n  useEffect(() => {\n    if (!educationExperience.end_year === true) {\n      handleChange({ ...educationExperience, end_year: undefined });\n    }\n  }, [educationExperience.present]);\n\n  useEffect(() => {\n    if (!educationExperience?.end_year) {\n      handleChange({ ...educationExperience, present: true });\n    }\n  }, [educationExperience?.end_year]);\n\n  return (\n    <Box\n      width='100%'\n      flexDirection='column'\n      gap='24px'\n      style={{\n        borderBottom: `1px solid ${theme.user.borderColor}`,\n        paddingBottom: '24px',\n      }}\n    >\n      <Select\n        entries={extractTitles(dictionaries?.educationLevel, userContext.language)}\n        placeholder={t('user:education_level')}\n        id='education_level_id'\n        name='education_level_id'\n        values={[educationExperience.education_level_id || '']}\n        onChange={(value) => handleChange({ ...educationExperience, education_level_id: value })}\n        errorText={actionData?.fieldErrors?.education_level_id?.[userContext.language]}\n      />\n      <Input\n        placeholder={t('user:institution')}\n        id='institution'\n        name='institution'\n        value={educationExperience.institution}\n        onChange={(value) => handleChange({ ...educationExperience, institution: value })}\n        errorText={\n          (actionData?.fieldErrors?.institution as FieldError | undefined)?.[`${index}`]?.[\n            userContext.language\n          ]\n        }\n      />\n\n      <Select\n        entries={extractTitles(dictionaries?.specializations, userContext.language)}\n        placeholder={t('user:specialization')}\n        id='specialization'\n        name='specialization_id'\n        setExternalState={setSpecializationState}\n        values={specializationState}\n        variant='search-single'\n        onChange={(value) => handleChange({ ...educationExperience, specialization_id: value })}\n        errorText={actionData?.fieldErrors?.specialization_id?.[userContext.language]}\n      />\n\n      <Select\n        placeholder={t('user:position')}\n        id='position'\n        name='position'\n        externalState={[position || '']}\n        values={[educationExperience.position || '']}\n        entries={entriesPositions}\n        variant='single-text'\n        onChange={(value) => handleChange({ ...educationExperience, position: value })}\n        errorText={\n          (actionData?.fieldErrors?.position as FieldError | undefined)?.[`${index}`]?.[\n            userContext.language\n          ]\n        }\n        disabled={!specializationState[0]}\n      />\n\n      <DatePicker\n        name='date'\n        nameYear='start_year'\n        variant='year'\n        defaultYear={\n          typeof educationExperience.start_year === 'string'\n            ? educationExperience.start_year\n            : getValueLang(educationExperience.start_year, userContext.language)\n        }\n        placeholderYear={t('user:start_year')}\n        onChange={(value) => handleChange({ ...educationExperience, start_year: value })}\n        externalStartDateLimit={getValueLang(userContext.user.birthday, userContext.language)}\n      />\n\n      <CheckBox\n        name='present_time'\n        label={t('user:present_time')}\n        checked={Boolean(educationExperience?.present) || !educationExperience.end_year}\n        onChange={(value) => {\n          handleChange({\n            ...educationExperience,\n            present: Boolean(value),\n            end_year: undefined,\n          });\n        }}\n      />\n\n      <Box width='100%' style={{ display: educationExperience.present ? 'none' : 'flex' }}>\n        <DatePicker\n          name='date'\n          nameYear='end_year'\n          variant='year'\n          defaultYear={\n            typeof educationExperience.end_year === 'string'\n              ? educationExperience.end_year\n              : getValueLang(educationExperience.end_year, userContext.language)\n          }\n          placeholderYear={t('user:end_year')}\n          onChange={(value) => {\n            handleChange({ ...educationExperience, end_year: value });\n          }}\n          externalStartDateLimit={\n            typeof educationExperience.start_year === 'string'\n              ? educationExperience.start_year\n              : getValueLang(educationExperience.start_year, userContext.language)\n          }\n          disabled={!educationExperience.start_year || educationExperience.present}\n        />\n      </Box>\n      {educationExperience.present && <input type='hidden' name='end_year' value='' />}\n\n      {/* Delete button */}\n      <Button onClick={handleDelete} priority='secondary' fullwidth>\n        <Text variant={TextVariantEnum.textBody2}>{t('common:delete')}</Text>\n      </Button>\n    </Box>\n  );\n}\n\nexport default function ResumeEducationEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard?: ResumeCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateResume;\n}) {\n  const { t, theme } = useApp();\n\n  const educations: ExtendedEducation[] = [\n    {\n      education_level_id: '',\n      institution: '',\n      specialization_id: '',\n      position: '',\n      start_year: '',\n      end_year: '',\n      present: false,\n    },\n  ];\n\n  const [educationExperiences, setEducationExperiences] = useState(resume?.education || educations);\n\n  const handleAddEducationClick = () => {\n    setEducationExperiences((prevExperiences) => [\n      ...prevExperiences,\n      {\n        education_level_id: '',\n        institution: '',\n        specialization_id: '',\n        position: '',\n        start_year: '',\n        end_year: '',\n        present: false,\n      },\n    ]);\n  };\n\n  const handleDeleteEducation = (index: number) => {\n    setEducationExperiences((prevExperiences) =>\n      (prevExperiences as ExtendedEducation[]).filter((_, i) => i !== index),\n    );\n  };\n\n  const handleEducationChange = (index: number, updatedEducation: ExtendedEducation) => {\n    const updatedExperiences = [...educationExperiences];\n    updatedExperiences[index] = updatedEducation;\n    setEducationExperiences(updatedExperiences);\n  };\n\n  return (\n    <BoxCard\n      title={t('user:education')}\n      withEditButton\n      nameCard={ResumeCardEnum.education}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      step={step}\n      state={state}\n      maxStep={7}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <input name='nameCard' type='hidden' value='education' />\n        <BoxUserEditData>\n          <BoxFields>\n            {educationExperiences?.map((education, index) => {\n              const key = `education-${index}`;\n              return (\n                <EducationForm\n                  key={key}\n                  index={index}\n                  educationExperience={education as ExtendedEducation}\n                  dictionaries={dictionaries}\n                  onChange={handleEducationChange}\n                  onDelete={handleDeleteEducation}\n                  actionData={actionData}\n                />\n              );\n            })}\n            <Button onClick={handleAddEducationClick} priority='secondary' fullwidth>\n              <Text variant={TextVariantEnum.textBody2}> {t('user:add_education')}</Text>\n            </Button>\n          </BoxFields>\n        </BoxUserEditData>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { useEffect, useState } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { MultiDateValue } from 'shared/v2/users';\n\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DatePicker } from '~/components/entities/DatePicker';\nimport { UploadingImageModal } from '~/components/entities/UploadingImageModal';\nimport { BoxUserEditData } from '~/components/pages/User/MyProfile/components/Info/styles';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { BoxAvatar } from '~/components/ui/Card/BoxAvatar';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\nimport { DEFAULT_USER_AVATAR } from '~/utils/constants';\nimport { extractTitles, extractTitlesNewWay, getImageUrl, getValueLang } from '~/utils/helpers';\n\nimport { BoxPicture, Image } from './styles';\n\nexport default function ResumeInformationEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard?: ResumeCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateResume;\n}) {\n  const { t, userContext, theme } = useApp();\n  const [photo, setPhoto] = useState(\n    resume?.general_information?.photo_uri\n      ? getImageUrl(resume?.general_information?.photo_uri)\n      : DEFAULT_USER_AVATAR,\n  );\n  const [showUploader, setShowUploader] = useState(false);\n  const [errorTextForImage, setErrorTextForImage] = useState(false);\n\n  useEffect(() => {\n    if (\n      !photo?.startsWith('data:image/jpg') &&\n      !photo?.startsWith('data:image/jpeg') &&\n      !photo?.startsWith('https://api.test.upjob.com/m') &&\n      !photo?.startsWith('/images/user') &&\n      photo\n    ) {\n      setErrorTextForImage(true);\n    } else {\n      setErrorTextForImage(false);\n    }\n  }, [photo]);\n\n  return (\n    <BoxCard\n      title={t('user:personal_information')}\n      withEditButton\n      nameCard={ResumeCardEnum.information}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={7}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <input name='formName' type='hidden' value='general' />\n        <BoxUserEditData>\n          <input name='nameCard' type='hidden' value='general_information' />\n          <BoxPicture>\n            <Text variant={TextVariantEnum.textBody1medium}>{t('user:profile_picture')}</Text>\n            <BoxAvatar variant='user'>\n              <input type='hidden' name='logo' value={photo} />\n              <Image src={photo || DEFAULT_USER_AVATAR} alt='avatar' />\n              <Button\n                type='button'\n                priority='secondary'\n                onClick={() => setShowUploader(!showUploader)}\n              >\n                <Text variant={TextVariantEnum.textBody2}> {t('user:edit_photo')}</Text>\n              </Button>\n            </BoxAvatar>\n            {errorTextForImage && (\n              <Text variant={TextVariantEnum.textSmall} color={theme.errorTextColor}>\n                {t('user:image_type_must_be_jpeg')}\n              </Text>\n            )}\n            <UploadingImageModal\n              visibility={showUploader}\n              setVisibility={setShowUploader}\n              defaultImage={photo}\n              setDefaultImage={setPhoto}\n            />\n          </BoxPicture>\n          <BoxFields>\n            <Input\n              placeholder={t('user:first_name')}\n              id='firstName'\n              name='first_name'\n              value={resume?.general_information?.first_name || userContext.user.firstName}\n              errorText={actionData?.fieldErrors?.first_name?.[userContext.language]}\n            />\n            <Input\n              placeholder={t('user:last_name')}\n              id='lastName'\n              name='last_name'\n              value={resume?.general_information?.last_name || userContext.user.lastName}\n              errorText={actionData?.fieldErrors?.last_name?.[userContext.language]}\n            />\n            <Select\n              entries={extractTitles(dictionaries?.genders, userContext.language)}\n              placeholder={t('user:gender')}\n              id='gender'\n              name='gender_id'\n              values={[resume?.general_information?.gender_id || userContext.user.gender || '']}\n              errorText={actionData?.fieldErrors?.gender_id?.[userContext.language]}\n            />\n\n            <DatePicker\n              name='birthdate'\n              defaultDate={\n                getValueLang(resume?.general_information?.birthdate, userContext.language) ??\n                getValueLang(userContext.user.birthday, userContext.language)\n              }\n              placeholderDay={t('user:day_of_birth')}\n              placeholderMonth={t('user:month_of_birth')}\n              placeholderYear={t('user:year_of_birth')}\n            />\n            <Input\n              placeholder={t('user:email')}\n              id='email'\n              name='email'\n              value={resume?.general_information?.email || userContext.user.email}\n              errorText={actionData?.fieldErrors?.email?.[userContext.language]}\n            />\n            <Input\n              placeholder={t('user:phone')}\n              id='phone'\n              name='phone'\n              variant='phone'\n              value={resume?.general_information?.phone || userContext.user.phone}\n              errorText={actionData?.fieldErrors?.phone?.[userContext.language]}\n            />\n            <Select\n              entries={extractTitlesNewWay(dictionaries?.languagesOfNotify, userContext.language)}\n              placeholder={t('user:language_of_notify')}\n              id='primaryLanguage'\n              name='language_of_notify_id'\n              values={[resume?.general_information?.language_of_notify_id || '']}\n              errorText={actionData?.fieldErrors?.language_of_notify_id?.[userContext.language]}\n            />\n          </BoxFields>\n        </BoxUserEditData>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import styled from 'styled-components';\n\nexport const BoxPicture = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n`;\n\nexport const Image = styled.img`\n  width: 96px;\n  height: 96px;\n  object-fit: cover;\n  border-radius: 50%;\n  @media (min-width: 768px) {\n    width: 136px;\n    height: 136px;\n  }\n`;\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { BoxUserEditData } from '~/components/pages/User/MyProfile/components/Info/styles';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useGetPositionFromSpecialization } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers';\n\nexport default function ResumeJobPositionEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard?: ResumeCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateResume;\n}) {\n  const { t, userContext } = useApp();\n\n  const { entriesPositions, setSpecializationState, position, specializationState } =\n    useGetPositionFromSpecialization(\n      resume?.job_position?.specialization_id,\n      resume?.job_position?.position,\n    );\n\n  return (\n    <BoxCard\n      title={t('user:job_position')}\n      withEditButton\n      nameCard={ResumeCardEnum.jobPosition}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={7}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        id='growContainer'\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxUserEditData>\n          <BoxFields>\n            <input name='nameCard' type='hidden' value='job_position' />\n\n            <Select\n              entries={extractTitles(dictionaries?.specializations, userContext.language)}\n              placeholder={t('user:specialization')}\n              id='specialization'\n              name='specialization'\n              setExternalState={setSpecializationState}\n              values={specializationState}\n              variant='search-single'\n              errorText={actionData?.fieldErrors?.specialization_id?.[userContext.language]}\n            />\n            <Select\n              placeholder={t('user:position')}\n              id='position'\n              name='position'\n              externalState={[position || '']}\n              values={[position || '']}\n              entries={entriesPositions}\n              variant='single-text'\n              errorText={actionData?.fieldErrors?.position?.[userContext.language]}\n              disabled={!specializationState[0]}\n            />\n\n            <Select\n              entries={extractTitles(dictionaries?.employment, userContext.language)}\n              placeholder={t('user:employment')}\n              id='employment'\n              name='employment'\n              variant='multi'\n              values={resume?.job_position?.employment_type_ids}\n              errorText={actionData?.fieldErrors?.employment_type_ids?.[userContext.language]}\n            />\n            <Select\n              entries={extractTitles(dictionaries?.workfeatures, userContext.language)}\n              placeholder={t('user:work_features')}\n              id='i_work_features'\n              name='work_feature_ids'\n              values={resume?.job_position?.work_feature_ids}\n              variant='multi'\n              errorText={actionData?.fieldErrors?.work_feature_ids?.[userContext.language]}\n            />\n            <Select\n              entries={extractTitles(dictionaries?.payoutPeriods, userContext.language)}\n              placeholder={t('user:salary_payout_period')}\n              id='i_salary_payout_period'\n              name='salary_payout_period_id'\n              values={[resume?.job_position?.salary_payout_period_id || '']}\n              errorText={actionData?.fieldErrors?.salary_payout_period_id?.[userContext.language]}\n            />\n            <Input\n              placeholder={t('user:salary_fixed')}\n              id='fixed'\n              name='salary_fixed'\n              value={resume?.job_position?.salary_fixed?.toFixed()}\n              onlyNumber\n              errorText={actionData?.fieldErrors?.salary_payout_period_id?.[userContext.language]}\n            />\n            <Input\n              placeholder={t('user:from')}\n              id='from'\n              name='salary_from'\n              value={resume?.job_position?.salary_from?.toFixed()}\n              onlyNumber\n              errorText={actionData?.fieldErrors?.salary_from?.[userContext.language]}\n            />\n            <Input\n              placeholder={t('user:to')}\n              id='to'\n              name='salary_to'\n              value={resume?.job_position?.salary_to?.toFixed()}\n              onlyNumber\n              errorText={actionData?.fieldErrors?.salary_to?.[userContext.language]}\n            />\n\n            <Select\n              entries={extractTitles(dictionaries?.currency, userContext.language)}\n              placeholder={t('user:currency')}\n              id='i_currency'\n              name='currency_id'\n              values={[resume?.job_position?.currency_id || '']}\n              errorText={actionData?.fieldErrors?.currency_id?.[userContext.language]}\n            />\n            <Input\n              variant='textarea'\n              placeholder={t('user:description')}\n              id='i_description'\n              name='description'\n              value={resume?.job_position?.description}\n              errorText={actionData?.fieldErrors?.description?.[userContext.language]}\n            />\n          </BoxFields>\n        </BoxUserEditData>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { CheckBox } from '~/components/common/Checkbox';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { BoxUserEditData } from '~/components/pages/User/MyProfile/components/Info/styles';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useGetLocation } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers';\n\nexport default function ResumeLocationEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard?: ResumeCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateResume;\n}) {\n  const { t, userContext } = useApp();\n\n  const {\n    entriesRegions,\n    setNewContry,\n    newRegion,\n    setNewRegion,\n    newCountry,\n    newCity,\n    setNewCity,\n    newEntriesCity,\n  } = useGetLocation(\n    resume?.location?.country_id,\n    resume?.location?.region_id,\n    resume?.location?.city_id,\n    dictionaries?.location,\n  );\n\n  return (\n    <BoxCard\n      title={t('user:location')}\n      withEditButton\n      nameCard={ResumeCardEnum.location}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={7}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <BoxUserEditData>\n          <BoxFields>\n            <input name='nameCard' type='hidden' value='location' />\n\n            <Select\n              entries={extractTitles(dictionaries?.countries, userContext.language)}\n              placeholder={t('user:country')}\n              id='country'\n              name='country_id'\n              values={newCountry}\n              setExternalState={setNewContry}\n              variant='search-single'\n              errorText={actionData?.fieldErrors?.country_id?.[userContext.language]}\n            />\n            <Select\n              entries={extractTitles(entriesRegions, userContext.language)}\n              setExternalState={setNewRegion}\n              values={newRegion}\n              placeholder={t('user:province')}\n              id='region'\n              name='region_id'\n              variant='search-single'\n              errorText={actionData?.fieldErrors?.region_id?.[userContext.language]}\n              disabled={!entriesRegions || !entriesRegions?.length}\n            />\n            <Select\n              entries={extractTitles(newEntriesCity, userContext.language)}\n              values={newCity}\n              setExternalState={setNewCity}\n              placeholder={t('user:district')}\n              id='i_city'\n              name='city_id'\n              variant='search-single'\n              errorText={actionData?.fieldErrors?.city_id?.[userContext.language]}\n            />\n\n            <Input\n              placeholder={t('user:address')}\n              id='address'\n              name='address'\n              value={resume?.location?.address}\n              errorText={actionData?.fieldErrors?.address?.[userContext.language]}\n            />\n            <Select\n              entries={extractTitles(dictionaries?.sources, userContext.language)}\n              values={[resume?.location?.source_id || '']}\n              placeholder={t('user:source')}\n              id='i_source'\n              name='source_id'\n              variant='search-single'\n              errorText={actionData?.fieldErrors?.source_id?.[userContext.language]}\n            />\n            <Select\n              entries={extractTitles(dictionaries?.relocations, userContext.language)}\n              placeholder={t('user:relocation')}\n              id='i_relocation'\n              name='relocation_id'\n              values={[resume?.location?.relocation_id || '']}\n              errorText={actionData?.fieldErrors?.relocation_id?.[userContext.language]}\n            />\n            <CheckBox\n              name='business_trips'\n              label={t('user:business_trips')}\n              checked={Boolean(resume?.location?.business_trips)}\n              id='id_business_trips'\n              value={resume?.location?.business_trips?.toString()}\n            />\n          </BoxFields>\n        </BoxUserEditData>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { type Resume, SettingsEmailNotificationsEnum } from 'shared/v2/resumes';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Select } from '~/components/common/Select';\nimport { Switcher } from '~/components/common/Switcher';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\nimport { extractTitles } from '~/utils/helpers';\n\nimport { BoxSetting, Wrapper } from './styles';\n\nexport default function ResumeSettingsEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard?: ResumeCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateResume;\n}) {\n  const { t } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:settings')}\n      withEditButton\n      nameCard={ResumeCardEnum.settings}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={7}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <input name='nameCard' type='hidden' value='settings' />\n        <Wrapper>\n          <BoxSetting>\n            <Text variant={TextVariantEnum.textBody2medium}>{t('user:show_resume_to')}</Text>\n            <Switcher\n              checked={resume?.settings?.show_resume_to === 'anyone'}\n              value={(resume?.settings?.show_resume_to === 'anyone').toString()}\n              htmlLabel='i_show_phone'\n              name='show_resume_to'\n              variant='default'\n              checkedLabel={t('user:anyone')}\n              unCheckedLabel={t('user:nobody')}\n            />\n          </BoxSetting>\n\n          <BoxSetting>\n            <Text variant={TextVariantEnum.textBody2medium}>{t('user:show_phone_number_to')}</Text>\n            <Switcher\n              checked={resume?.settings?.show_phone_number_to === 'anyone'}\n              value={(resume?.settings?.show_phone_number_to === 'anyone').toString()}\n              htmlLabel='show_phone_number_to'\n              name='show_phone_number_to'\n              variant='default'\n              checkedLabel={t('user:anyone')}\n              unCheckedLabel={t('user:nobody')}\n            />\n          </BoxSetting>\n\n          <BoxSetting>\n            <Text variant={TextVariantEnum.textBody2medium}>{t('user:show_email_to')}</Text>\n            <Switcher\n              checked={String(resume?.settings?.show_email_to) === 'anyone'}\n              value={String(resume?.settings?.show_email_to === 'anyone')}\n              htmlLabel='show_email_to'\n              name='show_email_to'\n              variant='default'\n              checkedLabel={t('user:anyone')}\n              unCheckedLabel={t('user:nobody')}\n            />\n          </BoxSetting>\n\n          <BoxSetting>\n            <Select\n              entries={[\n                ['response', t('user:each_response')],\n                ['never', t('user:do_not_send')],\n              ]}\n              placeholder={t('user:email_notifications')}\n              id='email_notifications'\n              name='email_notifications'\n              values={[resume?.settings?.email_notifications || '']}\n            />\n          </BoxSetting>\n        </Wrapper>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { useEffect, useState } from 'react';\nimport type { MultiDateValue, MultiLingualValue, Resume, WorkExperience } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { CheckBox } from '~/components/common/Checkbox';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DatePicker } from '~/components/entities/DatePicker';\nimport { BoxUserEditData } from '~/components/pages/User/MyProfile/components/Info/styles';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useGetPositionFromSpecialization } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { FieldError, IUpdateResume } from '~/types/interfaces/iForms';\nimport { extractTitles, getValueLang } from '~/utils/helpers';\n\ninterface ExtendedWorkExperience extends Omit<WorkExperience, 'from' | 'to'> {\n  from?: string | MultiLingualValue | MultiDateValue | undefined;\n  to?: string | MultiLingualValue | MultiDateValue | undefined;\n  present?: boolean;\n}\n\ninterface WorkExperienceFormFieldProps {\n  workExperience: ExtendedWorkExperience;\n  dictionaries?: IDictionaries;\n  index: number;\n  onChange: (index: number, updatedWorkExperience: ExtendedWorkExperience) => void;\n  onDelete: (index: number) => void;\n  actionData?: IUpdateResume;\n}\n\nfunction WorkExperienceForm({\n  workExperience,\n  dictionaries,\n  index,\n  onChange,\n  onDelete,\n  actionData,\n}: WorkExperienceFormFieldProps) {\n  const { t, theme, userContext } = useApp();\n\n  const handleChange = (updatedWorkExperience: ExtendedWorkExperience) => {\n    onChange(index, updatedWorkExperience);\n  };\n\n  const handleDelete = () => {\n    onDelete(index);\n  };\n\n  const { entriesPositions, setSpecializationState, position, specializationState } =\n    useGetPositionFromSpecialization(workExperience?.specialization_id, workExperience?.position);\n\n  useEffect(() => {\n    if (!workExperience.to === true) {\n      handleChange({ ...workExperience, to: undefined });\n    }\n  }, [workExperience.present]);\n\n  useEffect(() => {\n    if (!workExperience.to && !workExperience.present) {\n      handleChange({ ...workExperience, present: true });\n    }\n  }, [workExperience.to]);\n\n  return (\n    <Box\n      width='100%'\n      flexDirection='column'\n      gap='24px'\n      style={{ borderBottom: `1px solid ${theme.user.borderColor}`, paddingBottom: '24px' }}\n    >\n      <Select\n        entries={extractTitles(dictionaries?.specializations, userContext.language)}\n        placeholder={t('user:specialization')}\n        id='specialization'\n        name='specialization_id'\n        setExternalState={setSpecializationState}\n        values={specializationState}\n        variant='search-single'\n        onChange={(value) => handleChange({ ...workExperience, specialization_id: value })}\n        errorText={actionData?.fieldErrors?.specialization_id?.[userContext.language]}\n      />\n\n      <Select\n        placeholder={t('user:position')}\n        id='position'\n        name='position'\n        externalState={[position || '']}\n        values={[workExperience.position || '']}\n        entries={entriesPositions}\n        variant='single-text'\n        onChange={(value) => handleChange({ ...workExperience, position: value })}\n        errorText={\n          (actionData?.fieldErrors?.position as FieldError | undefined)?.[`${index}`]?.[\n            userContext.language\n          ]\n        }\n        disabled={!specializationState[0]}\n      />\n      <Input\n        placeholder={t('user:company')}\n        id='company'\n        name='company'\n        value={workExperience.company}\n        onChange={(value) => handleChange({ ...workExperience, company: value })}\n        errorText={\n          (actionData?.fieldErrors?.company as FieldError | undefined)?.[`${index}`]?.[\n            userContext.language\n          ]\n        }\n      />\n\n      <DatePicker\n        name='from'\n        variant='year-month'\n        defaultDate={\n          typeof workExperience.from === 'string'\n            ? workExperience.from\n            : getValueLang(workExperience.from as MultiLingualValue, userContext.language)\n        }\n        placeholderYear={t('user:year')}\n        placeholderMonth={t('user:month')}\n        onChange={(value) => handleChange({ ...workExperience, from: value })}\n        externalStartDateLimit={getValueLang(userContext.user.birthday, userContext.language)}\n      />\n\n      <CheckBox\n        name='present_time'\n        label={t('user:present_time')}\n        checked={Boolean(workExperience?.present) || !workExperience.to}\n        onChange={(value) => {\n          handleChange({ ...workExperience, present: Boolean(value), to: undefined });\n        }}\n      />\n\n      <Box width='100%' style={{ display: workExperience.present ? 'none' : 'flex' }}>\n        <DatePicker\n          name='to'\n          variant='year-month'\n          defaultDate={\n            typeof workExperience.to === 'string'\n              ? workExperience.to\n              : getValueLang(workExperience.to as MultiLingualValue, userContext.language)\n          }\n          placeholderYear={t('user:year')}\n          placeholderMonth={t('user:month')}\n          onChange={(value) => handleChange({ ...workExperience, to: value })}\n          externalStartDateLimit={\n            typeof workExperience.from === 'string'\n              ? workExperience.from\n              : getValueLang(workExperience.from as MultiLingualValue, userContext.language)\n          }\n          disabled={!workExperience.from || workExperience.present}\n        />\n      </Box>\n\n      <Input\n        variant='textarea'\n        placeholder={t('user:description')}\n        id='description'\n        name='description'\n        value={workExperience.description}\n        onChange={(value) => handleChange({ ...workExperience, description: value })}\n        errorText={\n          (actionData?.fieldErrors?.description as FieldError | undefined)?.[`${index}`]?.[\n            userContext.language\n          ]\n        }\n      />\n      {workExperience.present && <input type='hidden' name='to' value='' />}\n\n      {/* Delete button */}\n      <Button onClick={handleDelete} priority='secondary' fullwidth>\n        <Text variant={TextVariantEnum.textBody2}>{t('common:delete')}</Text>\n      </Button>\n    </Box>\n  );\n}\n\nexport default function ResumeWorkExperienceEdit({\n  editCard,\n  setEditCard,\n  state,\n  step,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard?: ResumeCardEnum;\n  setEditCard?: Dispatch<SetStateAction<string>>;\n  state?: StateCard;\n  step?: number;\n  actionData?: IUpdateResume;\n}) {\n  const { t, theme } = useApp();\n\n  const works: ExtendedWorkExperience[] = [\n    {\n      specialization_id: '',\n      position: '',\n      company: '',\n      from: '',\n      to: '',\n      description: '',\n      present: false,\n    },\n  ];\n\n  const [workExperiences, setWorkExperiences] = useState(resume?.work_experience || works);\n\n  const handleAddWorksClick = () => {\n    setWorkExperiences((prevExperiences) => [\n      ...prevExperiences,\n      {\n        specialization_id: '',\n        position: '',\n        company: '',\n        from: '',\n        to: '',\n        description: '',\n        present: false,\n      },\n    ]);\n  };\n\n  const handleDeleteWorkExperience = (index: number) => {\n    setWorkExperiences((prevExperiences) =>\n      (prevExperiences as ExtendedWorkExperience[]).filter((_, i) => i !== index),\n    );\n  };\n\n  const handleWorkExperienceChange = (\n    index: number,\n    updatedWorkExperience: ExtendedWorkExperience,\n  ) => {\n    const updatedExperiences = [...workExperiences];\n    updatedExperiences[index] = updatedWorkExperience;\n    setWorkExperiences(updatedExperiences);\n  };\n\n  return (\n    <BoxCard\n      title={t('user:work_experience')}\n      withEditButton\n      nameCard={ResumeCardEnum.workExperience}\n      editCard={editCard}\n      setEditCard={setEditCard}\n      state={state}\n      step={step}\n      maxStep={7}\n      variant={VariantCardEnum.editCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <input name='nameCard' type='hidden' value='work_experience' />\n        <BoxUserEditData>\n          <BoxFields>\n            {workExperiences?.map((workExperience, index) => {\n              const key = `workExperience-${index}`;\n              return (\n                <WorkExperienceForm\n                  key={key}\n                  index={index}\n                  workExperience={workExperience as ExtendedWorkExperience}\n                  dictionaries={dictionaries}\n                  onChange={handleWorkExperienceChange}\n                  onDelete={handleDeleteWorkExperience}\n                  actionData={actionData}\n                />\n              );\n            })}\n            <Button onClick={handleAddWorksClick} priority='secondary' fullwidth>\n              <Text variant={TextVariantEnum.textBody2}>{t('user:add_work_experience')}</Text>\n            </Button>\n          </BoxFields>\n        </BoxUserEditData>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import styled from 'styled-components';\n\nexport const BoxCustomData = styled.div`\n  padding: 8px 12px;\n  border-radius: 80px;\n  border: 1px solid ${({ theme }) => theme.user.borderColor};\n  height: 40px;\n  @media (min-width: 1024px) {\n    height: 44px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 16px;\n  @media (min-width: 1024px) {\n    gap: 24px;\n  }\n`;\n\nexport const EmploymentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 768px) {\n    padding: 8px 0;\n  }\n`;\n"],
  "mappings": "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",
  "names": ["LanguageForm", "language", "dictionaries", "index", "onChange", "onDelete", "t", "theme", "userContext", "useApp", "handleChange", "updatedLanguage", "handleDelete", "borderBottom", "user", "borderColor", "paddingBottom", "extractTitles", "languages", "language_id", "value", "languageLevel", "proficiency_level_id", "TextVariantEnum", "textBody2", "editCard", "setEditCard", "state", "step", "resume", "actionData", "langs", "setLanguages", "useState", "additional_information", "handleAddLangsClick", "prevLanguages", "handleDeleteLanguage", "filter", "_", "i", "handleLanguageChange", "updatedLanguages", "staticFields", "skills", "skill_ids", "fieldErrors", "drivingLicenses", "driver_license_ids", "other_license", "religions", "religion_id", "maritalStatuses", "marital_status_id", "citizenship", "citizenship_id", "ResumeCardEnum", "additionalInformation", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "map", "key", "import_react", "import_jsx_dev_runtime", "EducationForm", "educationExperience", "dictionaries", "index", "onChange", "onDelete", "actionData", "t", "theme", "userContext", "useApp", "handleChange", "updatedEducation", "handleDelete", "entriesPositions", "setSpecializationState", "position", "specializationState", "useGetPositionFromSpecialization", "specialization_id", "useEffect", "end_year", "undefined", "present", "borderBottom", "user", "borderColor", "paddingBottom", "extractTitles", "educationLevel", "language", "education_level_id", "value", "fieldErrors", "institution", "specializations", "start_year", "getValueLang", "birthday", "Boolean", "display", "TextVariantEnum", "textBody2", "editCard", "setEditCard", "state", "step", "resume", "educations", "educationExperiences", "setEducationExperiences", "useState", "education", "handleAddEducationClick", "prevExperiences", "handleDeleteEducation", "filter", "_", "i", "handleEducationChange", "updatedExperiences", "ResumeCardEnum", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "map", "key", "import_react", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "resume", "dictionaries", "actionData", "t", "userContext", "theme", "useApp", "photo", "setPhoto", "useState", "general_information", "photo_uri", "getImageUrl", "DEFAULT_USER_AVATAR", "showUploader", "setShowUploader", "errorTextForImage", "setErrorTextForImage", "useEffect", "startsWith", "ResumeCardEnum", "information", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "TextVariantEnum", "textBody1medium", "textBody2", "textSmall", "errorTextColor", "first_name", "user", "firstName", "fieldErrors", "language", "last_name", "lastName", "extractTitles", "genders", "gender_id", "gender", "getValueLang", "birthdate", "birthday", "email", "phone", "extractTitlesNewWay", "languagesOfNotify", "language_of_notify_id", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "resume", "dictionaries", "actionData", "t", "userContext", "useApp", "entriesPositions", "setSpecializationState", "position", "specializationState", "useGetPositionFromSpecialization", "job_position", "specialization_id", "ResumeCardEnum", "jobPosition", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "extractTitles", "specializations", "language", "fieldErrors", "employment", "employment_type_ids", "workfeatures", "work_feature_ids", "payoutPeriods", "salary_payout_period_id", "salary_fixed", "toFixed", "salary_from", "salary_to", "currency", "currency_id", "description", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "resume", "dictionaries", "actionData", "t", "userContext", "useApp", "entriesRegions", "setNewContry", "newRegion", "setNewRegion", "newCountry", "newCity", "setNewCity", "newEntriesCity", "useGetLocation", "location", "country_id", "region_id", "city_id", "ResumeCardEnum", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "extractTitles", "countries", "language", "fieldErrors", "length", "address", "sources", "source_id", "relocations", "relocation_id", "Boolean", "business_trips", "toString", "import_jsx_dev_runtime", "editCard", "setEditCard", "state", "step", "resume", "dictionaries", "actionData", "t", "useApp", "ResumeCardEnum", "settings", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "TextVariantEnum", "textBody2medium", "show_resume_to", "toString", "show_phone_number_to", "String", "show_email_to", "email_notifications", "import_react", "import_jsx_dev_runtime", "WorkExperienceForm", "workExperience", "dictionaries", "index", "onChange", "onDelete", "actionData", "t", "theme", "userContext", "useApp", "handleChange", "updatedWorkExperience", "handleDelete", "entriesPositions", "setSpecializationState", "position", "specializationState", "useGetPositionFromSpecialization", "specialization_id", "useEffect", "to", "undefined", "present", "borderBottom", "user", "borderColor", "paddingBottom", "extractTitles", "specializations", "language", "value", "fieldErrors", "company", "from", "getValueLang", "birthday", "Boolean", "display", "description", "TextVariantEnum", "textBody2", "editCard", "setEditCard", "state", "step", "resume", "works", "workExperiences", "setWorkExperiences", "useState", "work_experience", "handleAddWorksClick", "prevExperiences", "handleDeleteWorkExperience", "filter", "_", "i", "handleWorkExperienceChange", "updatedExperiences", "ResumeCardEnum", "VariantCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "map", "key", "Wrapper"]
}
