{
  "version": 3,
  "sources": ["../../../shared/v2/responses/models/index.ts", "../../../app/components/common/ResponseTypeStatus/styles.ts", "../../../app/components/common/ResponseTypeStatus/index.tsx"],
  "sourcesContent": ["/* tslint:disable */\n/* eslint-disable */\n/**\n * \n * @export\n * @interface GetEntitiesResponses200Response\n */\nexport interface GetEntitiesResponses200Response {\n    /**\n     * \n     * @type {Array<ResponsesGroupedByEntity>}\n     * @memberof GetEntitiesResponses200Response\n     */\n    data: Array<ResponsesGroupedByEntity>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetEntitiesResponses200Response\n     */\n    next_page_token?: string;\n}\n/**\n * \n * @export\n * @interface GetEntityResponses200Response\n */\nexport interface GetEntityResponses200Response {\n    /**\n     * \n     * @type {Array<Response>}\n     * @memberof GetEntityResponses200Response\n     */\n    data: Array<Response>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetEntityResponses200Response\n     */\n    next_page_token?: string;\n}\n/**\n * \n * @export\n * @interface Response\n */\nexport interface Response {\n    /**\n     * \n     * @type {string}\n     * @memberof Response\n     */\n    readonly id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Response\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Response\n     */\n    readonly target_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Response\n     */\n    readonly target_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Response\n     */\n    readonly shared_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Response\n     */\n    readonly shared_type?: string;\n}\n\n/**\n * \n * @export\n */\nexport const ResponseType = {\n    request: 'REQUEST',\n    invitation: 'INVITATION'\n} as const;\nexport type ResponseType = typeof ResponseType[keyof typeof ResponseType];\n\n/**\n * \n * @export\n * @interface ResponsesGroupedByEntity\n */\nexport interface ResponsesGroupedByEntity {\n    /**\n     * \n     * @type {string}\n     * @memberof ResponsesGroupedByEntity\n     */\n    readonly entity_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResponsesGroupedByEntity\n     */\n    readonly entity_type: string;\n    /**\n     * \n     * @type {Array<Response>}\n     * @memberof ResponsesGroupedByEntity\n     */\n    responses: Array<Response>;\n    /**\n     * \n     * @type {Statistics}\n     * @memberof ResponsesGroupedByEntity\n     */\n    statistics: Statistics;\n}\n/**\n * \n * @export\n * @interface Statistics\n */\nexport interface Statistics {\n    /**\n     * \n     * @type {number}\n     * @memberof Statistics\n     */\n    requests_total?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Statistics\n     */\n    requests_viewed?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Statistics\n     */\n    requests_approved?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Statistics\n     */\n    requests_approved_and_viewed?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Statistics\n     */\n    invitations_total?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Statistics\n     */\n    new_invitations?: number;\n}\n", "import { ResponseType } from 'shared/v2/responses';\nimport styled, { css } from 'styled-components';\n\nimport { ResponseState } from '~/types/enums/responseState';\n\nexport const Wrapper = styled.div<{\n  type?: ResponseType;\n  state?: ResponseState | string;\n  position?: string;\n  onlyContainer?: boolean;\n}>`\n  display: flex;\n  width: 100%;\n  padding: 16px 24px;\n  position: ${({ position }) => (position === 'relative' ? 'relative' : 'absolute')};\n  padding: ${({ onlyContainer }) => (onlyContainer ? '0px' : '16px 24px')};\n  top: 0;\n  left: 0;\n  border-radius: 8px 8px 0 0;\n  ${({ type, state }) => {\n    if (state === ResponseState.APPROVED) {\n      return css`\n        background-color: ${({ theme }) => theme.boxInformation.success.backgroundColor};\n      `;\n    }\n    if (type === ResponseType.invitation) {\n      return css`\n        background-color: ${({ theme }) => theme.boxInformation.info.backgroundColor};\n      `;\n    }\n    return css`\n      background-color: ${({ theme }) => theme.boxInformation.warning.backgroundColor};\n    `;\n  }}\n\n  @media (min-width: 768px) {\n    border-radius: 12px 12px 0 0;\n  }\n`;\n\nexport const ContainerInfo = styled.div<{\n  type?: ResponseType;\n  state?: ResponseState | string;\n}>`\n  display: flex;\n  gap: 6px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 80px;\n  padding: 1px 12px 1px 5px;\n  ${({ type, state }) => {\n    if (type === ResponseType.request && state === ResponseState.APPROVED) {\n      return css`\n        border: ${({ theme }) => `1px solid ${theme.boxInformation.success.borderColor}`};\n      `;\n    }\n    if (type === ResponseType.invitation) {\n      return css`\n        border: ${({ theme }) => `1px solid ${theme.boxInformation.info.borderColor}`};\n      `;\n    }\n    return css`\n      border: ${({ theme }) => `1px solid ${theme.boxInformation.warning.borderColor}`};\n    `;\n  }};\n`;\n", "import type { ResponseType } from 'shared/v2/responses';\n\nimport { useApp } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { ResponseState } from '~/types/enums/responseState';\n\nimport { Icon } from '../Icon';\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport { ContainerInfo, Wrapper } from './styles';\n\nexport interface BoxInformationProps {\n  type?: ResponseType;\n  state?: ResponseState | string;\n  position?: string;\n  onlyContainer?: boolean;\n  totalRequest?: number;\n  totalInvations?: number;\n  newInvations?: number;\n  approvedRequest?: number;\n}\n\nfunction ResponseTypeStatus({\n  type,\n  state,\n  position,\n  onlyContainer,\n  totalRequest,\n  totalInvations,\n  newInvations,\n  approvedRequest,\n}: BoxInformationProps) {\n  const { t, theme } = useApp();\n\n  return (\n    <Wrapper type={type} state={state} position={position} onlyContainer={onlyContainer}>\n      <ContainerInfo type={type} state={state}>\n        {type === 'INVITATION' && (\n          <>\n            {state === ResponseState.APPROVED_AND_VIEWED || state === ResponseState.APPROVED ? (\n              <Icon name={IconEnum.statusApproved} />\n            ) : (\n              <Icon name={IconEnum.statusWarning} />\n            )}\n            {state === ResponseState.VIEWED && (\n              <Text\n                variant={TextVariantEnum.textBody2medium}\n                color={theme.boxInformation.info.borderColor}\n              >\n                {t('user:invitation_viewed')}\n              </Text>\n            )}\n            {state === ResponseState.NEW && (\n              <>\n                <Text\n                  variant={TextVariantEnum.textBody2medium}\n                  color={theme.boxInformation.info.borderColor}\n                >\n                  {t('user:Invitation')}\n                </Text>\n                {totalInvations && (\n                  <Text\n                    variant={TextVariantEnum.textBody2medium}\n                    color={theme.boxInformation.info.borderColor}\n                  >\n                    {totalInvations}\n                  </Text>\n                )}\n                {newInvations && (\n                  <Text\n                    variant={TextVariantEnum.textBody2medium}\n                    color={theme.boxInformation.info.borderColor}\n                  >\n                    {`(+${newInvations} ${t('user:new')})`}\n                  </Text>\n                )}\n              </>\n            )}\n            {state === ResponseState.CONTACT_SENT && (\n              <Text\n                variant={TextVariantEnum.textBody2medium}\n                color={theme.boxInformation.info.borderColor}\n              >\n                {t('user:contacts_sent')}\n              </Text>\n            )}\n            {(state === ResponseState.APPROVED || state === ResponseState.APPROVED_AND_VIEWED) && (\n              <Text\n                variant={TextVariantEnum.textBody2medium}\n                color={theme.boxInformation.success.borderColor}\n              >\n                {t('user:approved')}\n              </Text>\n            )}\n          </>\n        )}\n        {type === 'REQUEST' && state === ResponseState.APPROVED && (\n          <>\n            <Icon name={IconEnum.statusApproved} />\n            <Text\n              variant={TextVariantEnum.textBody2medium}\n              color={theme.boxInformation.success.borderColor}\n            >\n              {t('user:contacts_sent')}\n            </Text>\n            <Text\n              variant={TextVariantEnum.textBody2medium}\n              color={theme.boxInformation.success.borderColor}\n            >\n              {approvedRequest}\n            </Text>\n            {approvedRequest && (\n              <Text\n                variant={TextVariantEnum.textBody2medium}\n                color={theme.boxInformation.warning.borderColor}\n              >\n                {approvedRequest}\n              </Text>\n            )}\n          </>\n        )}\n\n        {type === 'REQUEST' && state === ResponseState.NEW && (\n          <>\n            <Icon name={IconEnum.statusExpectation} />\n            <Text\n              variant={TextVariantEnum.textBody2medium}\n              color={theme.boxInformation.warning.borderColor}\n            >\n              {t('user:request')}\n            </Text>\n            {totalRequest && (\n              <Text\n                variant={TextVariantEnum.textBody2medium}\n                color={theme.boxInformation.warning.borderColor}\n              >\n                {totalRequest}\n              </Text>\n            )}\n          </>\n        )}\n        {type === 'REQUEST' && state === ResponseState.VIEWED && (\n          <>\n            <Icon name={IconEnum.statusExpectation} />\n            <Text\n              variant={TextVariantEnum.textBody2medium}\n              color={theme.boxInformation.warning.borderColor}\n            >\n              {t('user:request_viewed')}\n            </Text>\n          </>\n        )}\n        {type === 'REQUEST' && state === ResponseState.CONTACT_SENT && (\n          <>\n            <Icon name={IconEnum.statusExpectation} />\n            <Text\n              variant={TextVariantEnum.textBody2medium}\n              color={theme.boxInformation.warning.borderColor}\n            >\n              {t('user:request')}\n            </Text>\n          </>\n        )}\n      </ContainerInfo>\n    </Wrapper>\n  );\n}\n\nexport default ResponseTypeStatus;\n"],
  "mappings": "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",
  "names": ["ResponseTypeStatus", "type", "state", "position", "onlyContainer", "totalRequest", "totalInvations", "newInvations", "approvedRequest", "t", "theme", "useApp", "ResponseState", "APPROVED_AND_VIEWED", "APPROVED", "IconEnum", "statusApproved", "statusWarning", "VIEWED", "TextVariantEnum", "textBody2medium", "boxInformation", "info", "borderColor", "NEW", "CONTACT_SENT", "success", "warning", "statusExpectation"]
}
