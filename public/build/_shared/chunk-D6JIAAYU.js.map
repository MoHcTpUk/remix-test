{
  "version": 3,
  "sources": ["../../../app/types/enums/boxInformationEnum.ts", "../../../app/components/common/BoxInformation/styles.ts", "../../../app/components/common/BoxInformation/index.tsx"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-redeclare */\nimport type { ValueOf } from 'shared/utils';\n\nexport const BoxInformationEnum = {\n  info: 'attentionInfo',\n  error: 'attentionError',\n  warning: 'attention',\n  success: 'attentionSuccess',\n} as const;\n\nexport type BoxInformationEnum = ValueOf<typeof BoxInformationEnum>;\n", "import styled, { css } from 'styled-components';\n\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\n\nexport const Wrapper = styled.div<{\n  variant?: BoxInformationEnum;\n  flexDirection?: string;\n  type?: string;\n  noShadow?: boolean;\n}>`\n  display: flex;\n  /* width: 100%; */\n  width: ${({ type }) => (type === 'popup' ? '343px' : '100%')};\n  flex-direction: ${({ flexDirection }) => flexDirection};\n  justify-content: space-between;\n  border-radius: 8px;\n  padding: 16px;\n  height: fit-content;\n  box-shadow: ${({ theme, noShadow }) => !noShadow && theme.\u0441ards.shadow};\n  ${({ variant = BoxInformationEnum.info }) => {\n    switch (variant) {\n      case BoxInformationEnum.success:\n        return css`\n          background-color: ${({ theme }) => theme.boxInformation.success.backgroundColor};\n        `;\n      case BoxInformationEnum.error:\n        return css`\n          background-color: ${({ theme }) => theme.boxInformation.error.backgroundColor};\n        `;\n      case BoxInformationEnum.warning:\n        return css`\n          background-color: ${({ theme }) => theme.boxInformation.warning.backgroundColor};\n        `;\n      default:\n        return css`\n          background-color: ${({ theme }) => theme.boxInformation.info.backgroundColor};\n        `;\n    }\n  }}\n  @media (min-width: 768px) {\n    width: ${({ type }) => (type === 'popup' ? '606px' : '100%')};\n    border-radius: 12px;\n    padding: 24px;\n  }\n  @media (min-width: 1280px) {\n    width: ${({ type }) => (type === 'popup' ? '690px' : '100%')};\n    position: relative;\n  }\n`;\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  align-items: flex-start;\n  @media (min-width: 768px) {\n    gap: 12px;\n  }\n`;\n\nexport const MessageWrapper = styled.div<{ flexDirection?: string }>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${({ flexDirection }) => flexDirection};\n  gap: 8px;\n  margin-top: 5px;\n  @media (min-width: 768px) {\n    margin-top: 2px;\n  }\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  margin-top: 6px;\n`;\n\nexport const List = styled.ul`\n  padding-left: 8px;\n  @media (min-width: 768px) {\n    padding-left: 10px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  list-style: none;\n  &::before {\n    content: '\u00B7';\n    font-size: 36px;\n    vertical-align: middle;\n    padding-right: 10px;\n  }\n`;\n", "import type { ReactI18NextChild } from 'react-i18next';\nimport type { CSSProperties } from 'styled-components';\n\nimport { useApp } from '~/hooks';\nimport type { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\n\nimport { Box } from '../Box';\nimport { Icon } from '../Icon';\nimport SvgClose from '../Icons/Close';\nimport { ModalCloseButton } from '../Modal/styles';\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport { ButtonWrapper, ContentWrapper, MessageWrapper, Wrapper } from './styles';\n\nexport interface BoxInformationProps {\n  variant: BoxInformationEnum;\n  title?: string;\n  button?: (() => JSX.Element) | null;\n  information?: string | ReactI18NextChild | Iterable<ReactI18NextChild>;\n  flexDirection?: CSSProperties['flexDirection'];\n  type?: string;\n  noShadow?: boolean;\n  onClose?: () => void;\n}\n\nfunction BoxInformation({\n  variant,\n  button,\n  title,\n  information,\n  flexDirection = 'row',\n  type,\n  noShadow,\n  onClose,\n}: BoxInformationProps) {\n  const { theme } = useApp();\n\n  return (\n    <Wrapper variant={variant} type={type} noShadow={noShadow}>\n      <ContentWrapper>\n        <Box>\n          <Icon name={variant} />\n        </Box>\n        <MessageWrapper flexDirection={flexDirection}>\n          <Box flexDirection='column' gap='8px'>\n            <Text variant={TextVariantEnum.textBody2medium}>{title}</Text>\n            {information && <Text variant={TextVariantEnum.textBody2}>{information}</Text>}\n          </Box>\n          {button && <ButtonWrapper>{button()}</ButtonWrapper>}\n        </MessageWrapper>\n      </ContentWrapper>\n      {onClose && (\n        <ModalCloseButton style={{ position: 'absolute', top: '10px' }} onClick={onClose}>\n          <SvgClose color={theme.modal.svgColor} />\n        </ModalCloseButton>\n      )}\n    </Wrapper>\n  );\n}\n\nexport default BoxInformation;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAGO,IAAM,qBAAqB;AAAA,EAChC,MAAM;AAAA,EACN,OAAO;AAAA,EACP,SAAS;AAAA,EACT,SAAS;AACX;;;ACJO,IAAM,UAAU,sCAAO;AAAA;AAAA;AAAA,WAQnB,CAAC,EAAE,KAAK,MAAO,SAAS,UAAU,UAAU;AAAA,oBACnC,CAAC,EAAE,cAAc,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,gBAK3B,CAAC,EAAE,OAAO,SAAS,MAAM,CAAC,YAAY,MAAM,WAAM;AAAA,IAC9D,CAAC,EAAE,UAAU,mBAAmB,KAAK,MAAM;AAC3C,UAAQ,SAAS;AAAA,IACf,KAAK,mBAAmB;AACtB,aAAO;AAAA,8BACe,CAAC,EAAE,MAAM,MAAM,MAAM,eAAe,QAAQ;AAAA;AAAA,IAEpE,KAAK,mBAAmB;AACtB,aAAO;AAAA,8BACe,CAAC,EAAE,MAAM,MAAM,MAAM,eAAe,MAAM;AAAA;AAAA,IAElE,KAAK,mBAAmB;AACtB,aAAO;AAAA,8BACe,CAAC,EAAE,MAAM,MAAM,MAAM,eAAe,QAAQ;AAAA;AAAA,IAEpE;AACE,aAAO;AAAA,8BACe,CAAC,EAAE,MAAM,MAAM,MAAM,eAAe,KAAK;AAAA;AAAA,EAEnE;AACF;AAAA;AAAA,aAEW,CAAC,EAAE,KAAK,MAAO,SAAS,UAAU,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,aAK5C,CAAC,EAAE,KAAK,MAAO,SAAS,UAAU,UAAU;AAAA;AAAA;AAAA;AAKlD,IAAM,iBAAiB,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU9B,IAAM,iBAAiB,sCAAO;AAAA;AAAA;AAAA,oBAGjB,CAAC,EAAE,cAAc,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQpC,IAAM,gBAAgB,sCAAO;AAAA;AAAA;AAAA;AAK7B,IAAM,OAAO,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpB,IAAM,WAAW,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC1CrB;AAhBV,SAASA,eAAe;EACtBC;EACAC;EACAC;EACAC;EACAC,gBAAgB;EAChBC;EACAC;EACAC;AACmB,GAAG;AACtB,QAAM;IAAEC;EAAM,IAAIC,OAAO;AAEzB,SACE,mDAAC,WAAQ,SAAkB,MAAY,UACrC;uDAAC,kBACC;yDAAC,OACC,6DAAC,QAAK,MAAMT,WAAZ;;;;aAAoB,KADtB;;;;aAEA;MACA,mDAAC,kBAAe,eACd;2DAAC,OAAI,eAAc,UAAS,KAAI,OAC9B;6DAAC,QAAK,SAASU,gBAAgBC,iBAAkBT,mBAAjD;;;;iBAAuD;UACtDC,eAAe,mDAAC,QAAK,SAASO,gBAAgBE,WAAYT,yBAA3C;;;;iBAAuD;aAFzE;;;;eAGA;QACCF,UAAU,mDAAC,iBAAeA,iBAAO,KAAvB;;;;eAAyB;WALtC;;;;aAMA;SAVF;;;;WAWA;IACCM,WACC,mDAAC,oBAAiB,OAAO;MAAEM,UAAU;MAAYC,KAAK;IAAO,GAAG,SAASP,SACvE,6DAAC,iBAAS,OAAOC,MAAMO,MAAMC,YAA7B;;;;WAAsC,KADxC;;;;WAEA;OAhBJ;;;;SAkBA;AAEJ;AAEA,IAAA,yBAAejB;",
  "names": ["BoxInformation", "variant", "button", "title", "information", "flexDirection", "type", "noShadow", "onClose", "theme", "useApp", "TextVariantEnum", "textBody2medium", "textBody2", "position", "top", "modal", "svgColor"]
}
