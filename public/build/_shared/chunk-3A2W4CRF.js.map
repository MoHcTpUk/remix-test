{
  "version": 3,
  "sources": ["../../../app/components/entities/cardWidgets/VacancyPartCard/index.tsx"],
  "sourcesContent": ["import { Link, useLocation } from '@remix-run/react';\nimport { memo } from 'react';\nimport type { ResponseType } from 'shared/v2/responses';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport ResponseTypeHeading from '~/components/common/ResponseTypeStatus';\nimport { BoxControlContainer } from '~/components/entities/BoxControl';\nimport {\n  VacancyPartCardHeading,\n  VacancyPartCardInfo,\n} from '~/components/entities/cardComponents/partCard';\nimport { MediaBox } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { ResponseState } from '~/types/enums/responseState';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport { updateSearchString } from '~/utils/helpers';\n\nexport const VacancyPartCardWidget = memo(\n  ({\n    vacancy,\n    selectedVacancy,\n    variant,\n    type,\n    state,\n    responseId,\n    responseAction,\n  }: {\n    vacancy: Vacancy;\n    selectedVacancy?: string;\n    variant?: PageVariantEnum;\n    type?: ResponseType;\n    state?: ResponseState | string;\n    responseId?: string;\n    responseAction?: boolean;\n  }): JSX.Element => {\n    const { theme } = useApp();\n    const location = useLocation();\n    const widthScreen = useScreenWidth();\n\n    const boxHeading = (vacancy: Vacancy) => (\n      <Box flexDirection='column' width='100%'>\n        {variant === 'response' && <ResponseTypeHeading state={state} type={type} />}\n        <VacancyPartCardHeading vacancy={vacancy} variant={variant} />\n        <VacancyPartCardInfo vacancy={vacancy} variant={variant} />\n      </Box>\n    );\n\n    return (\n      <Box\n        width='100%'\n        style={{\n          cursor: 'pointer',\n          borderRadius: '12px',\n          position: 'relative',\n          transition: 'all 0.2s cubic-bezier(0.2, 0, 0, 1)',\n          border:\n            widthScreen >= 1280 && vacancy.id === selectedVacancy\n              ? `2px solid ${theme.modal.borderCardsColor}`\n              : '',\n        }}\n        key={vacancy?.id}\n      >\n        <BoxCard key={vacancy?.id} variant={VariantCardEnum.userCard}>\n          <MediaBox variant='mobile'>\n            <Link\n              to={responseId || vacancy?.id || '#'}\n              style={{\n                paddingTop: variant === PageVariantEnum.response ? '62px' : '',\n              }}\n            >\n              {boxHeading(vacancy)}\n            </Link>\n          </MediaBox>\n\n          <MediaBox variant='desktop'>\n            <Link\n              to={\n                variant === 'search'\n                  ? `/search/vacancy${updateSearchString(location.search, vacancy?.id)}`\n                  : `${vacancy?.id || ''}?responseId=${responseId || ''}`\n              }\n              style={{\n                paddingTop: variant === PageVariantEnum.response ? '62px' : '',\n              }}\n              preventScrollReset\n            >\n              {boxHeading(vacancy)}\n            </Link>\n          </MediaBox>\n\n          <BoxControlContainer\n            variant={variant}\n            stateResponse={state}\n            typeResponse={type}\n            typeEntity={EntityVariantEnum.vacancy}\n            id={vacancy?.id}\n            responseId={responseId}\n            typeCard={SizeCardVariantEnum.part}\n            responseAction={responseAction}\n          />\n        </BoxCard>\n      </Box>\n    );\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAAA,gBAAqB;AA6Cc;AAxB5B,IAAMC,4BAAwBC,oBACnC,CAAC;EACCC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AASF,MAAmB;AACjB,QAAM;IAAEC;EAAM,IAAIC,OAAO;AACzB,QAAMC,WAAWC,YAAY;AAC7B,QAAMC,cAAcC,eAAe;AAEnC,QAAMC,aAAaA,CAACb,aAClB,mDAAC,OAAI,eAAc,UAAS,OAAM,QAC/BE;gBAAY,cAAc,mDAAC,8BAAoB,OAAc,QAAnC;;;;WAA8C;IACzE,mDAAC,0BAAuB,SAASF,UAAS,WAA1C;;;;WAA2D;IAC3D,mDAAC,uBAAoB,SAASA,UAAS,WAAvC;;;;WAAwD;OAH1D;;;;SAIA;AAGF,SACE,mDAAC,OACC,OAAM,QACN,OAAO;IACLc,QAAQ;IACRC,cAAc;IACdC,UAAU;IACVC,YAAY;IACZC,QACEP,eAAe,QAAQX,QAAQmB,OAAOlB,kBACjC,aAAYM,MAAMa,MAAMC,qBACzB;EACR,GAGA,6DAAC,WAA0B,SAASC,gBAAgBC,UAClD;uDAAC,YAAS,SAAQ,UAChB,6DAAC,QACC,IAAIlB,cAAcL,SAASmB,MAAM,KACjC,OAAO;MACLK,YAAYtB,YAAYuB,gBAAgBC,WAAW,SAAS;IAC9D,GAECb,qBAAWb,OAAO,KANrB;;;;WAOA,KARF;;;;WASA;IAEA,mDAAC,YAAS,SAAQ,WAChB,6DAAC,QACC,IACEE,YAAY,WACP,kBAAiByB,mBAAmBlB,SAASmB,QAAQ5B,SAASmB,EAAE,MAChE,GAAEnB,SAASmB,MAAM,iBAAiBd,cAAc,MAEvD,OAAO;MACLmB,YAAYtB,YAAYuB,gBAAgBC,WAAW,SAAS;IAC9D,GACA,oBAAkB,MAEjBb,qBAAWb,OAAO,KAXrB;;;;WAYA,KAbF;;;;WAcA;IAEA,mDAAC,uBACC,SACA,eAAeI,OACf,cAAcD,MACd,YAAY0B,kBAAkB7B,SAC9B,IAAIA,SAASmB,IACb,YACA,UAAUW,oBAAoBC,MAC9B,kBARF;;;;WAQiC;OApCrB/B,SAASmB,IAAvB;;;;SAsCA,KAxCKnB,SAASmB,IAZhB;;;;SAqDA;AAEJ,CACF;",
  "names": ["import_react", "VacancyPartCardWidget", "memo", "vacancy", "selectedVacancy", "variant", "type", "state", "responseId", "responseAction", "theme", "useApp", "location", "useLocation", "widthScreen", "useScreenWidth", "boxHeading", "cursor", "borderRadius", "position", "transition", "border", "id", "modal", "borderCardsColor", "VariantCardEnum", "userCard", "paddingTop", "PageVariantEnum", "response", "updateSearchString", "search", "EntityVariantEnum", "SizeCardVariantEnum", "part"]
}
