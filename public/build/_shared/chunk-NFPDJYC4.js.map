{
  "version": 3,
  "sources": ["../../../app/components/entities/ModalRequestList/index.tsx", "../../../app/components/entities/ModalRequestNoEntity/index.tsx"],
  "sourcesContent": ["import { useFetcher } from '@remix-run/react';\nimport { useEffect, useState } from 'react';\nimport type { EntityMessage } from 'shared/client/data-contracts';\nimport type { Company } from 'shared/v2/companies';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { Vacancy } from 'shared/v2/vacancies';\nimport styled from 'styled-components';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport Button from '~/components/common/Button';\nimport { Modal } from '~/components/common/Modal';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { ResumeRequest } from '~/components/pages/Search/Resumes/ResumesRequest/ResumeRequest';\nimport { VacancyRequest } from '~/components/pages/Search/Vacancies/VacanciesRequest/VacancyRequest';\nimport { useApp } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { VariantModalEnum } from '~/types/enums/variantModalEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nimport ModalRequestNoEntity from '../ModalRequestNoEntity';\n\ninterface IRequest {\n  success: boolean;\n  message?: EntityMessage;\n}\n\nconst BoxCards = styled.div`\n  max-height: 624px;\n  margin-top: 24px;\n  width: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 24px;\n`;\n\nexport default function ModalRequestList({\n  visibility,\n  setVisibility,\n  variant,\n  resumes,\n  vacancies,\n  resumeId,\n  vacancyId,\n  dictionaries,\n  companies,\n  actionRequest,\n}: {\n  visibility: boolean;\n  setVisibility: (visibility: boolean) => void;\n  variant: 'resume' | 'vacancy';\n  resumes?: Resume[] | null;\n  vacancies?: Vacancy[] | null;\n  companies?: Company[] | null;\n  vacancyId?: string;\n  resumeId?: string;\n  dictionaries?: IDictionaries;\n  actionRequest?: boolean;\n}) {\n  const { t, userContext, theme } = useApp();\n  const request = useFetcher<IRequest>();\n\n  const [actionRoute, setActionRoute] = useState('');\n  const [selectedCard, setSelectedCard] = useState('');\n\n  const [publishedResumes, setPublishedResumes] = useState<Resume[]>();\n  const [publishedVacancies, setPublishedVacancies] = useState<Vacancy[]>();\n\n  useEffect(() => {\n    if (request.data?.success) setVisibility(false);\n  }, [request.data?.success]);\n\n  useEffect(() => {\n    if (resumes) {\n      const newResume = resumes.filter((resume) => resume.published);\n      setPublishedResumes(newResume);\n    }\n    if (vacancies) {\n      const newVacancies = vacancies.filter((vacancy) => vacancy.published);\n      setPublishedVacancies(newVacancies);\n    }\n  }, [resumes, vacancies]);\n\n  useEffect(() => {\n    if (variant === 'resume') {\n      setActionRoute(`/search/vacancy/${vacancyId || ''}/request`);\n    } else if (variant === 'vacancy') {\n      setActionRoute(`/search/resume/${resumeId || ''}/request`);\n    }\n  }, [variant]);\n\n  const handleConfirm = (id?: string) => {\n    if (id) setSelectedCard(id);\n  };\n\n  return (variant === 'vacancy' && publishedVacancies && !publishedVacancies[0]) ||\n    (variant === 'resume' && publishedResumes && !publishedResumes[0]) ? (\n    <ModalRequestNoEntity visibility={visibility} setVisibility={setVisibility} variant={variant} />\n  ) : (\n    <Modal visibility={visibility} setVisibility={setVisibility} variant={VariantModalEnum.request}>\n      {request.data === undefined && (\n        <BoxInformation\n          variant={BoxInformationEnum.info}\n          title={\n            variant === 'resume'\n              ? t('user:select_resume_to_send')\n              : t('user:select_vacancy_to_send')\n          }\n        />\n      )}\n\n      {request.data?.success === false && request.data.message && (\n        <BoxInformation\n          variant={BoxInformationEnum.error}\n          title={request.data.message[userContext.language]}\n        />\n      )}\n\n      {request.data?.success === true && (\n        <BoxInformation\n          variant={BoxInformationEnum.success}\n          title={t('user:your_request_has_been_sent')}\n        />\n      )}\n      {variant === 'resume' ? (\n        <BoxCards>\n          {publishedResumes?.map((resume) => (\n            <Box\n              width='100%'\n              style={{\n                cursor: 'pointer',\n                borderRadius: '12px',\n                border:\n                  resume.id === selectedCard ? `2px solid ${theme.modal.borderCardsColor}` : '',\n              }}\n              key={resume?.id}\n              onClick={() => handleConfirm(resume?.id)}\n            >\n              <ResumeRequest resume={resume} dictionaries={dictionaries} />\n            </Box>\n          ))}\n        </BoxCards>\n      ) : (\n        <BoxCards>\n          {publishedVacancies?.map((vacancy) => (\n            <Box\n              width='100%'\n              style={{\n                cursor: 'pointer',\n                borderRadius: '12px',\n                border:\n                  vacancy.id === selectedCard ? `2px solid ${theme.modal.borderCardsColor}` : '',\n              }}\n              key={vacancy?.id}\n              onClick={() => handleConfirm(vacancy?.id)}\n            >\n              <VacancyRequest vacancy={vacancy} companies={companies} dictionaries={dictionaries} />\n            </Box>\n          ))}\n        </BoxCards>\n      )}\n      <Box\n        flexDirection='row'\n        justifyContent='flex-end'\n        alignItems='center'\n        gap='24px'\n        width='100%'\n        margin='24px 0 0'\n      >\n        <Button priority='secondary' onClick={() => setVisibility(!visibility)}>\n          <Text variant={TextVariantEnum.textBody2}>{t('common:cancel')}</Text>\n        </Button>\n        <request.Form method='POST' action={actionRoute}>\n          <input type='hidden' name='id' value={selectedCard} />\n          <Button priority='primary' type='submit'>\n            <Text variant={TextVariantEnum.textBody2}>{t('user:send_request')}</Text>\n          </Button>\n        </request.Form>\n      </Box>\n    </Modal>\n  );\n}\n", "import { Link } from '@remix-run/react';\nimport routes from 'shared/routing/routes';\n\nimport Button from '~/components/common/Button';\nimport SvgClose from '~/components/common/Icons/Close';\nimport { Modal } from '~/components/common/Modal';\nimport { ModalCloseButton } from '~/components/common/Modal/styles';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\nimport { VariantModalEnum } from '~/types/enums/variantModalEnum';\n\nimport {\n  BoxContainer,\n  ButtonsControl,\n  HeaderWrapper,\n  TextWrapper,\n  TitleWrapper,\n} from '../ModalConfirmDelete/styles';\n\nexport default function ModalRequestNoEntity({\n  visibility,\n  setVisibility,\n  variant,\n}: {\n  visibility: boolean;\n  setVisibility: (visibility: boolean) => void;\n  variant?: 'resume' | 'vacancy';\n}) {\n  const { t, theme } = useApp();\n\n  return (\n    <Modal\n      visibility={visibility}\n      setVisibility={setVisibility}\n      variant={VariantModalEnum.confirmDelete}\n    >\n      <BoxContainer>\n        <HeaderWrapper>\n          <TitleWrapper>\n            {variant === 'vacancy' && (\n              <Text variant={TextVariantEnum.textHeading2}>{t('user:check_your_vacancies')}</Text>\n            )}\n            {variant === 'resume' && (\n              <Text variant={TextVariantEnum.textHeading2}>{t('user:check_your_resumes')}</Text>\n            )}\n          </TitleWrapper>\n          <ModalCloseButton onClick={() => setVisibility(!visibility)} variant='withHeader'>\n            <SvgClose color={theme.modal.svgColor} />\n          </ModalCloseButton>\n        </HeaderWrapper>\n\n        <TextWrapper>\n          {variant === 'vacancy' && (\n            <Text variant={TextVariantEnum.textBody1medium}>\n              {t('user:you_dont_have_a_published_vacancy_to_send_to_an_candidate')}\n            </Text>\n          )}\n          {variant === 'resume' && (\n            <Text variant={TextVariantEnum.textBody1medium}>\n              {t('user:you_dont_have_a_published_resume_to_send_to_an_employer')}\n            </Text>\n          )}\n        </TextWrapper>\n\n        <ButtonsControl>\n          <Button\n            priority='secondary'\n            onClick={() => setVisibility(false)}\n            className='growingButton'\n          >\n            <Text variant={TextVariantEnum.textBody2}>{t('common:cancel')}</Text>\n          </Button>\n          <Link to={variant === 'vacancy' ? routes.user.vacancy.root : routes.user.resume.root}>\n            <Button priority='primary' className='growingButton'>\n              <Text variant={TextVariantEnum.textBody2}>\n                {variant === 'vacancy' ? t('user:go_to_vacancies') : t('user:go_to_resumes')}\n              </Text>\n            </Button>\n          </Link>\n        </ButtonsControl>\n      </BoxContainer>\n    </Modal>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "visibility", "setVisibility", "variant", "t", "theme", "useApp", "VariantModalEnum", "confirmDelete", "TextVariantEnum", "textHeading2", "modal", "svgColor", "textBody1medium", "textBody2", "routes", "user", "vacancy", "root", "resume", "import_jsx_dev_runtime", "BoxCards", "styled", "div", "withConfig", "displayName", "componentId", "visibility", "setVisibility", "variant", "resumes", "vacancies", "resumeId", "vacancyId", "dictionaries", "companies", "actionRequest", "t", "userContext", "theme", "useApp", "request", "useFetcher", "actionRoute", "setActionRoute", "useState", "selectedCard", "setSelectedCard", "publishedResumes", "setPublishedResumes", "publishedVacancies", "setPublishedVacancies", "useEffect", "data", "success", "newResume", "filter", "resume", "published", "newVacancies", "vacancy", "handleConfirm", "id", "VariantModalEnum", "undefined", "BoxInformationEnum", "info", "message", "error", "language", "map", "cursor", "borderRadius", "border", "modal", "borderCardsColor", "TextVariantEnum", "textBody2"]
}
