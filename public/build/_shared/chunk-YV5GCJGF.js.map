{
  "version": 3,
  "sources": ["../../../app/components/entities/cardComponents/fullCard/ResumeFullCardAboutEmployee/index.tsx", "../../../app/components/entities/cardComponents/fullCard/ResumeFullCardAdditional/index.tsx", "../../../app/components/entities/cardComponents/fullCard/ResumeFullCardEducation/index.tsx", "../../../app/components/entities/cardComponents/fullCard/ResumeFullCardHeading/index.tsx", "../../../app/components/entities/cardComponents/fullCard/ResumeFullCardInformation/index.tsx", "../../../app/components/entities/cardComponents/fullCard/ResumeFullCardSkills/index.tsx", "../../../app/components/entities/cardComponents/fullCard/ResumeFullCardWorkExperience/index.tsx", "../../../app/components/entities/cardWidgets/ResumeFullCard/index.tsx"],
  "sourcesContent": ["import type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { calculateAge, getValueLang } from '~/utils/helpers';\n\nexport function ResumeFullCardAboutEmployee({\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume;\n  dictionaries?: IDictionaries;\n}): JSX.Element {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:about_employee')}\n      </Text>\n      {resume?.job_position?.description && <DataField data={resume?.job_position?.description} />}\n      <Box gap='24px'>\n        <DataField\n          label={t('user:gender')}\n          data={getValueLang(resume?.general_information?.gender_name, userContext.language)}\n        />\n        <DataField\n          label={t('user:age')}\n          data={calculateAge(resume?.general_information?.birthdate?.en).toString()}\n        />\n      </Box>\n\n      {resume?.additional_information?.languages?.length &&\n        resume?.additional_information?.languages?.[0].language_id && (\n          <DataField variant='custom' label={t('user:language_knowledge')}>\n            <Box flexDirection='column' flexWrap='wrap' gap='8px'>\n              {resume?.additional_information?.languages?.map((item) => (\n                <DataField\n                  key={item.language_id}\n                  data={`${getValueLang(item.language_name, userContext.language) || ''} (${\n                    getValueLang(item.proficiency_level_name, userContext.language) || ''\n                  })`}\n                />\n              ))}\n            </Box>\n          </DataField>\n        )}\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { getValueLang } from '~/utils/helpers';\n\nexport function ResumeFullCardAdditional({ resume }: { resume?: Resume }): JSX.Element {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:additionals')}\n      </Text>\n      <Box gap='24px'>\n        {resume?.additional_information?.citizenship_name && (\n          <DataField\n            label={t('user:citizenship')}\n            data={getValueLang(\n              resume?.additional_information?.citizenship_name,\n              userContext.language,\n            )}\n          />\n        )}\n        {resume?.location?.relocation_name && (\n          <DataField\n            label={t('user:relocation')}\n            data={getValueLang(resume?.location?.relocation_name, userContext.language)}\n          />\n        )}\n      </Box>\n      <Box gap='24px'>\n        {resume?.additional_information?.religion_name && (\n          <DataField\n            label={t('user:religion')}\n            data={getValueLang(resume?.additional_information?.religion_name, userContext.language)}\n          />\n        )}\n        {resume?.additional_information?.marital_status_name && (\n          <DataField\n            label={t('user:marital_status')}\n            data={getValueLang(\n              resume?.additional_information?.marital_status_name,\n              userContext.language,\n            )}\n          />\n        )}\n      </Box>\n      <Box gap='24px' />\n      {resume?.additional_information?.driver_license_names?.length && (\n        <DataField variant='custom' label={t('user:driver_license')}>\n          <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n            {resume?.additional_information?.driver_license_names?.map((item) => (\n              <BoxDataChips key={item.en}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n      )}\n\n      {resume?.additional_information?.other_license &&\n        resume?.additional_information?.other_license?.[0] && (\n          <DataField variant='custom' label={t('user:other_licenses')}>\n            <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n              {Array.isArray(resume?.additional_information?.other_license) ? (\n                resume?.additional_information?.other_license?.map((item) => (\n                  <BoxDataChips key={item}>\n                    <Text variant={TextVariantEnum.textBody2medium}>{item}</Text>\n                  </BoxDataChips>\n                ))\n              ) : (\n                <BoxDataChips>\n                  <Text variant={TextVariantEnum.textBody2medium}>\n                    {resume?.additional_information?.other_license}\n                  </Text>\n                </BoxDataChips>\n              )}\n            </Box>\n          </DataField>\n        )}\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers';\n\nexport function ResumeFullCardEducation({\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume;\n  dictionaries?: IDictionaries;\n}): JSX.Element {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:education')}\n      </Text>\n      {resume?.education?.map((item) => (\n        <Box flexDirection='column' gap='10px' key={item.specialization_id}>\n          <Box gap='24px'>\n            <DataField\n              label={t('user:education_level')}\n              data={getValueLang(item.education_level_name, userContext.language)}\n            />\n            <DataField label={t('user:institution')} data={item.institution} />\n          </Box>\n          <DataField\n            label={t('user:specialization')}\n            data={getValueLang(item.specialization_name, userContext.language)}\n          />\n          {getValueLang(item.start_year, userContext.language) && (\n            <DataField\n              data={`${\n                getValueLang(item.start_year, userContext.language)\n                  ?.split('-')\n                  .slice(0, 2)\n                  .join('-') || ''\n              } - ${\n                !getValueLang(item.end_year, userContext.language)\n                  ? t('user:present_time')\n                  : getValueLang(item.end_year, userContext.language)\n                      ?.split('-')\n                      .slice(0, 2)\n                      .join('-') || ''\n              }`}\n            />\n          )}\n        </Box>\n      ))}\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxHeading, HeadingInformation } from '~/components/ui/Card';\nimport { BoxAvatar } from '~/components/ui/Card/BoxAvatar';\nimport { DataBox } from '~/components/ui/DataBox';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { DEFAULT_USER_AVATAR } from '~/utils/constants';\nimport { getImageUrl, getSalary } from '~/utils/helpers';\n\nexport function ResumeFullCardHeading({ resume }: { resume?: Resume }): JSX.Element {\n  const { theme, t, userContext } = useApp();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <>\n      <BoxHeading\n        variant={EntityVariantEnum.resume}\n        className='fullCard'\n        sizeVariant={SizeCardVariantEnum.full}\n      >\n        <BoxAvatar variant='search'>\n          <img\n            src={\n              resume?.general_information?.photo_uri\n                ? getImageUrl(resume?.general_information?.photo_uri)\n                : DEFAULT_USER_AVATAR\n            }\n            alt='company logo'\n          />\n        </BoxAvatar>\n\n        <HeadingInformation variant={EntityVariantEnum.resume}>\n          <Text variant={TextVariantEnum.textHeading2} className='title'>\n            {`${resume?.general_information?.first_name || ''} ${\n              resume?.general_information?.last_name || ''\n            }`}\n          </Text>\n\n          <Text variant={TextVariantEnum.textBody1medium} color={theme.user.descriptionTextColor}>\n            {resume?.job_position?.position}\n          </Text>\n\n          {widthScreen >= 768 &&\n            (resume?.job_position?.salary_fixed ||\n              (resume?.job_position?.salary_from && resume?.job_position?.salary_to)) && (\n              <Box>\n                {resume.job_position?.salary_from && resume.job_position?.salary_to ? (\n                  <Text className='price' variant={TextVariantEnum.textHeading3}>\n                    {resume.job_position?.salary_from} - {resume.job_position?.salary_to}\n                    &nbsp;\n                    {getSalary(\n                      resume.job_position.currency_name?.en,\n                      resume.job_position.salary_payout_period_name?.en,\n                      userContext.language,\n                    )}\n                  </Text>\n                ) : (\n                  <Text className='price' variant={TextVariantEnum.textHeading3}>\n                    {resume.job_position?.salary_fixed}&nbsp;\n                    {getSalary(\n                      resume.job_position.currency_name?.en,\n                      resume.job_position.salary_payout_period_name?.en,\n                      userContext.language,\n                    )}\n                  </Text>\n                )}\n              </Box>\n            )}\n        </HeadingInformation>\n      </BoxHeading>\n\n      {widthScreen < 768 &&\n        (resume?.job_position?.salary_fixed ||\n          (resume?.job_position?.salary_from && resume?.job_position?.salary_to)) && (\n          <DataBox variantSize={SizeCardVariantEnum.full} borderBottom={widthScreen < 768}>\n            <Box>\n              {resume?.job_position?.salary_from && resume?.job_position?.salary_to ? (\n                <Text className='price' variant={TextVariantEnum.textHeading3}>\n                  {resume?.job_position?.salary_from} - {resume?.job_position?.salary_to}\n                  &nbsp;\n                  {getSalary(\n                    resume?.job_position?.currency_name?.en,\n                    resume?.job_position?.salary_payout_period_name?.en,\n                    userContext.language,\n                  )}\n                </Text>\n              ) : (\n                <Text className='price' variant={TextVariantEnum.textHeading3}>\n                  {resume?.job_position?.salary_fixed}&nbsp;\n                  {getSalary(\n                    resume?.job_position?.currency_name?.en,\n                    resume?.job_position?.salary_payout_period_name?.en,\n                    userContext.language,\n                  )}\n                </Text>\n              )}\n            </Box>\n          </DataBox>\n        )}\n    </>\n  );\n}\n", "import type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { CheckBox } from '~/components/common/Checkbox';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueFromDictionaries, getValueLang } from '~/utils/helpers';\n\nexport function ResumeFullCardInformation({\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume;\n  dictionaries?: IDictionaries;\n}): JSX.Element {\n  const { theme, t, userContext } = useApp();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:information')}\n      </Text>\n      <Box gap='24px'>\n        {resume?.location?.city_name && (\n          <DataField\n            label={t('user:district')}\n            data={getValueLang(resume.location.city_name, userContext.language)}\n          />\n        )}\n        <DataField label={t('user:phone')} data={resume?.general_information?.phone} />\n      </Box>\n      <DataField label={t('user:email')} data={resume?.general_information?.email} />\n\n      {resume?.job_position?.employment_type_names?.[0] && (\n        <DataField variant='custom' label={t('user:employment')}>\n          <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n            {resume?.job_position?.employment_type_ids?.map((item) => (\n              <BoxDataChips key={item}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueFromDictionaries(dictionaries?.employment, item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n      )}\n\n      {resume?.job_position?.work_feature_names?.[0] && (\n        <DataField variant='custom' label={t('user:work_features')}>\n          <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n            {resume?.job_position?.work_feature_ids?.map((item) => (\n              <BoxDataChips key={item}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueFromDictionaries(dictionaries?.workfeatures, item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n      )}\n      {resume?.location?.business_trips === true && (\n        <DataField variant='custom'>\n          <Box flexDirection='column' gap='8px' padding='8px 0'>\n            <CheckBox\n              disabled\n              name='fullTime'\n              label={t('user:business_trips')}\n              checked={resume?.location?.business_trips}\n            />\n          </Box>\n        </DataField>\n      )}\n      <DataField\n        label={t('user:salary_payout_period')}\n        data={getValueLang(resume?.job_position?.salary_payout_period_name, userContext.language)}\n      />\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { getValueLang } from '~/utils/helpers';\n\nexport function ResumeFullCardSkills({ resume }: { resume?: Resume }): JSX.Element {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:skills')}\n      </Text>\n      <DataField variant='custom'>\n        <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n          {resume?.additional_information?.skill_names?.map((item) => (\n            <BoxDataChips key={item.en}>\n              <Text variant={TextVariantEnum.textBody2medium}>\n                {getValueLang(item, userContext.language)}\n              </Text>\n            </BoxDataChips>\n          ))}\n        </Box>\n      </DataField>\n    </BoxDataFieldsInner>\n  );\n}\n", "import type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataFieldsInner } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers';\n\nexport function ResumeFullCardWorkExperience({\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume;\n  dictionaries?: IDictionaries;\n}): JSX.Element {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxDataFieldsInner>\n      <Text variant={TextVariantEnum.textHeading2} className='title'>\n        {t('user:work_experience')}\n      </Text>\n      {resume?.work_experience?.map((item) => (\n        <Box flexDirection='column' gap='10px' key={item.specialization_id}>\n          <Box gap='24px'>\n            <DataField\n              label={t('user:specialization')}\n              data={getValueLang(item.specialization_name, userContext.language)}\n            />\n            <DataField label={t('user:position')} data={item.position} />\n          </Box>\n          <DataField label={t('user:company')} data={item.company} />\n          {getValueLang(item.from, userContext.language) && (\n            <DataField\n              data={`${\n                getValueLang(item.from, userContext.language)?.split('-').slice(0, 2).join('-') ||\n                ''\n              } - ${\n                !getValueLang(item.to, userContext.language)\n                  ? t('user:present_time')\n                  : getValueLang(item.to, userContext.language)?.split('-').slice(0, 2).join('-') ||\n                    ''\n              }`}\n            />\n          )}\n          {item.description && <DataField label={t('user:description')} data={item.description} />}\n        </Box>\n      ))}\n    </BoxDataFieldsInner>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { ResponseType } from 'shared/v2/responses';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { BoxControlContainer } from '~/components/entities/BoxControl';\nimport {\n  ResumeFullCardAboutEmployee,\n  ResumeFullCardAdditional,\n  ResumeFullCardEducation,\n  ResumeFullCardHeading,\n  ResumeFullCardInformation,\n  ResumeFullCardSkills,\n  ResumeFullCardWorkExperience,\n} from '~/components/entities/cardComponents/fullCard';\nimport SignInForRequest from '~/components/pages/Search/SignInForRequest';\nimport { BoxDataFields, CardContainer } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport type { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { ResponseState } from '~/types/enums/responseState';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nexport function ResumeFullCardWidget({\n  resume,\n  dictionaries,\n  handleRequest,\n  stateResponse,\n  typeResponse,\n  variant,\n  status,\n  responseId,\n  responseAction,\n}: {\n  resume?: Resume;\n  dictionaries?: IDictionaries;\n  handleRequest?: () => void;\n  stateResponse?: ResponseState | string;\n  typeResponse?: ResponseType;\n  variant?: PageVariantEnum;\n  status?: JSX.Element;\n  responseId?: string;\n  responseAction?: boolean;\n}): JSX.Element {\n  const { userContext } = useApp();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <BoxCard nameCard={ResumeCardEnum.information}>\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <ResumeFullCardHeading resume={resume} />\n        {status && (\n          <Box padding='16px 0 0' width='fit-content'>\n            {status}\n          </Box>\n        )}\n        <BoxDataFields>\n          <ResumeFullCardAboutEmployee resume={resume} dictionaries={dictionaries} />\n          <ResumeFullCardInformation resume={resume} dictionaries={dictionaries} />\n          {resume?.work_experience?.length && resume?.work_experience[0]?.from && (\n            <ResumeFullCardWorkExperience resume={resume} />\n          )}\n          {resume?.education?.length && resume?.education[0]?.institution && (\n            <ResumeFullCardEducation resume={resume} dictionaries={dictionaries} />\n          )}\n          {resume?.additional_information?.skill_ids?.[0] && (\n            <ResumeFullCardSkills resume={resume} />\n          )}\n          {(resume?.additional_information?.citizenship_name ||\n            resume?.location?.relocation_name ||\n            resume?.additional_information?.religion_name ||\n            resume?.additional_information?.marital_status_name ||\n            resume?.additional_information?.driver_license_names?.length ||\n            resume?.additional_information?.other_license?.length) && (\n            <ResumeFullCardAdditional resume={resume} />\n          )}\n        </BoxDataFields>\n        <BoxControlContainer\n          variant={variant}\n          id={resume?.id}\n          responseId={responseId}\n          typeCard='full'\n          handleRequest={handleRequest}\n          stateResponse={stateResponse}\n          typeResponse={typeResponse}\n          typeEntity={EntityVariantEnum.resume}\n          responseAction={responseAction}\n        />\n        {!userContext?.user?.isAuthenticated && widthScreen >= 1280 && (\n          <SignInForRequest variant={EntityVariantEnum.resume} />\n        )}\n      </CardContainer>\n    </BoxCard>\n  );\n}\n"],
  "mappings": "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",
  "names": ["ResumeFullCardAboutEmployee", "resume", "dictionaries", "t", "userContext", "useApp", "TextVariantEnum", "textHeading2", "job_position", "description", "getValueLang", "general_information", "gender_name", "language", "calculateAge", "birthdate", "en", "toString", "additional_information", "languages", "length", "language_id", "map", "item", "language_name", "proficiency_level_name", "import_jsx_dev_runtime", "ResumeFullCardAdditional", "resume", "t", "userContext", "useApp", "TextVariantEnum", "textHeading2", "additional_information", "citizenship_name", "getValueLang", "language", "location", "relocation_name", "religion_name", "marital_status_name", "driver_license_names", "length", "map", "item", "textBody2medium", "en", "other_license", "Array", "isArray", "import_jsx_dev_runtime", "ResumeFullCardEducation", "resume", "dictionaries", "t", "userContext", "useApp", "TextVariantEnum", "textHeading2", "education", "map", "item", "getValueLang", "education_level_name", "language", "institution", "specialization_name", "start_year", "split", "slice", "join", "end_year", "specialization_id", "import_jsx_dev_runtime", "ResumeFullCardHeading", "resume", "theme", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "EntityVariantEnum", "SizeCardVariantEnum", "full", "general_information", "photo_uri", "getImageUrl", "DEFAULT_USER_AVATAR", "TextVariantEnum", "textHeading2", "first_name", "last_name", "textBody1medium", "user", "descriptionTextColor", "job_position", "position", "salary_fixed", "salary_from", "salary_to", "textHeading3", "getSalary", "currency_name", "en", "salary_payout_period_name", "language", "import_jsx_dev_runtime", "ResumeFullCardInformation", "resume", "dictionaries", "theme", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "TextVariantEnum", "textHeading2", "location", "city_name", "getValueLang", "language", "general_information", "phone", "email", "job_position", "employment_type_names", "employment_type_ids", "map", "item", "textBody2medium", "getValueFromDictionaries", "employment", "work_feature_names", "work_feature_ids", "workfeatures", "business_trips", "salary_payout_period_name", "import_jsx_dev_runtime", "ResumeFullCardSkills", "resume", "t", "userContext", "useApp", "TextVariantEnum", "textHeading2", "additional_information", "skill_names", "map", "item", "textBody2medium", "getValueLang", "language", "en", "import_jsx_dev_runtime", "ResumeFullCardWorkExperience", "resume", "dictionaries", "t", "userContext", "useApp", "TextVariantEnum", "textHeading2", "work_experience", "map", "item", "getValueLang", "specialization_name", "language", "position", "company", "from", "split", "slice", "join", "to", "description", "specialization_id", "import_jsx_dev_runtime", "ResumeFullCardWidget", "resume", "dictionaries", "handleRequest", "stateResponse", "typeResponse", "variant", "status", "responseId", "responseAction", "userContext", "useApp", "widthScreen", "useScreenWidth", "ResumeCardEnum", "information", "motion", "div", "opacity", "type", "bounce", "duration", "work_experience", "length", "from", "education", "institution", "additional_information", "skill_ids", "citizenship_name", "location", "relocation_name", "religion_name", "marital_status_name", "driver_license_names", "other_license", "id", "EntityVariantEnum", "user", "isAuthenticated"]
}
