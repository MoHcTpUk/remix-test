{
  "version": 3,
  "sources": ["../../../app/components/common/Tabs/index.tsx", "../../../app/components/entities/Search/index.tsx", "../../../app/components/entities/Search/styles.ts", "../../../app/components/common/Tabs/styles.ts"],
  "sourcesContent": ["import { Link } from '@remix-run/react';\nimport React from 'react';\nimport type { EntityCommonDictionary } from 'shared/client/data-contracts';\n\nimport { Search } from '~/components/entities/Search';\nimport { useApp } from '~/hooks';\nimport type { TabProps } from '~/types/interfaces/iTabsSearch';\n\nimport { Text } from '../Text';\nimport { TextVariantEnum } from '../Text/enums';\nimport { TabButton, TabContainer } from './styles';\n\nfunction TabSwitcher({\n  query,\n  search_by_city,\n  tabs,\n  activeTab,\n  handleTabClick,\n  isSearch,\n  location,\n}: {\n  query?: string;\n  search_by_city?: string;\n  tabs?: TabProps[];\n  activeTab?: TabProps;\n  handleTabClick?: (tab: TabProps) => void;\n  isSearch?: boolean;\n  location?: EntityCommonDictionary[];\n}) {\n  const { theme, t } = useApp();\n  return (\n    <>\n      <TabContainer>\n        {tabs?.map((tab, index) => (\n          <React.Fragment key={tab.id}>\n            {isSearch ? (\n              <Link to={`/search/${tab?.id || ''}`}>\n                <TabButton\n                  type='button'\n                  isActive={activeTab?.id === tab.id}\n                  onClick={() => handleTabClick && handleTabClick(tab)}\n                >\n                  <Text\n                    variant={TextVariantEnum.textBody2}\n                    color={\n                      activeTab?.id === tab.id\n                        ? theme.tabs.activeTabColor\n                        : theme.tabs.disabledTabColor\n                    }\n                  >\n                    {tab.label}\n                    {activeTab?.id === tab.id}\n                  </Text>\n                </TabButton>\n              </Link>\n            ) : (\n              <TabButton\n                type='button'\n                isActive={activeTab?.id === tab.id}\n                onClick={() => handleTabClick && handleTabClick(tab)}\n              >\n                <Text\n                  variant={TextVariantEnum.textBody2}\n                  color={\n                    activeTab?.id === tab.id\n                      ? theme.tabs.activeTabColor\n                      : theme.tabs.disabledTabColor\n                  }\n                >\n                  {tab.label}\n                  {activeTab?.id === tab.id}\n                </Text>\n              </TabButton>\n            )}\n          </React.Fragment>\n        ))}\n      </TabContainer>\n      <Search query={query} search_by_city={search_by_city} location={location} />\n    </>\n  );\n}\n\nexport default TabSwitcher;\n", "import type { ChangeEvent } from 'react';\nimport { memo, useRef, useState } from 'react';\nimport type { EntityCommonDictionary } from 'shared/client/data-contracts';\n\nimport SvgMap from '~/components/common/Icons/Map';\nimport SvgSearch from '~/components/common/Icons/Search';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\n\nimport {\n  DropDownCities,\n  DropDownOption,\n  MainInputSearch,\n  MiddleBorder,\n  PlaceInputSearch,\n  SearchContainer,\n  SvgWrapper,\n  WrapperInput,\n} from './styles';\n\nexport const Search = memo(\n  ({\n    query,\n    search_by_city,\n    location,\n  }: {\n    query?: string;\n    search_by_city?: string;\n    location?: EntityCommonDictionary[];\n  }) => {\n    const { t, userContext, theme } = useApp();\n\n    const searchRef = useRef<HTMLInputElement>(null);\n    const [city, setCity] = useState(search_by_city);\n    const [dropDownCities, setDropDownCities] = useState(false);\n    const [selectedCity, setSelectedCity] = useState('');\n\n    const handleChangeCity = (e: ChangeEvent<HTMLInputElement>) => {\n      const inputValue = e.target.value;\n      setCity(inputValue);\n      setSelectedCity(inputValue);\n      setDropDownCities(!!inputValue);\n    };\n\n    const handleSelectCity = (city?: string) => {\n      if (city) {\n        setSelectedCity(city);\n        setCity(city);\n        setDropDownCities(false);\n      }\n    };\n\n    const filteredLocations = location?.filter((loc) =>\n      loc[userContext.language]?.title?.toLowerCase()?.includes(city?.toLowerCase() || ''),\n    );\n\n    const handleBlur = () => {\n      if (!selectedCity) {\n        setCity('');\n        setDropDownCities(false);\n      }\n    };\n\n    return (\n      <SearchContainer>\n        <WrapperInput>\n          <MainInputSearch\n            name='q'\n            placeholder={t('home:job_title_keywords_or_company')}\n            type='text'\n            ref={searchRef}\n            defaultValue={query}\n            autoComplete='off'\n          />\n          <SvgWrapper search>\n            <SvgSearch color={theme.search.svgColor} />\n          </SvgWrapper>\n        </WrapperInput>\n\n        <MiddleBorder />\n\n        <WrapperInput>\n          <PlaceInputSearch\n            placeholder={t('home:location')}\n            type='text'\n            name='search_by_city'\n            value={city}\n            onChange={(e) => handleChangeCity(e)}\n            onBlur={handleBlur}\n            autoComplete='off'\n          />\n          <SvgWrapper>\n            <SvgMap color={theme.search.svgColor} />\n          </SvgWrapper>\n          {dropDownCities && (\n            <DropDownCities>\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: '8px',\n                  overflow: 'auto',\n                  padding: filteredLocations?.[0] ? '12px 0 10px 0' : '0px',\n                }}\n              >\n                {filteredLocations?.map((loc) => (\n                  <DropDownOption\n                    key={loc.id}\n                    onClick={() => handleSelectCity(loc[userContext.language]?.title)}\n                  >\n                    <Text\n                      variant={TextVariantEnum.textBody2}\n                      color={theme.search.variantSearchCities}\n                    >\n                      {loc[userContext.language]?.title}\n                    </Text>\n                  </DropDownOption>\n                ))}\n              </div>\n            </DropDownCities>\n          )}\n        </WrapperInput>\n      </SearchContainer>\n    );\n  },\n);\n", "import styled from 'styled-components';\n\nimport { FONT_SIZES_DESC, FONT_SIZES_MOB } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\n\nexport const SearchContainer = styled.div`\n  width: 100%;\n  background-color: ${({ theme }) => theme.search.backgroundWrapper};\n  display: flex;\n  flex-direction: column;\n  border-radius: 0 0 8px 8px;\n\n  @media (min-width: 768px) {\n    min-height: 64px;\n    flex-direction: row;\n    border-radius: 0 0 12px 12px;\n  }\n`;\n\nexport const SvgWrapper = styled.div<{ search?: boolean }>`\n  display: flex;\n  position: absolute;\n  top: 16px;\n  left: 24px;\n  @media (min-width: 768px) {\n    top: 20px;\n    left: ${({ search }) => (search ? '20px' : '24px')};\n  }\n  @media (min-width: 1024px) {\n    left: 24px;\n  }\n  @media (min-width: 1280px) {\n    left: ${({ search }) => (search ? '40px' : '16px')};\n  }\n`;\n\nexport const WrapperInput = styled.div`\n  width: 100%;\n  position: relative;\n\n  :focus-within {\n    ${SvgWrapper} svg path {\n      stroke: ${({ theme }) => theme.search.svgFocusColor};\n    }\n  }\n`;\n\nexport const MainInputSearch = styled.input`\n  background-color: ${({ theme }) => theme.search.backgroundWrapper};\n  padding: 18px 34px 14px 56px;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  min-height: 56px;\n  font-size: ${FONT_SIZES_MOB[TextVariantEnum.textBody2]};\n\n  &:nth-child(1) {\n    border-bottom: 1px solid ${({ theme }) => theme.search.middleBorderColor};\n  }\n\n  @media (min-width: 768px) {\n    border-radius: 0 0 0 12px;\n    padding: 22px 24px 18px 56px;\n    font-size: ${FONT_SIZES_DESC[TextVariantEnum.textBody2]};\n    &:nth-child(1) {\n      border-bottom: none;\n    }\n  }\n  @media (min-width: 1024px) {\n    padding: 22px 24px 18px 60px;\n  }\n  @media (min-width: 1280px) {\n    padding: 22px 24px 18px 76px;\n  }\n`;\n\nexport const PlaceInputSearch = styled.input`\n  background-color: ${({ theme }) => theme.search.backgroundWrapper};\n  padding: 18px 34px 14px 56px;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  min-height: 56px;\n  border-radius: 0px 0px 8px 8px;\n  font-size: ${FONT_SIZES_MOB[TextVariantEnum.textBody2]};\n\n  @media (min-width: 768px) {\n    padding: 22px 24px 18px 64px;\n    border-radius: 0px 0px 12px 0px;\n    font-size: ${FONT_SIZES_DESC[TextVariantEnum.textBody2]};\n  }\n  @media (min-width: 1280px) {\n    padding: 22px 24px 18px 52px;\n  }\n`;\n\nexport const MiddleBorder = styled.div`\n  display: none;\n  @media (min-width: 768px) {\n    display: flex;\n    min-width: 1px;\n    height: 40px;\n    background-color: ${({ theme }) => theme.search.middleBorderColor};\n    margin: 12px 0;\n  }\n`;\n\nexport const DropDownCities = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: ${({ theme }) => theme.search.backgroundWrapper};\n  position: absolute;\n  max-height: 328px;\n  overflow: hidden;\n  padding-left: 42px;\n  top: 50px;\n  z-index: 2;\n  border-radius: 0 0 16px 16px;\n  gap: 8px;\n\n  @media (min-width: 768px) {\n    top: 54px;\n  }\n`;\n\nexport const DropDownOption = styled.div`\n  cursor: pointer;\n  & span:hover {\n    color: ${({ theme }) => theme.accentTextColor};\n  }\n`;\n", "import styled from 'styled-components';\n\nimport { FONT_SIZES_DESC, FONT_SIZES_MOB } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport type { TabProps } from '~/types/interfaces/iTabsSearch';\n\nexport const TabContainer = styled.div`\n  display: flex;\n  align-items: center;\n  background-color: ${({ theme }) => theme.tabs.tabContainer.backgroundColor};\n  border-radius: 8px 8px 0 0;\n  width: 100%;\n  a {\n    width: 100%;\n    white-space: nowrap;\n    min-width: fit-content;\n  }\n  @media (min-width: 768px) {\n    height: 64px;\n    border-radius: 12px 12px 0 0;\n    a {\n      max-width: fit-content;\n    }\n  }\n`;\n\nexport const TabButton = styled.button<{ isActive: boolean }>`\n  cursor: pointer;\n  width: 100%;\n  min-width: fit-content;\n  background-color: ${({ isActive, theme }) =>\n    isActive ? theme.tabs.tabButton.activeBackgroundColor : theme.tabs.tabButton.backgroundColor};\n  padding: 12px 14px;\n  border-radius: 8px 8px 0 0;\n  transition: all 0.2s cubic-bezier(0.2, 0, 0, 1);\n  span {\n    font-size: ${FONT_SIZES_MOB[TextVariantEnum.textBody2]};\n    transition: all 0.2s cubic-bezier(0.2, 0, 0, 1);\n  }\n  &:hover {\n    background-color: ${({ isActive, theme }) =>\n      isActive ? theme.tabs.tabButton.activeBackgroundColor : theme.tabs.tabButton.backgroundColor};\n    span {\n      color: ${({ theme }) => theme.tabs.tabButton.focusSpanActiveBackgroundColor};\n    }\n  }\n  &:active,\n  :focus {\n    background-color: ${({ isActive, theme }) =>\n      isActive\n        ? theme.tabs.tabButton.focusBackgroundColor\n        : theme.tabs.tabButton.focusActiveBackgroundColor};\n    span {\n      color: ${({ theme }) => theme.tabs.tabButton.focusSpanActiveBackgroundColor};\n    }\n  }\n\n  @media (min-width: 768px) {\n    max-width: fit-content;\n    padding: 21px 40px 19px;\n    border-radius: 12px 12px 0 0;\n    span {\n      font-size: ${FONT_SIZES_DESC[TextVariantEnum.textBody2]};\n    }\n  }\n\n  @media (min-width: 1024px) {\n    max-width: fit-content;\n    padding: 21px 48px 19px;\n  }\n\n  @media (max-width: 340px) {\n    span {\n      font-size: 12px;\n    }\n  }\n`;\n\nexport const MiddleBorder = styled.div<{ index: number; activeTab: TabProps; tabs: TabProps[] }>`\n  min-width: 1px;\n  height: 26px;\n  transition: all 0.15s ease-in;\n  background-color: ${({ theme }) => theme.tabs.middleBorder.backgroundColor};\n  visibility: ${({ index, activeTab, tabs }) =>\n    index !== tabs.length - 1 &&\n    activeTab.id !== tabs[index]?.id &&\n    activeTab.id !== tabs[index + 1]?.id\n      ? 'visible'\n      : 'hidden'};\n  @media (min-width: 768px) {\n    height: 44px;\n  }\n`;\n\nexport const TabContent = styled.div`\n  padding: 16px;\n  border: 2px solid lightblue;\n  margin-top: 16px;\n`;\n"],
  "mappings": "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",
  "names": ["import_react", "Search", "memo", "query", "search_by_city", "location", "t", "userContext", "theme", "useApp", "searchRef", "useRef", "city", "setCity", "useState", "dropDownCities", "setDropDownCities", "selectedCity", "setSelectedCity", "handleChangeCity", "e", "inputValue", "target", "value", "handleSelectCity", "filteredLocations", "filter", "loc", "language", "title", "toLowerCase", "includes", "handleBlur", "search", "svgColor", "display", "flexDirection", "gap", "overflow", "padding", "map", "TextVariantEnum", "textBody2", "variantSearchCities", "id", "MiddleBorder", "import_jsx_dev_runtime", "TabSwitcher", "query", "search_by_city", "tabs", "activeTab", "handleTabClick", "isSearch", "location", "theme", "t", "useApp", "map", "tab", "index", "React", "id", "TextVariantEnum", "textBody2", "activeTabColor", "disabledTabColor", "label"]
}
