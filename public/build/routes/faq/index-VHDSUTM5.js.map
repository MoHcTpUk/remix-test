{
  "version": 3,
  "sources": ["../../../../app/routes/faq/index.tsx", "../../../../app/components/pages/Faq/index.tsx", "../../../../app/components/common/Accordion/index.tsx", "../../../../app/components/common/Accordion/styles.ts", "../../../../app/components/pages/Faq/styles.ts"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport type { EntityCreateFeedbackRequest } from 'shared/client/data-contracts';\nimport { Feedback } from 'shared/client/Feedback';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { DefaultApi } from 'shared/v2/feeds';\n\nimport { FaqComponent } from '~/components/pages/Faq';\nimport { badRequest } from '~/utils/request.server';\nimport { validateEmail } from '~/utils/validations';\n\nexport const loader = async ({ request, context }: LoaderArgs) => {\n  const client = new Feedback();\n  const clientFaq = ClientFactory.createClient(DefaultApi, context.session);\n  const [faq] = await Promise.all([await clientFaq.getFaq()]);\n\n  return json({ client, faq });\n};\n\nexport const action = async ({ request }: ActionArgs) => {\n  const formText = await request.text();\n  const parsedData = qs.parse(formText);\n  let bodyFormData: EntityCreateFeedbackRequest = {};\n  const clientFeedback = new Feedback();\n\n  try {\n    bodyFormData = {\n      name: parsedData.name?.toString() || undefined,\n      email: parsedData.email?.toString() || undefined,\n      subject: parsedData.subject?.toString() || undefined,\n      text: parsedData.text?.toString() || undefined,\n    };\n\n    const fieldErrors = {\n      email: validateEmail(parsedData.email?.toString()),\n    };\n\n    if (Object.values(fieldErrors).some(Boolean)) {\n      return badRequest({ fieldErrors, bodyFormData, formError: null, success: false });\n    }\n\n    const res = await clientFeedback.feedbackCreate(bodyFormData);\n  } catch (error) {\n    // Handle the error\n    badRequest({\n      fieldErrors: error,\n      formError: {\n        en: 'Some data entered incorrectly',\n        th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n      },\n      success: false,\n    });\n  }\n\n  return json({ bodyFormData, fieldErrors: null, formError: null, success: true });\n};\n\nexport default function Index() {\n  const actionData = useActionData<typeof action>();\n  const data = useLoaderData<typeof loader>();\n  const faq = data.faq.data;\n\n  return <FaqComponent actionData={actionData} faq={faq} />;\n}\n", "import { Form, useNavigation } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useEffect, useRef, useState } from 'react';\nimport { lng } from 'shared/utils';\nimport type { Faq, FaqContent } from 'shared/v2/feeds';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Accordion } from '~/components/common/Accordion';\nimport { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { BoxControl } from '~/components/common/Card/styles';\nimport { Input } from '~/components/common/Input';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxFields } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport type { LanguageEnum } from '~/types/enums/languageEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IFeedback } from '~/types/interfaces/iForms';\n\nimport { Answer, Description, FieldWithDesc, List, SubText } from './styles';\n\nfunction mapMaterialsToViewModel(material: Faq, language: LanguageEnum): FaqContent {\n  return {\n    title: lng(material.en?.title, material.th?.title, language),\n    text: {\n      subtitle: lng(material.en?.text.subtitle, material.th?.text.subtitle, language),\n      steps: lng(material.en?.text.steps, material.th?.text.steps, language),\n    },\n  } as FaqContent;\n}\n\nexport const FaqComponent = memo(\n  ({ actionData, faq }: { actionData?: IFeedback; faq: Faq[] }): JSX.Element => {\n    const widthScreen = useScreenWidth();\n    const { t, userContext } = useApp();\n\n    const faqItems = faq?.map((item) => mapMaterialsToViewModel(item, userContext.language));\n\n    const navigation = useNavigation();\n    const isAdding = navigation.state === 'submitting';\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const handleCancel = () => {\n      formRef.current?.reset();\n    };\n\n    const [inputValue, setInputValue] = useState({\n      nameValue: '',\n      emailValue: '',\n      subjectValue: '',\n      messageValue: '',\n    });\n    const { nameValue, emailValue, subjectValue, messageValue } = inputValue;\n\n    const emptyFields = !nameValue || !emailValue || !subjectValue || !messageValue;\n\n    useEffect(() => {\n      if (!isAdding) {\n        formRef.current?.reset();\n        setInputValue({ nameValue: '', emailValue: '', subjectValue: '', messageValue: '' });\n      }\n    }, [isAdding]);\n\n    return (\n      <Box\n        flexDirection='column'\n        width='100%'\n        gap={widthScreen > 1024 ? '24px' : '16px'}\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        <BoxCard variant={VariantCardEnum.materials}>\n          <Text variant={TextVariantEnum.textHeading3}>\n            {t(\n              'home:here_you_can_find_answers_to_frequently_asked_questions_or_send_a_message_to_our_support_team',\n            )}\n          </Text>\n          <SubText>\n            <Text variant={TextVariantEnum.textBody2}>\n              {t(\n                'home:for_registered_users_who_need_help_please_contact_us_and_we_will_get_back_to_you_in_about_1_hour',\n              )}\n            </Text>\n          </SubText>\n        </BoxCard>\n\n        {faqItems?.map((faqItem, index) => (\n          <BoxCard key={faqItem?.title} variant={VariantCardEnum.materials}>\n            <Accordion title={faqItem?.title}>\n              <Answer>\n                {faqItem?.text?.subtitle}\n                <List index={index} style={{ listStyle: 'inside', listStyleType: 'auto' }}>\n                  {faqItem?.text?.steps.map((stepItem) => {\n                    const key = uuidv4();\n                    return (\n                      <li style={{ listStyle: 'outside', listStyleType: 'auto' }} key={key}>\n                        {stepItem}\n                      </li>\n                    );\n                  })}\n                </List>\n              </Answer>\n            </Accordion>\n          </BoxCard>\n        ))}\n\n        <Form method='POST' style={{ width: '100%' }} ref={formRef}>\n          <BoxCard variant={VariantCardEnum.materials}>\n            <Text variant={TextVariantEnum.textHeading3}>\n              {t('home:we_are_here_to_help_send_us_a_message_to_get_help')}\n            </Text>\n            <SubText>\n              <Text variant={TextVariantEnum.textBody1medium}>\n                {t(\n                  'home:please_fill_in_all_the_fields_they_are_required_so_that_we_can_help_you_as_efficiently_and_quickly_as_possible',\n                )}\n              </Text>\n            </SubText>\n\n            <BoxFields>\n              <Input\n                placeholder={t('user:your_name')}\n                id='i_name'\n                name='name'\n                value={nameValue}\n                onChange={(event) =>\n                  setInputValue((prevState) => ({ ...prevState, nameValue: event }))\n                }\n              />\n              <FieldWithDesc>\n                <Description>\n                  <Text variant={TextVariantEnum.textBody1medium}>\n                    {t('home:what_is_your_email_address')}\n                  </Text>\n                  <Text variant={TextVariantEnum.textBody2}>\n                    {t('home:please_enter_an_email_address_where_we_can_contact_you')}\n                  </Text>\n                </Description>\n                <Input\n                  placeholder={t('user:email')}\n                  id='i_email'\n                  name='email'\n                  value={emailValue}\n                  aria-invalid={\n                    actionData?.fieldErrors?.email?.[userContext.language] ? true : undefined\n                  }\n                  errorText={actionData?.fieldErrors?.email?.[userContext.language]}\n                  onChange={(event) =>\n                    setInputValue((prevState) => ({ ...prevState, emailValue: event }))\n                  }\n                />\n              </FieldWithDesc>\n\n              <FieldWithDesc>\n                <Description>\n                  <Text variant={TextVariantEnum.textBody1medium}>\n                    {t('home:what_do_you_need_help_with')}\n                  </Text>\n                  <Text variant={TextVariantEnum.textBody2}>\n                    {t('home:this_helps_make_sure_you_get_the_right_answer_fast')}\n                  </Text>\n                </Description>\n                <Input\n                  placeholder={t('user:subject')}\n                  id='i_subject'\n                  name='subject'\n                  value={subjectValue}\n                  onChange={(event) =>\n                    setInputValue((prevState) => ({ ...prevState, subjectValue: event }))\n                  }\n                />\n              </FieldWithDesc>\n\n              <FieldWithDesc>\n                <Description>\n                  <Text variant={TextVariantEnum.textBody1medium}>\n                    {t('home:what_is_your_question_comment_or_issue')}\n                  </Text>\n                  <Text variant={TextVariantEnum.textBody2}>\n                    {t('home:the_more_we_know_the_better_we_can_help_you_share_all_the_details')}\n                  </Text>\n                </Description>\n                <Input\n                  placeholder={t('user:message')}\n                  id='i_text'\n                  name='text'\n                  value={messageValue}\n                  onChange={(event) =>\n                    setInputValue((prevState) => ({ ...prevState, messageValue: event }))\n                  }\n                />\n              </FieldWithDesc>\n            </BoxFields>\n\n            <BoxControl>\n              <Button priority='secondary' fullwidth onClick={() => handleCancel()}>\n                <Text variant={TextVariantEnum.textBody2}>{t('common:cancel')}</Text>\n              </Button>\n\n              <Button priority='primary' fullwidth type='submit' disabled={emptyFields || isAdding}>\n                <Text variant={TextVariantEnum.textBody2}> {t('common:send')}</Text>\n              </Button>\n            </BoxControl>\n          </BoxCard>\n        </Form>\n      </Box>\n    );\n  },\n);\n", "import { AnimatePresence, motion } from 'framer-motion';\nimport { type ReactNode, useState } from 'react';\n\nimport { Text } from '~/components/common/Text';\nimport { IconEnum } from '~/types/enums/iconEnum';\n\nimport { Box } from '../Box';\nimport Button from '../Button';\nimport { Icon } from '../Icon';\nimport { TextVariantEnum } from '../Text/enums';\nimport { Container, Description, Emoji, Title, TitleContainer } from './styles';\n\nexport type AccordionProps = {\n  children: ReactNode;\n  title: string | undefined;\n};\n\nexport function Accordion({ title, children }: AccordionProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Container>\n      <TitleContainer open={open}>\n        <Title>\n          <Emoji>\n            <Icon name={IconEnum.emojiFaq} />\n          </Emoji>\n          <Text variant={TextVariantEnum.textHeading3}>{title}</Text>\n        </Title>\n        <Button priority='secondary' onlyIcon onClick={() => setOpen(!open)}>\n          <Icon name={IconEnum.arrowLeft} />\n        </Button>\n      </TitleContainer>\n      <AnimatePresence initial={false}>\n        {open && (\n          <Box\n            width='100%'\n            as={motion.div}\n            initial={{ height: 0 }}\n            animate={{ height: 'auto' }}\n            exit={{ height: 0 }}\n            transition={{ type: 'spring', duration: 0.4, bounce: 0 }}\n            style={{ overflow: 'hidden' }}\n          >\n            <Description>{children}</Description>\n          </Box>\n        )}\n      </AnimatePresence>\n    </Container>\n  );\n}\n", "import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nexport const TitleContainer = styled.div<{ open: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  & button {\n    transform: ${({ open }) => (open ? 'rotate(90deg)' : 'rotate(180deg)')};\n    transition: all 0.6s cubic-bezier(0.2, 0, 0, 1);\n  }\n`;\nexport const Title = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n\n  @media (min-width: 768px) {\n    gap: 16px;\n  }\n`;\nexport const Description = styled.div`\n  padding-top: 16px;\n  margin-top: 16px;\n  border-top: 1px solid ${({ theme }) => theme.user.borderColor};\n`;\nexport const Emoji = styled.span`\n  display: flex;\n  margin-top: -3px;\n`;\n", "import styled from 'styled-components';\n\nexport const SubText = styled.div`\n  padding-top: 16px;\n  margin-top: 8px;\n  border-top: 1px solid ${({ theme }) => theme.user.borderColor};\n\n  @media (min-width: 768px) {\n    margin-top: 0;\n  }\n`;\n\nexport const Answer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n\n  @media (min-width: 768px) {\n    gap: 24px;\n  }\n`;\nexport const FieldWithDesc = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\nexport const List = styled.ul<{ index?: number }>`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ index }) => (index === 1 ? '18px' : '16px')};\n  padding-left: 24px;\n  letter-spacing: -0.364px;\n\n  @media (min-width: 768px) {\n    gap: ${({ index }) => (index === 1 ? '24px' : '18px')};\n  }\n`;\n"],
  "mappings": "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",
  "names": ["import_react", "Accordion", "title", "children", "open", "setOpen", "useState", "IconEnum", "emojiFaq", "TextVariantEnum", "textHeading3", "arrowLeft", "motion", "div", "height", "type", "duration", "bounce", "overflow", "Description", "import_jsx_dev_runtime", "mapMaterialsToViewModel", "material", "language", "title", "lng", "en", "th", "text", "subtitle", "steps", "FaqComponent", "memo", "actionData", "faq", "widthScreen", "useScreenWidth", "t", "userContext", "useApp", "faqItems", "map", "item", "navigation", "useNavigation", "isAdding", "state", "formRef", "useRef", "handleCancel", "current", "reset", "inputValue", "setInputValue", "useState", "nameValue", "emailValue", "subjectValue", "messageValue", "emptyFields", "useEffect", "motion", "div", "opacity", "VariantCardEnum", "materials", "TextVariantEnum", "textHeading3", "textBody2", "faqItem", "index", "listStyle", "listStyleType", "stepItem", "key", "uuidv4", "width", "textBody1medium", "event", "prevState", "Description", "fieldErrors", "email", "undefined", "import_jsx_dev_runtime", "actionData", "useActionData", "data", "useLoaderData", "faq"]
}
