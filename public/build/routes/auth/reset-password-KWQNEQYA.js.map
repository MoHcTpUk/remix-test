{
  "version": 3,
  "sources": ["../../../../app/routes/auth/reset-password.tsx", "../../../../app/components/pages/Auth/ResetPassword/index.tsx", "../../../../app/components/pages/Auth/ResetPassword/styles.ts"],
  "sourcesContent": ["import type { ActionArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData } from '@remix-run/react';\nimport { UserService } from 'shared/client/UserService';\nimport routes from 'shared/routing/routes';\n\nimport { ResetPassword } from '~/components/pages/Auth/ResetPassword';\nimport type { IResetPassword } from '~/types/interfaces/iForms';\nimport { badRequest } from '~/utils/request.server';\nimport { validatePassword, validatePasswordConfirm } from '~/utils/validations';\n\nexport const action = async ({ request, context }: ActionArgs) => {\n  const formData = await request.formData();\n\n  const password = formData.get('password')?.toString();\n  const password_confirm = formData.get('password_confirm')?.toString();\n\n  const fields = { password, password_confirm };\n\n  const fieldErrors = {\n    password: validatePassword(password),\n    password_confirm: validatePasswordConfirm(password, password_confirm),\n  };\n\n  if (Object.values(fieldErrors).some(Boolean)) {\n    return badRequest({ fieldErrors, fields, formError: null });\n  }\n\n  const client = new UserService();\n  await client.auth(context.session);\n\n  const resetPassword = await client.resetPasswordCreate({ newPassword: password });\n\n  if (resetPassword.status === 204)\n    return redirect(routes.user.root, {\n      status: 302,\n    });\n\n  return json({\n    success: false,\n    fieldErrors: null,\n    formError: {\n      en: 'Something went wrong',\n      th: 'มีบางอย่างผิดพลาด',\n    },\n  });\n};\n\nexport default function Index() {\n  const data = useActionData<typeof action>();\n\n  return <ResetPassword actionData={data as IResetPassword} />;\n}\n", "import { Form, useFetcher } from '@remix-run/react';\nimport { memo, useEffect, useRef } from 'react';\n\nimport Button from '~/components/common/Button';\nimport { Input } from '~/components/common/Input';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { CommonLayout } from '~/components/layouts/CommonLayout';\nimport { useApp } from '~/hooks';\nimport type { IResetPassword } from '~/types/interfaces/iForms';\n\nimport { BoxForm, Wrapper } from './styles';\n\nexport const ResetPassword = memo(({ actionData }: { actionData: IResetPassword }): JSX.Element => {\n  const { t, userContext } = useApp();\n\n  const passwordRef = useRef<HTMLInputElement>(null);\n  const confirmPasswordRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (actionData?.fieldErrors?.password_confirm?.[userContext.language]) {\n      confirmPasswordRef.current?.focus();\n    } else if (actionData?.fieldErrors?.password?.[userContext.language]) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <CommonLayout>\n      <Wrapper>\n        <Form\n          method='POST'\n          action='/auth/reset-password'\n          style={{\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <BoxForm>\n            <Text variant={TextVariantEnum.textHeading3} style={{ textAlign: 'center' }}>\n              {t('auth:new_password')}\n            </Text>\n            <Input\n              htmlType='password'\n              placeholder={t('auth:enter_password')}\n              id='i_password'\n              name='password'\n              variant='password'\n              aria-invalid={\n                actionData?.fieldErrors?.password?.[userContext.language] ? true : undefined\n              }\n              errorText={actionData?.fieldErrors?.password?.[userContext.language]}\n            />\n            <Input\n              htmlType='password'\n              placeholder={t('auth:password_confirmation')}\n              id='i_password_confirmation'\n              name='password_confirm'\n              aria-invalid={\n                actionData?.fieldErrors?.password_confirm?.[userContext.language] ? true : undefined\n              }\n              errorText={actionData?.fieldErrors?.password_confirm?.[userContext.language]}\n            />\n            <Button priority='primary' fullwidth type='submit'>\n              <Text variant={TextVariantEnum.textBody2}>{t('user:change_password')}</Text>\n            </Button>\n          </BoxForm>\n        </Form>\n      </Wrapper>\n    </CommonLayout>\n  );\n});\n", "import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 16px;\n  background-color: ${({ theme }) => theme.auth.backgroundRegisterPage};\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 64px;\n  @media (min-width: 768px) {\n    gap: 24px;\n    margin-top: 80px;\n  }\n`;\n\nexport const BoxForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: ${({ theme }) => theme.auth.backgroundRegisterContainerColor};\n  border-radius: 8px;\n  align-items: center;\n  gap: 24px;\n  padding: 16px;\n  @media (min-width: 768px) {\n    max-width: 476px;\n    padding: 40px;\n  }\n  @media (min-width: 1280px) {\n    padding: 48px 102px;\n    max-width: 792px;\n  }\n`;\n\nexport const BoxRadios = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  @media (min-width: 1280px) {\n    flex-direction: row;\n    justify-content: center;\n  }\n`;\n\nexport const RadioBtnWrapper = styled.label`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const RadioBtn = styled.input`\n  accent-color: ${({ theme }) => theme.auth.radioButtonColor};\n  width: 20px;\n  height: 20px;\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAA+B;AAC/B;;;ACFA;AACA,IAAAA,gBAAwC;;;ACCjC,IAAM,UAAU,sCAAO;AAAA;AAAA,sBAER,CAAC,EAAE,MAAM,MAAM,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYzC,IAAM,UAAU,sCAAO;AAAA;AAAA;AAAA;AAAA,sBAIR,CAAC,EAAE,MAAM,MAAM,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAezC,IAAM,YAAY,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWzB,IAAM,kBAAkB,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAO/B,IAAM,WAAW,sCAAO;AAAA,kBACb,CAAC,EAAE,MAAM,MAAM,MAAM,KAAK;AAAA;AAAA;AAAA;;;ADZhC;AA7BL,IAAMC,oBAAgBC,oBAAK,CAAC;EAAEC;AAA2C,MAAmB;AACjG,QAAM;IAAEC;IAAGC;EAAY,IAAIC,OAAO;AAElC,QAAMC,kBAAcC,sBAAyB,IAAI;AACjD,QAAMC,yBAAqBD,sBAAyB,IAAI;AAExDE,+BAAU,MAAM;AACd,QAAIP,YAAYQ,aAAaC,mBAAmBP,YAAYQ,QAAQ,GAAG;AACrEJ,yBAAmBK,SAASC,MAAM;IACpC,WAAWZ,YAAYQ,aAAaK,WAAWX,YAAYQ,QAAQ,GAAG;AACpEN,kBAAYO,SAASC,MAAM;IAC7B;EACF,GAAG,CAACZ,UAAU,CAAC;AAEf,SACE,mDAAC,gBACC,6DAAC,WACC,6DAAC,QACC,QAAO,QACP,QAAO,wBACP,OAAO;IACLc,OAAO;IACPC,SAAS;IACTC,gBAAgB;IAChBC,eAAe;IACfC,YAAY;EACd,GAEA,6DAAC,WACC;uDAAC,QAAK,SAASC,gBAAgBC,cAAc,OAAO;MAAEC,WAAW;IAAS,GACvEpB,YAAE,mBAAmB,KADxB;;;;WAEA;IACA,mDAAC,SACC,UAAS,YACT,aAAaA,EAAE,qBAAqB,GACpC,IAAG,cACH,MAAK,YACL,SAAQ,YACR,gBACED,YAAYQ,aAAaK,WAAWX,YAAYQ,QAAQ,IAAI,OAAOY,QAErE,WAAWtB,YAAYQ,aAAaK,WAAWX,YAAYQ,QAAQ,KATrE;;;;WASuE;IAEvE,mDAAC,SACC,UAAS,YACT,aAAaT,EAAE,4BAA4B,GAC3C,IAAG,2BACH,MAAK,oBACL,gBACED,YAAYQ,aAAaC,mBAAmBP,YAAYQ,QAAQ,IAAI,OAAOY,QAE7E,WAAWtB,YAAYQ,aAAaC,mBAAmBP,YAAYQ,QAAQ,KAR7E;;;;WAQ+E;IAE/E,mDAAC,kBAAO,UAAS,WAAU,WAAS,MAAC,MAAK,UACxC,6DAAC,QAAK,SAASS,gBAAgBI,WAAYtB,YAAE,sBAAsB,KAAnE;;;;WAAqE,KADvE;;;;WAEA;OA3BF;;;;SA4BA,KAvCF;;;;SAwCA,KAzCF;;;;SA0CA,KA3CF;;;;SA4CA;AAEJ,CAAC;;;ADlED,qBAA2B;AA2ClB,IAAAuB,0BAAA;AAHM,SAAf,QAAgC;AAC9B,QAAMC,OAAOC,cAA6B;AAE1C,SAAO,oDAAC,iBAAc,YAAYD,QAA3B;;;;SAAkD;AAC3D;",
  "names": ["import_react", "ResetPassword", "memo", "actionData", "t", "userContext", "useApp", "passwordRef", "useRef", "confirmPasswordRef", "useEffect", "fieldErrors", "password_confirm", "language", "current", "focus", "password", "width", "display", "justifyContent", "flexDirection", "alignItems", "TextVariantEnum", "textHeading3", "textAlign", "undefined", "textBody2", "import_jsx_dev_runtime", "data", "useActionData"]
}
