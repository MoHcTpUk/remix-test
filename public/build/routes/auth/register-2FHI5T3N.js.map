{
  "version": 3,
  "sources": ["../../../../app/routes/auth/register.tsx", "../../../../app/components/pages/Auth/Register/index.tsx", "../../../../app/components/pages/Auth/Register/styles.ts"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData } from '@remix-run/react';\nimport qs from 'qs';\nimport type { EntitySignUpRequest } from 'shared/client/data-contracts';\nimport { UserService } from 'shared/client/UserService';\nimport routes from 'shared/routing/routes';\n\nimport { RegisterPage } from '~/components/pages/Auth/Register';\nimport { getMessageContext } from '~/storages/message.server';\nimport type { ISignUpResponse } from '~/types/interfaces/iForms';\nimport {\n  getUserContext,\n  getUserInfoFromService,\n  setHeadersForResponse,\n  setSessionStorage,\n  setUserInfoContext,\n} from '~/utils/helpers';\nimport { errorActionMessage, errorActionTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validateEmail,\n  validatePassword,\n  validatePasswordConfirm,\n  validatePolicy,\n  validateRequireField,\n} from '~/utils/validations';\n\ninterface RegisterError {\n  status?: number;\n  // Другие свойства вашей ошибки\n}\n\nexport const action = async ({ request, context }: ActionArgs) => {\n  const text = await request.text();\n  const parsedData = qs.parse(text);\n\n  const fields: EntitySignUpRequest = {\n    email: parsedData?.email?.toString(),\n    first_name: parsedData?.first_name?.toString(),\n    last_name: parsedData?.last_name?.toString(),\n    locale: parsedData?.primary_language?.toString(),\n    password: parsedData?.password?.toString(),\n  };\n\n  const fieldErrors = {\n    first_name: validateRequireField(parsedData?.first_name),\n    last_name: validateRequireField(parsedData?.last_name),\n    email: validateEmail(parsedData?.email),\n    password: validatePassword(parsedData?.password),\n    password_confirm: validatePasswordConfirm(parsedData?.password, parsedData?.password_confirm),\n    policy: validatePolicy(Boolean(parsedData?.policy)),\n    locale: validateRequireField(parsedData?.primary_language),\n  };\n\n  if (Object.values(fieldErrors).some(Boolean)) {\n    return badRequest({ fieldErrors, fields, formError: null });\n  }\n  try {\n    const client = new UserService();\n    const signUpResult = await client.registrationCreate(fields);\n\n    const sessionCookie = signUpResult.headers.get('Set-Cookie');\n    const sessionStorage = await setSessionStorage(request, sessionCookie);\n    const { userContextStorage, userContext } = await getUserContext(request);\n    const userInfo = await getUserInfoFromService(sessionStorage.getSession());\n    await setUserInfoContext(userInfo, userContext, userContextStorage);\n    const headers = await setHeadersForResponse(sessionStorage, userContextStorage);\n\n    return redirect(routes.user.root, {\n      status: 302,\n      headers,\n    });\n  } catch (error: RegisterError | unknown) {\n    if (error && (error as RegisterError)?.status === 409) {\n      return badRequest({\n        fieldErrors: {\n          email: {\n            en: 'User with this email already exists',\n            th: 'มีผู้ใช้อีเมลนี้อยู่แล้ว',\n          },\n        },\n        fields,\n        formError: null,\n      });\n    }\n\n    return badRequest({\n      fieldErrors: null,\n      fields,\n      formError: {\n        en: 'Something went wrong',\n        th: 'มีบางอย่างผิดพลาด',\n      },\n    });\n  }\n};\n\nexport default function Register() {\n  const actionData = useActionData<typeof action>();\n\n  return <RegisterPage actionData={actionData as ISignUpResponse} />;\n}\n", "import { Form, Link } from '@remix-run/react';\nimport { memo } from 'react';\nimport routes from 'shared/routing/routes';\n\nimport Button from '~/components/common/Button';\nimport { CheckBox } from '~/components/common/Checkbox';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { CommonLayout } from '~/components/layouts/CommonLayout';\nimport { useApp } from '~/hooks';\nimport type { ISignUpResponse } from '~/types/interfaces/iForms';\nimport { extractTitlesNewWay } from '~/utils/helpers';\n\nimport { PoliciesText } from '../Login/styles';\nimport { BoxCheckbox, BoxForm, Wrapper } from './styles';\n\nexport const RegisterPage = memo(\n  ({ actionData }: { actionData?: ISignUpResponse }): JSX.Element => {\n    const { t, userContext, theme } = useApp();\n\n    return (\n      <CommonLayout>\n        <Wrapper>\n          <Form\n            method='POST'\n            style={{\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <BoxForm>\n              <Text variant={TextVariantEnum.textHeading3} style={{ textAlign: 'center' }}>\n                {t('auth:sign_up')}\n              </Text>\n              <Input\n                placeholder={t('auth:enter_first_name')}\n                id='i_enter_first_name'\n                name='first_name'\n                aria-invalid={\n                  actionData?.fieldErrors?.first_name?.[userContext.language] ? true : undefined\n                }\n                errorText={actionData?.fieldErrors?.first_name?.[userContext.language]}\n              />\n              <Input\n                placeholder={t('auth:enter_last_name')}\n                id='i_last_name'\n                name='last_name'\n                aria-invalid={\n                  actionData?.fieldErrors?.last_name?.[userContext.language] ? true : undefined\n                }\n                errorText={actionData?.fieldErrors?.last_name?.[userContext.language]}\n              />\n              <Input\n                htmlType='email'\n                placeholder={t('auth:enter_email')}\n                id='i_email'\n                name='email'\n                aria-invalid={\n                  actionData?.fieldErrors?.email?.[userContext.language] ? true : undefined\n                }\n                errorText={\n                  actionData?.fieldErrors?.email?.[userContext.language]\n                    ? actionData?.fieldErrors?.email?.[userContext.language]\n                    : undefined\n                }\n              />\n              <Input\n                htmlType='password'\n                placeholder={t('auth:enter_password')}\n                id='i_password'\n                name='password'\n                variant='password'\n                aria-invalid={\n                  actionData?.fieldErrors?.password?.[userContext.language] ? true : undefined\n                }\n                errorText={\n                  actionData?.fieldErrors?.password?.[userContext.language]\n                    ? actionData?.fieldErrors?.password?.[userContext.language]\n                    : undefined\n                }\n              />\n              <Input\n                htmlType='password'\n                placeholder={t('auth:password_confirmation')}\n                id='i_password_confirm'\n                name='password_confirm'\n                variant='password'\n                aria-invalid={\n                  actionData?.fieldErrors?.password_confirm?.[userContext.language]\n                    ? true\n                    : undefined\n                }\n                errorText={\n                  actionData?.fieldErrors?.password_confirm?.[userContext.language]\n                    ? actionData?.fieldErrors?.password_confirm?.[userContext.language]\n                    : undefined\n                }\n              />\n              <Select\n                entries={extractTitlesNewWay(\n                  [\n                    {\n                      id: 'th',\n                      value: {\n                        en: 'Thai',\n                        th: 'ไทย',\n                      },\n                    },\n                    {\n                      id: 'en',\n                      value: {\n                        en: 'English',\n                        th: 'อังกฤษ',\n                      },\n                    },\n                  ],\n                  userContext.language,\n                )}\n                placeholder={t('user:language_of_notify')}\n                id='primaryLanguage'\n                name='primary_language'\n                values={[userContext.language || '']}\n                errorText={\n                  actionData?.fieldErrors?.locale?.[userContext.language]\n                    ? actionData?.fieldErrors?.locale?.[userContext.language]\n                    : undefined\n                }\n              />\n              <BoxCheckbox>\n                {/* <CheckBox\n                  id='i_newsletter'\n                  name='newsletter'\n                  label={t('auth:subscribe_to_newsletter')}\n                  value='false'\n                /> */}\n                <CheckBox\n                  id='i_policy'\n                  name='policy'\n                  label={t('auth:i_accept_terms_of_use')}\n                  value='false'\n                  aria-invalid={actionData?.fieldErrors?.policy ? true : undefined}\n                  errorText={\n                    actionData?.fieldErrors?.policy?.[userContext.language]\n                      ? actionData?.fieldErrors?.policy?.[userContext.language]\n                      : undefined\n                  }\n                />\n              </BoxCheckbox>\n              <Button type='submit' priority='primary' fullwidth>\n                <Text variant={TextVariantEnum.textBody2}>{t('auth:sign_up')}</Text>\n              </Button>\n              <PoliciesText>\n                <Text variant={TextVariantEnum.textBody2}>\n                  {`${t('auth:by_clicking_sign_up_i_agree_to_the')} `}\n                </Text>\n                <Link to={routes.privacyPolicy.terms}>\n                  <Text\n                    variant={TextVariantEnum.textBody2}\n                    style={{ textDecoration: 'underline', cursor: 'pointer' }}\n                  >\n                    {t('auth:terms_of_use')}\n                  </Text>\n                </Link>\n                <Text variant={TextVariantEnum.textBody2}>{` ${t('auth:and')} `}</Text>\n                <Link to={routes.privacyPolicy.root}>\n                  <Text\n                    variant={TextVariantEnum.textBody2}\n                    style={{ textDecoration: 'underline', cursor: 'pointer' }}\n                  >\n                    {t('auth:privacy_policy')}.\n                  </Text>\n                </Link>\n              </PoliciesText>\n              {actionData?.formError && (\n                <Text variant={TextVariantEnum.textHeading3} color={theme.errorTextColor}>\n                  {actionData?.formError?.[userContext.language]}\n                </Text>\n              )}\n            </BoxForm>\n          </Form>\n        </Wrapper>\n      </CommonLayout>\n    );\n  },\n);\n", "import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 16px;\n  background-color: ${({ theme }) => theme.auth.backgroundRegisterPage};\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 64px;\n  @media (min-width: 768px) {\n    gap: 24px;\n    margin-top: 80px;\n  }\n`;\n\nexport const BoxForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: ${({ theme }) => theme.auth.backgroundRegisterContainerColor};\n  border-radius: 8px;\n  align-items: center;\n  gap: 24px;\n  padding: 16px;\n  @media (min-width: 768px) {\n    max-width: 476px;\n    padding: 40px;\n  }\n  @media (min-width: 1280px) {\n    padding: 48px 102px;\n    max-width: 792px;\n  }\n`;\n\nexport const BoxCheckbox = styled.div`\n  /* width: 100%; */\n  display: flex;\n  /* flex-direction: column; */\n  gap: 16px;\n  justify-content: center;\n  position: relative;\n\n  @media (min-width: 1280px) {\n    flex-direction: row;\n    justify-content: center;\n  }\n`;\n"],
  "mappings": "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",
  "names": ["import_react", "RegisterPage", "memo", "actionData", "t", "userContext", "theme", "useApp", "width", "display", "justifyContent", "flexDirection", "alignItems", "TextVariantEnum", "textHeading3", "textAlign", "fieldErrors", "first_name", "language", "undefined", "last_name", "email", "password", "password_confirm", "extractTitlesNewWay", "id", "value", "en", "th", "locale", "policy", "textBody2", "routes", "privacyPolicy", "terms", "textDecoration", "cursor", "root", "formError", "errorTextColor", "import_jsx_dev_runtime", "actionData", "useActionData"]
}
