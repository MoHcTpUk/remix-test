{
  "version": 3,
  "sources": ["../../../../app/routes/user/resume.$id.tsx", "../../../../shared/v2/resumes/models/index.ts", "../../../../app/components/pages/User/Resumes/Resume/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeAdditionalInformation/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeAdditionalInformation/ResumeAdditionalInformationData.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeEducation/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeEducation/ResumeEducationData.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeInformation/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeInformation/ResumeInformationData.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeJobPosition/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeJobPosition/ResumeJobPositionData.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeLocation/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeLocation/ResumeLocationData.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeSettings/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeSettings/ResumeSettingsData.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeWorkExperience/index.tsx", "../../../../app/components/pages/User/Resumes/Resume/components/ResumeWorkExperience/ResumeWorkExperienceData.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { ResumesApi } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport ResumeComponent from '~/components/pages/User/Resumes/Resume';\nimport { useApp, useCheckIncompleteness, useScreenWidth } from '~/hooks';\nimport { getMessageContext } from '~/storages/message.server';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport type { IError } from '~/types/interfaces/IError';\nimport type { IBodyFormData, IUpdateResume } from '~/types/interfaces/iForms';\nimport { collectData, getFileUrl } from '~/utils/helpers.client';\nimport { errorActionMessage, errorActionTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validateArrayDescriptionsForLanguage,\n  validateArrayElementsForLanguage,\n  validateDescription,\n  validateEmail,\n  validatePhone,\n  validateRequireField,\n  validateThaiOrEnglish,\n  validateTypeImage,\n  validateUnknownString,\n} from '~/utils/validations';\n\nexport const loader = async ({ params, context, request }: LoaderArgs) => {\n  if (!context.userContext.user.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  const clientResumes = ClientFactory.createClient(ResumesApi, context.session);\n\n  try {\n    const resumeId = params.id;\n\n    const [\n      genders,\n      specializations,\n      location,\n      employment,\n      workfeatures,\n      educationLevel,\n      yearsOfExperience,\n      citizenship,\n      relocations,\n      countries,\n      religions,\n      maritalStatuses,\n      languages,\n      sources,\n      payoutPeriods,\n      currency,\n      emailNotificationsSettings,\n      languageLevel,\n      drivingLicenses,\n      skills,\n      languagesOfNotify,\n      resume,\n    ] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationsMap,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      context.references.educationLevelMap,\n      context.references.yearsOfExperienceMap,\n      context.references.citizenshipMap,\n      context.references.relocationsMap,\n      context.references.countriesMap,\n      context.references.religionsMap,\n      context.references.maritalStatusesMap,\n      context.references.languagesMap,\n      context.references.sourceMap,\n      context.references.payoutPeriodsMap,\n      context.references.currencyMap,\n      context.references.emailNotificationsSettingsMap,\n      context.references.languageLevelMap,\n      context.references.drivingLicensesMap,\n      context.references.skillsMap,\n      context.references.languagesOfNotify,\n      resumeId ? clientResumes.getResume({ id: resumeId }) : null,\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n      countries: countries.ToArray(),\n      employment: employment.ToArray(),\n      workfeatures: workfeatures.ToArray(),\n      educationLevel: educationLevel.ToArray(),\n      yearsOfExperience: yearsOfExperience.ToArray(),\n      citizenship: citizenship.ToArray(),\n      relocations: relocations.ToArray(),\n      religions: religions.ToArray(),\n      maritalStatuses: maritalStatuses.ToArray(),\n      languages: languages.ToArray(),\n      sources: sources.ToArray(),\n      payoutPeriods: payoutPeriods.ToArray(),\n      currency: currency.ToArray(),\n      emailNotificationsSettings: emailNotificationsSettings.ToArray(),\n      languageLevel: languageLevel.ToArray(),\n      drivingLicenses: drivingLicenses.ToArray(),\n      skills: skills.ToArray(),\n      languagesOfNotify: languagesOfNotify.ToArray(),\n    };\n\n    return json({ resume, dictionaries });\n  } catch (e) {\n    console.log(e);\n    const messageContextStorage = await getMessageContext(request);\n\n    messageContextStorage.setErrorMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    const headers: HeadersInit = new Headers();\n\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n\n    return badRequest(\n      {\n        dictionaries: {},\n        resume: null,\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context, params }: ActionArgs) => {\n  const text = await request.text();\n  const parsedData = qs.parse(text);\n  const { step, action, ...data } = qs.parse(text);\n  const nameCard = data?.nameCard;\n\n  const resumeId = params.id;\n  const bodyFormData: IBodyFormData = {\n    id: resumeId || '',\n  };\n\n  const client = ClientFactory.createClient(ResumesApi, context.session);\n  let updateResume = {};\n\n  if (nameCard === 'general_information') {\n    if (\n      parsedData?.logo?.toString()?.startsWith('data:image/png') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/wepb') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/svg') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/ico')\n    ) {\n      return badRequest({\n        fieldErrors: {\n          image: validateTypeImage(),\n        },\n        formError: null,\n        success: false,\n      });\n    }\n\n    const filUrl = await getFileUrl(parsedData?.logo?.toString(), context);\n\n    try {\n      const fieldErrors = {\n        email: validateEmail(parsedData.email?.toString()),\n        first_name: validateRequireField(parsedData.first_name?.toString()),\n        last_name: validateRequireField(parsedData.last_name?.toString()),\n        phone: validatePhone(parsedData.phone?.toString()),\n        gender_id: validateRequireField(parsedData.gender_id?.toString()),\n        language_of_notify_id: validateRequireField(parsedData.language_of_notify_id?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.general_information = {\n        first_name: parsedData.first_name?.toString() || null,\n        last_name: parsedData.last_name?.toString() || null,\n        photo_uri: filUrl || '',\n        gender_id: parsedData.gender_id?.toString() || null,\n        birthdate:\n          parsedData.birthdate?.toString() && parsedData.birthdate?.toString() !== 'null'\n            ? {\n                [context.userContext.language]: parsedData.birthdate?.toString(),\n              }\n            : null,\n        email: parsedData.email?.toString() || null,\n        phone: parsedData.phone?.toString() || null,\n        language_of_notify_id: parsedData.language_of_notify_id?.toString() || null,\n      };\n\n      updateResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'job_position') {\n    try {\n      const fieldErrors = {\n        specialization_id: validateRequireField(parsedData.specialization?.toString()),\n        position: validateRequireField(parsedData.position?.toString()),\n        employment_type_ids: validateRequireField(parsedData.employment?.toString()),\n        salary_payout_period_id: validateRequireField(\n          parsedData.salary_payout_period_id?.toString(),\n        ),\n        description: validateDescription(parsedData.description?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.job_position = {\n        specialization_id: parsedData.specialization?.toString() || null,\n        position: parsedData.position?.toString() || null,\n        employment_type_ids: parsedData.employment?.toString()\n          ? parsedData.employment?.toString()?.split(',')\n          : null,\n        work_feature_ids: parsedData.work_feature_ids?.toString()\n          ? parsedData.work_feature_ids?.toString()?.split(',')\n          : null,\n        salary_payout_period_id: parsedData.salary_payout_period_id?.toString() || null,\n        salary_fixed: Number(parsedData.salary_fixed?.toString()) || 0,\n        salary_from: Number(parsedData.salary_from?.toString()) || 0,\n        salary_to: Number(parsedData.salary_to?.toString()) || 0,\n        currency_id: parsedData.currency_id?.toString() || null,\n        description: parsedData.description?.toString() || '',\n      };\n\n      updateResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'location') {\n    try {\n      const fieldErrors = {\n        country_id: validateRequireField(parsedData.country_id?.toString()),\n        region_id: validateRequireField(parsedData.region_id?.toString()),\n        city_id: validateRequireField(parsedData.city_id?.toString()),\n        relocation_id: validateRequireField(parsedData.relocation_id?.toString()),\n        address: validateThaiOrEnglish(parsedData.address?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.location = {\n        country_id: parsedData.country_id?.toString() || null,\n        region_id: parsedData.region_id?.toString() || null,\n        city_id: parsedData.city_id?.toString() || null,\n        address: parsedData.address?.toString() || '',\n        source_id: parsedData.source_id?.toString() || null,\n        relocation_id: parsedData.relocation_id?.toString() || null,\n        business_trips: Boolean(parsedData.business_trips?.toString()),\n      };\n\n      updateResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'education') {\n    try {\n      const fieldErrors = {\n        institution: validateArrayElementsForLanguage(parsedData.institution as string[]),\n        position: validateArrayElementsForLanguage(parsedData.position as string[]),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      const education = collectData(\n        context,\n        { institution: (parsedData.institution as string[]) || null },\n        { education_level_id: (parsedData.education_level_id as string[]) || null },\n        { specialization_id: (parsedData.specialization_id as string[]) || null },\n        { position: (parsedData.position as string[]) || null },\n        { start_year: (parsedData.start_year as string[]) || null },\n        { end_year: (parsedData.end_year as string[]) || null },\n      );\n\n      bodyFormData.education = education || [];\n\n      updateResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'work_experience') {\n    try {\n      const fieldErrors = {\n        company: validateArrayElementsForLanguage(parsedData.company as string[]),\n        position: validateArrayElementsForLanguage(parsedData.position as string[]),\n        description: validateArrayDescriptionsForLanguage(parsedData.description as string[]),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      const work_experience = collectData(\n        context,\n        { specialization_id: (parsedData.specialization_id as string[]) || null },\n        { position: (parsedData.position as string[]) || null },\n        { company: (parsedData.company as string[]) || null },\n        { from: (parsedData.from as string[]) || null },\n        { to: (parsedData.to as string[]) || null },\n        { description: (parsedData.description as string[]) || null },\n      );\n\n      bodyFormData.work_experience = work_experience || [];\n\n      updateResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'additional_information') {\n    try {\n      const languages = collectData(\n        context,\n        { language_id: (parsedData.language_id as string[]) || null },\n        { proficiency_level_id: (parsedData.proficiency_level_id as string[]) || null },\n      );\n\n      bodyFormData.additional_information = {\n        languages: languages || [],\n        skill_ids: parsedData.skill_ids?.toString()\n          ? parsedData.skill_ids?.toString()?.split(',')\n          : null,\n        driver_license_ids: parsedData.driver_license_ids?.toString()\n          ? parsedData.driver_license_ids?.toString()?.split(',')\n          : null,\n        other_license: parsedData.other_license?.toString() || '',\n        marital_status_id: parsedData.marital_status_id?.toString() || null,\n        citizenship_id: parsedData.citizenship_id?.toString() || null,\n        religion_id: parsedData.religion_id?.toString() || null,\n      };\n\n      const fieldErrors = {\n        other_license: validateThaiOrEnglish(parsedData.other_license as string),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      updateResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'settings') {\n    try {\n      bodyFormData.settings = {\n        show_resume_to: parsedData.show_resume_to === 'true' ? 'anyone' : 'nobody',\n        show_phone_number_to: parsedData.show_phone_number_to === 'true' ? 'anyone' : 'nobody',\n        show_email_to: parsedData.show_email_to === 'true' ? 'anyone' : 'nobody',\n        email_notifications: parsedData.email_notifications?.toString()\n          ? parsedData.email_notifications?.toString()\n          : 'nobody',\n      };\n\n      updateResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if ('error' in updateResume) {\n    return badRequest({\n      fieldErrors: validateUnknownString(updateResume.error as string),\n      formError: null,\n      bodyFormData,\n      success: false,\n    });\n  }\n\n  if (\n    (updateResume as IError)?.status?.includes('Internal Server Error') ||\n    ('status' in (updateResume as IError) &&\n      (updateResume as IError)?.status?.includes('Invalid request'))\n  ) {\n    return badRequest({\n      fieldErrors: null,\n      bodyFormData,\n      formError: {\n        en: 'Some data entered incorrectly',\n        th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n      },\n      success: false,\n    });\n  }\n\n  return json({ success: true, fieldErrors: null });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n\n  const resume = request?.resume;\n  const { dictionaries } = request;\n  const actionData = useActionData<typeof action>();\n  const actionSuccess = actionData?.success;\n  const { t } = useApp();\n  const widthScreen = useScreenWidth();\n  const incompleteness = useCheckIncompleteness(resume);\n\n  return (\n    <Box flexDirection='column' width='100%' gap={widthScreen > 1024 ? '24px' : '16px'}>\n      {incompleteness && (\n        <BoxInformation\n          variant={BoxInformationEnum.warning}\n          title={t('user:resume_is_incomplete')}\n          information={t(\n            'user:if_the_required_fields_are_not_filled_in_the_resume_then_it_will_not_be_placed_in_the_database',\n          )}\n          flexDirection='column'\n        />\n      )}\n\n      <ResumeComponent\n        actionData={actionData as IUpdateResume}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionSuccess={actionSuccess}\n      />\n    </Box>\n  );\n}\n", "/* tslint:disable */\n/* eslint-disable */\n/**\n * \n * @export\n * @interface AdditionalInformation\n */\nexport interface AdditionalInformation {\n    /**\n     * \n     * @type {Array<Language>}\n     * @memberof AdditionalInformation\n     */\n    languages?: Array<Language>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof AdditionalInformation\n     */\n    skill_ids?: Array<string> | null;\n    /**\n     * \n     * @type {Array<MultiLingualValue>}\n     * @memberof AdditionalInformation\n     */\n    skill_names?: Array<MultiLingualValue>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof AdditionalInformation\n     */\n    driver_license_ids?: Array<string> | null;\n    /**\n     * \n     * @type {Array<MultiLingualValue>}\n     * @memberof AdditionalInformation\n     */\n    driver_license_names?: Array<MultiLingualValue>;\n    /**\n     * \n     * @type {string}\n     * @memberof AdditionalInformation\n     */\n    other_license?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AdditionalInformation\n     */\n    religion_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof AdditionalInformation\n     */\n    religion_name?: MultiLingualValue;\n    /**\n     * \n     * @type {string}\n     * @memberof AdditionalInformation\n     */\n    marital_status_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof AdditionalInformation\n     */\n    marital_status_name?: MultiLingualValue;\n    /**\n     * \n     * @type {string}\n     * @memberof AdditionalInformation\n     */\n    citizenship_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof AdditionalInformation\n     */\n    citizenship_name?: MultiLingualValue;\n}\n/**\n * \n * @export\n * @interface Education\n */\nexport interface Education {\n    /**\n     * \n     * @type {string}\n     * @memberof Education\n     */\n    education_level_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Education\n     */\n    education_level_name?: MultiLingualValue;\n    /**\n     * \n     * @type {string}\n     * @memberof Education\n     */\n    institution?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Education\n     */\n    specialization_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Education\n     */\n    specialization_name?: MultiLingualValue;\n    /**\n     * Position\n     * @type {string}\n     * @memberof Education\n     */\n    position?: string;\n    /**\n     * \n     * @type {MultiYearValue}\n     * @memberof Education\n     */\n    start_year?: MultiYearValue;\n    /**\n     * \n     * @type {MultiYearValue}\n     * @memberof Education\n     */\n    end_year?: MultiYearValue;\n}\n/**\n * \n * @export\n * @interface GeneralInformation\n */\nexport interface GeneralInformation {\n    /**\n     * Job seeker photo\n     * @type {string}\n     * @memberof GeneralInformation\n     */\n    photo_uri?: string;\n    /**\n     * First name\n     * @type {string}\n     * @memberof GeneralInformation\n     */\n    first_name?: string;\n    /**\n     * Last name\n     * @type {string}\n     * @memberof GeneralInformation\n     */\n    last_name?: string;\n    /**\n     * Gender id\n     * @type {string}\n     * @memberof GeneralInformation\n     */\n    gender_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof GeneralInformation\n     */\n    gender_name?: MultiLingualValue;\n    /**\n     * \n     * @type {MultiDateValue}\n     * @memberof GeneralInformation\n     */\n    birthdate?: MultiDateValue;\n    /**\n     * \n     * @type {string}\n     * @memberof GeneralInformation\n     */\n    email?: string;\n    /**\n     * Phone\n     * @type {string}\n     * @memberof GeneralInformation\n     */\n    phone?: string;\n    /**\n     * Language of notify id\n     * @type {string}\n     * @memberof GeneralInformation\n     */\n    language_of_notify_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof GeneralInformation\n     */\n    language_of_notify_name?: MultiLingualValue;\n}\n/**\n * \n * @export\n * @interface GetBatchResumes200Response\n */\nexport interface GetBatchResumes200Response {\n    /**\n     * \n     * @type {Array<Resume>}\n     * @memberof GetBatchResumes200Response\n     */\n    data: Array<Resume>;\n}\n/**\n * \n * @export\n * @interface GetResumes200Response\n */\nexport interface GetResumes200Response {\n    /**\n     * \n     * @type {Array<Resume>}\n     * @memberof GetResumes200Response\n     */\n    data: Array<Resume>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GetResumes200Response\n     */\n    page_tokens?: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof GetResumes200Response\n     */\n    max_pages: number;\n}\n/**\n * \n * @export\n * @interface JobPosition\n */\nexport interface JobPosition {\n    /**\n     * \n     * @type {string}\n     * @memberof JobPosition\n     */\n    specialization_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof JobPosition\n     */\n    specialization_name?: MultiLingualValue;\n    /**\n     * Position\n     * @type {string}\n     * @memberof JobPosition\n     */\n    position?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof JobPosition\n     */\n    employment_type_ids?: Array<string>;\n    /**\n     * \n     * @type {Array<MultiLingualValue>}\n     * @memberof JobPosition\n     */\n    employment_type_names?: Array<MultiLingualValue>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof JobPosition\n     */\n    work_feature_ids?: Array<string> | null;\n    /**\n     * \n     * @type {Array<MultiLingualValue>}\n     * @memberof JobPosition\n     */\n    work_feature_names?: Array<MultiLingualValue>;\n    /**\n     * \n     * @type {string}\n     * @memberof JobPosition\n     */\n    salary_payout_period_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof JobPosition\n     */\n    salary_payout_period_name?: MultiLingualValue;\n    /**\n     * Salary fixed\n     * @type {number}\n     * @memberof JobPosition\n     */\n    salary_fixed?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof JobPosition\n     */\n    salary_from?: number;\n    /**\n     * Salary to\n     * @type {number}\n     * @memberof JobPosition\n     */\n    salary_to?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof JobPosition\n     */\n    currency_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof JobPosition\n     */\n    currency_name?: MultiLingualValue;\n    /**\n     * Description\n     * @type {string}\n     * @memberof JobPosition\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Language\n */\nexport interface Language {\n    /**\n     * \n     * @type {string}\n     * @memberof Language\n     */\n    language_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Language\n     */\n    language_name?: MultiLingualValue;\n    /**\n     * \n     * @type {string}\n     * @memberof Language\n     */\n    proficiency_level_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Language\n     */\n    proficiency_level_name?: MultiLingualValue;\n}\n\n/**\n * \n * @export\n */\nexport const Locale = {\n    en: 'en',\n    th: 'th'\n} as const;\nexport type Locale = typeof Locale[keyof typeof Locale];\n\n/**\n * \n * @export\n * @interface Location\n */\nexport interface Location {\n    /**\n     * Country id\n     * @type {string}\n     * @memberof Location\n     */\n    country_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Location\n     */\n    country_name?: MultiLingualValue;\n    /**\n     * Province/Region id\n     * @type {string}\n     * @memberof Location\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Location\n     */\n    region_name?: MultiLingualValue;\n    /**\n     * \n     * @type {string}\n     * @memberof Location\n     */\n    city_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Location\n     */\n    city_name?: MultiLingualValue;\n    /**\n     * Address\n     * @type {string}\n     * @memberof Location\n     */\n    address?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Location\n     */\n    source_id?: string | null;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Location\n     */\n    source_name?: MultiLingualValue;\n    /**\n     * \n     * @type {string}\n     * @memberof Location\n     */\n    relocation_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof Location\n     */\n    relocation_name?: MultiLingualValue;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Location\n     */\n    business_trips?: boolean;\n}\n/**\n * \n * @export\n * @interface MultiDateValue\n */\nexport interface MultiDateValue {\n    /**\n     * \n     * @type {string}\n     * @memberof MultiDateValue\n     */\n    en?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MultiDateValue\n     */\n    th?: string;\n}\n/**\n * \n * @export\n * @interface MultiLingualValue\n */\nexport interface MultiLingualValue {\n    /**\n     * \n     * @type {string}\n     * @memberof MultiLingualValue\n     */\n    en?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MultiLingualValue\n     */\n    th?: string;\n}\n/**\n * \n * @export\n * @interface MultiYearValue\n */\nexport interface MultiYearValue {\n    /**\n     * \n     * @type {string}\n     * @memberof MultiYearValue\n     */\n    en?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MultiYearValue\n     */\n    th?: string;\n}\n/**\n * \n * @export\n * @interface RequestAccess\n */\nexport interface RequestAccess {\n    /**\n     * \n     * @type {string}\n     * @memberof RequestAccess\n     */\n    vacancy_id?: string;\n    /**\n     * \n     * @type {Locale}\n     * @memberof RequestAccess\n     */\n    locale?: Locale;\n}\n/**\n * \n * @export\n * @interface Resume\n */\nexport interface Resume {\n    /**\n     * Resume id\n     * @type {string}\n     * @memberof Resume\n     */\n    readonly id: string;\n    /**\n     * \n     * @type {GeneralInformation}\n     * @memberof Resume\n     */\n    general_information?: GeneralInformation;\n    /**\n     * \n     * @type {Location}\n     * @memberof Resume\n     */\n    location?: Location;\n    /**\n     * \n     * @type {JobPosition}\n     * @memberof Resume\n     */\n    job_position?: JobPosition;\n    /**\n     * \n     * @type {Array<Education>}\n     * @memberof Resume\n     */\n    education?: Array<Education>;\n    /**\n     * \n     * @type {Array<WorkExperience>}\n     * @memberof Resume\n     */\n    work_experience?: Array<WorkExperience>;\n    /**\n     * \n     * @type {AdditionalInformation}\n     * @memberof Resume\n     */\n    additional_information?: AdditionalInformation;\n    /**\n     * \n     * @type {Settings}\n     * @memberof Resume\n     */\n    settings?: Settings;\n    /**\n     * Publication flag\n     * @type {boolean}\n     * @memberof Resume\n     */\n    published?: boolean;\n    /**\n     * Indicates if an access request has been made\n     * @type {boolean}\n     * @memberof Resume\n     */\n    access_requested?: boolean;\n    /**\n     * Deletion flag\n     * @type {boolean}\n     * @memberof Resume\n     */\n    readonly deleted?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Resume\n     */\n    readonly total_work_experience_in_months?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Resume\n     */\n    readonly created_by?: string;\n}\n/**\n * \n * @export\n * @interface Settings\n */\nexport interface Settings {\n    /**\n     * \n     * @type {string}\n     * @memberof Settings\n     */\n    show_resume_to?: SettingsShowResumeToEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Settings\n     */\n    show_phone_number_to?: SettingsShowPhoneNumberToEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Settings\n     */\n    show_email_to?: SettingsShowEmailToEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Settings\n     */\n    email_notifications?: SettingsEmailNotificationsEnum;\n}\n\n\n/**\n * @export\n */\nexport const SettingsShowResumeToEnum = {\n    nobody: 'nobody',\n    anyone: 'anyone'\n} as const;\nexport type SettingsShowResumeToEnum = typeof SettingsShowResumeToEnum[keyof typeof SettingsShowResumeToEnum];\n\n/**\n * @export\n */\nexport const SettingsShowPhoneNumberToEnum = {\n    nobody: 'nobody',\n    anyone: 'anyone'\n} as const;\nexport type SettingsShowPhoneNumberToEnum = typeof SettingsShowPhoneNumberToEnum[keyof typeof SettingsShowPhoneNumberToEnum];\n\n/**\n * @export\n */\nexport const SettingsShowEmailToEnum = {\n    nobody: 'nobody',\n    anyone: 'anyone'\n} as const;\nexport type SettingsShowEmailToEnum = typeof SettingsShowEmailToEnum[keyof typeof SettingsShowEmailToEnum];\n\n/**\n * @export\n */\nexport const SettingsEmailNotificationsEnum = {\n    response: 'response',\n    never: 'never'\n} as const;\nexport type SettingsEmailNotificationsEnum = typeof SettingsEmailNotificationsEnum[keyof typeof SettingsEmailNotificationsEnum];\n\n/**\n * \n * @export\n * @interface WorkExperience\n */\nexport interface WorkExperience {\n    /**\n     * Specialization id\n     * @type {string}\n     * @memberof WorkExperience\n     */\n    specialization_id?: string;\n    /**\n     * \n     * @type {MultiLingualValue}\n     * @memberof WorkExperience\n     */\n    specialization_name?: MultiLingualValue;\n    /**\n     * Position\n     * @type {string}\n     * @memberof WorkExperience\n     */\n    position?: string;\n    /**\n     * Company name\n     * @type {string}\n     * @memberof WorkExperience\n     */\n    company?: string;\n    /**\n     * \n     * @type {MultiDateValue}\n     * @memberof WorkExperience\n     */\n    from?: MultiDateValue;\n    /**\n     * \n     * @type {MultiDateValue}\n     * @memberof WorkExperience\n     */\n    to?: MultiDateValue;\n    /**\n     * Description\n     * @type {string}\n     * @memberof WorkExperience\n     */\n    description?: string;\n}\n", "import { useEffect, useState } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeAdditionalinformation from './components/ResumeAdditionalInformation';\nimport ResumeEducation from './components/ResumeEducation';\nimport ResumeInformation from './components/ResumeInformation';\nimport ResumeJobPosition from './components/ResumeJobPosition';\nimport ResumeLocation from './components/ResumeLocation';\nimport ResumeSettings from './components/ResumeSettings';\nimport ResumeWorkExperience from './components/ResumeWorkExperience';\nimport { Wrapper } from './styles';\n\nexport default function ResumeComponent({\n  resume,\n  dictionaries,\n  actionSuccess,\n  actionData,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionSuccess?: boolean;\n  actionData?: IUpdateResume;\n}) {\n  const [editCard, setEditCard] = useState(ResumeCardEnum.all);\n\n  useEffect(() => {\n    if (actionSuccess) setEditCard(ResumeCardEnum.all);\n  }, [resume]);\n\n  return (\n    <Wrapper>\n      <ResumeInformation\n        resume={resume}\n        dictionaries={dictionaries}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <ResumeLocation\n        resume={resume}\n        dictionaries={dictionaries}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <ResumeJobPosition\n        resume={resume}\n        dictionaries={dictionaries}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <ResumeEducation\n        resume={resume}\n        dictionaries={dictionaries}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <ResumeWorkExperience\n        resume={resume}\n        dictionaries={dictionaries}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <ResumeAdditionalinformation\n        resume={resume}\n        dictionaries={dictionaries}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <ResumeSettings\n        resume={resume}\n        dictionaries={dictionaries}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n    </Wrapper>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { EntityResume } from 'shared/client/data-contracts';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeAdditionalinformationData from './ResumeAdditionalInformationData';\nimport ResumeAdditionalinformationEdit from './ResumeAdditionalInformationEdit';\n\nexport default function ResumeAdditionalinformation({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateResume;\n}) {\n  return editCard === ResumeCardEnum.additionalInformation ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <ResumeAdditionalinformationEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <ResumeAdditionalinformationData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      resume={resume}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport default function ResumeAdditionalinformationData({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:additional_information')}\n      withEditButton\n      nameCard={ResumeCardEnum.additionalInformation}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField variant='custom' label={t('user:language')}>\n          {resume?.additional_information?.languages?.[0].language_id && (\n            <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n              {resume?.additional_information?.languages?.map((item) => (\n                <BoxDataChips key={item.language_id}>\n                  <Text variant={TextVariantEnum.textBody2medium}>\n                    {`${getValueLang(item.language_name, userContext.language) || ''} (${\n                      getValueLang(item.proficiency_level_name, userContext.language) || ''\n                    })`}\n                  </Text>\n                </BoxDataChips>\n              ))}\n            </Box>\n          )}\n        </DataField>\n        <DataField variant='custom' label={t('user:skills')}>\n          <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n            {resume?.additional_information?.skill_names?.map((item) => (\n              <BoxDataChips key={item.en}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n        <DataField variant='custom' label={t('user:driver_license')}>\n          <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n            {resume?.additional_information?.driver_license_names?.map((item) => (\n              <BoxDataChips key={item.en}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n        <DataField\n          label={t('user:other_licenses')}\n          data={resume?.additional_information?.other_license}\n        />\n        <DataField\n          label={t('user:religion')}\n          data={getValueLang(resume?.additional_information?.religion_name, userContext.language)}\n        />\n        <DataField\n          label={t('user:marital_status')}\n          data={getValueLang(\n            resume?.additional_information?.marital_status_name,\n            userContext.language,\n          )}\n        />\n        <DataField\n          label={t('user:citizenship')}\n          data={getValueLang(\n            resume?.additional_information?.citizenship_name,\n            userContext.language,\n          )}\n        />{' '}\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { EntityResume } from 'shared/client/data-contracts';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeEducationData from './ResumeEducationData';\nimport ResumeEducationEdit from './ResumeEducationEdit';\n\nexport default function ResumeEducation({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateResume;\n}) {\n  return editCard === ResumeCardEnum.education ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <ResumeEducationEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <ResumeEducationData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      resume={resume}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport default function ResumeEducationData({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:education')}\n      withEditButton\n      nameCard={ResumeCardEnum.education}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      {resume?.education && (\n        <CardContainer\n          as={motion.div}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n        >\n          {resume?.education?.map((item) => (\n            <Box flexDirection='column' gap='10px' key={item.specialization_id}>\n              <DataField\n                label={t('user:education_level')}\n                data={getValueLang(item.education_level_name, userContext.language)}\n              />\n              <DataField label={t('user:institution')} data={item.institution} />\n              <DataField\n                label={t('user:specialization')}\n                data={getValueLang(item.specialization_name, userContext.language)}\n              />\n              <DataField label={t('user:position')} data={item.position} />\n              {getValueLang(item.start_year, userContext.language) && (\n                <DataField\n                  data={`${\n                    getValueLang(item.start_year, userContext.language)\n                      ?.split('-')\n                      .slice(0, 2)\n                      .join('-') || ''\n                  } - ${\n                    !getValueLang(item.end_year, userContext.language)\n                      ? t('user:present_time')\n                      : getValueLang(item.end_year, userContext.language)\n                          ?.split('-')\n                          .slice(0, 2)\n                          .join('-') || ''\n                  }`}\n                />\n              )}\n            </Box>\n          ))}\n        </CardContainer>\n      )}\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeInformationData from './ResumeInformationData';\nimport ResumeInformationEdit from './ResumeInformationEdit';\n\nexport default function ResumeInformation({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateResume;\n}) {\n  return editCard === ResumeCardEnum.information ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <ResumeInformationEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <ResumeInformationData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      resume={resume}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { EntityResume } from 'shared/client/data-contracts';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { extractTitles, getValueFromDictionaries, getValueLang } from '~/utils/helpers.client';\n\nexport default function ResumeInformationData({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:personal_information')}\n      withEditButton\n      nameCard={ResumeCardEnum.information}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField label={t('user:first_name')} data={resume?.general_information?.first_name} />\n        <DataField label={t('user:last_name')} data={resume?.general_information?.last_name} />\n        <DataField\n          label={t('user:gender')}\n          data={getValueLang(resume?.general_information?.gender_name, userContext.language)}\n        />\n        <DataField\n          label={t('user:date_of_birth')}\n          data={getValueLang(resume?.general_information?.birthdate, userContext.language)}\n        />\n        <DataField label={t('user:email')} data={resume?.general_information?.email} />\n        <DataField label={t('user:phone')} data={resume?.general_information?.phone} />\n        <DataField\n          label={t('user:language_of_notify')}\n          data={getValueLang(\n            resume?.general_information?.language_of_notify_name,\n            userContext.language,\n          )}\n        />\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeJobPositionData from './ResumeJobPositionData';\nimport ResumeJobPositionEdit from './ResumeJobPositionEdit';\n\nexport default function ResumeJobPosition({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateResume;\n}) {\n  return editCard === ResumeCardEnum.jobPosition ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <ResumeJobPositionEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <ResumeJobPositionData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      resume={resume}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueFromDictionaries, getValueLang } from '~/utils/helpers.client';\n\nexport default function ResumeJobPositionData({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:job_position')}\n      withEditButton\n      nameCard={ResumeCardEnum.jobPosition}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField\n          label={t('user:specialization')}\n          data={getValueLang(resume?.job_position?.specialization_name, userContext.language)}\n        />\n        <DataField label={t('user:position')} data={resume?.job_position?.position} />\n\n        <DataField variant='custom' label={t('user:employment')}>\n          <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n            {resume?.job_position?.employment_type_names?.map((item) => (\n              <BoxDataChips key={item.en}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n        <DataField variant='custom' label={t('user:work_features')}>\n          <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n            {resume?.job_position?.work_feature_ids?.map((item) => (\n              <BoxDataChips key={item}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueFromDictionaries(dictionaries?.workfeatures, item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n        <DataField\n          label={t('user:salary_payout_period')}\n          data={getValueLang(resume?.job_position?.salary_payout_period_name, userContext.language)}\n        />\n        {resume?.job_position?.salary_fixed ? (\n          <DataField\n            label={t('user:salary_fixed')}\n            data={resume?.job_position?.salary_fixed?.toFixed()}\n          />\n        ) : (\n          <DataField\n            label={t('user:salary')}\n            data={`${t('user:from')} ${resume?.job_position?.salary_from || ''} - ${\n              resume?.job_position?.salary_to || ''\n            }`}\n          />\n        )}\n\n        <DataField\n          label={t('user:currency')}\n          data={getValueLang(resume?.job_position?.currency_name, userContext.language)}\n        />\n        <DataField label={t('user:description')} data={resume?.job_position?.description} />\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeLocationData from './ResumeLocationData';\nimport ResumeLocationEdit from './ResumeLocationEdit';\n\nexport default function ResumeLocation({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateResume;\n}) {\n  const { t } = useApp();\n\n  return editCard === ResumeCardEnum.location ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <ResumeLocationEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <ResumeLocationData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      resume={resume}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { CheckBox } from '~/components/common/Checkbox';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport default function ResumeLocationData({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:location')}\n      withEditButton\n      nameCard={ResumeCardEnum.location}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField\n          label={t('user:country')}\n          data={getValueLang(resume?.location?.country_name, userContext.language)}\n        />\n\n        <DataField\n          label={t('user:district')}\n          data={getValueLang(resume?.location?.city_name, userContext.language)}\n        />\n        <DataField label={t('user:address')} data={resume?.location?.address} />\n        <DataField\n          label={t('user:source')}\n          data={getValueLang(resume?.location?.source_name, userContext.language)}\n        />\n        <DataField\n          label={t('user:relocation')}\n          data={getValueLang(resume?.location?.relocation_name, userContext.language)}\n        />\n        <Box padding='8px 0 0'>\n          <CheckBox\n            disabled\n            name='business_trips'\n            label={t('user:business_trips')}\n            checked={resume?.location?.business_trips}\n            onChange={() => null}\n          />\n        </Box>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeSettingsData from './ResumeSettingsData';\nimport ResumeSettingsEdit from './ResumeSettingsEdit';\n\nexport default function ResumeSettings({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateResume;\n}) {\n  return editCard === ResumeCardEnum.settings ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <ResumeSettingsEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <ResumeSettingsData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      resume={resume}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { type Resume, SettingsEmailNotificationsEnum } from 'shared/v2/resumes';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Switcher } from '~/components/common/Switcher';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nimport { BoxSetting, Wrapper } from './styles';\n\nexport default function ResumeSettingsData({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, theme, userContext } = useApp();\n\n  const renderFormFields = (disabled?: boolean) => (\n    <>\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>{t('user:show_resume_to')}</Text>\n        <Switcher\n          checked={resume?.settings?.show_resume_to === 'anyone'}\n          value={resume?.settings?.show_resume_to}\n          htmlLabel='i_show_phone'\n          name='show_resume_to'\n          variant='default'\n          checkedLabel={t('user:anyone')}\n          unCheckedLabel={t('user:nobody')}\n          disabled\n        />\n      </BoxSetting>\n\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>{t('user:show_phone_number_to')}</Text>\n        <Switcher\n          checked={resume?.settings?.show_phone_number_to === 'anyone'}\n          value={resume?.settings?.show_phone_number_to}\n          htmlLabel='show_phone_number_to'\n          name='show_phone_number_to'\n          variant='default'\n          checkedLabel={t('user:anyone')}\n          unCheckedLabel={t('user:nobody')}\n          disabled\n        />\n      </BoxSetting>\n\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>{t('user:show_email_to')}</Text>\n        <Switcher\n          checked={resume?.settings?.show_email_to === 'anyone'}\n          value={resume?.settings?.show_email_to}\n          htmlLabel='show_email_to'\n          name='show_email_to'\n          variant='default'\n          checkedLabel={t('user:anyone')}\n          unCheckedLabel={t('user:nobody')}\n          disabled\n        />\n      </BoxSetting>\n\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>{t('user:email_notifications')}</Text>\n        <DataField\n          // label={t('user:email_notifications')}\n          data={(() => {\n            const emailNotifications = resume?.settings?.email_notifications;\n            switch (emailNotifications) {\n              case SettingsEmailNotificationsEnum.never:\n                return t('user:do_not_send');\n              case SettingsEmailNotificationsEnum.response:\n                return t('user:each_response');\n              default:\n                return '';\n            }\n          })()}\n        />\n      </BoxSetting>\n    </>\n  );\n\n  return (\n    <BoxCard\n      title={t('user:settings')}\n      withEditButton\n      nameCard={ResumeCardEnum.settings}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <Wrapper>{renderFormFields(true)}</Wrapper>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { EntityResume } from 'shared/client/data-contracts';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeWorkExperienceData from './ResumeWorkExperienceData';\nimport ResumeWorkExperienceEdit from './ResumeWorkExperienceEdit';\n\nexport default function ResumeWorkExperience({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n  actionData,\n}: {\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateResume;\n}) {\n  return editCard === ResumeCardEnum.workExperience ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <ResumeWorkExperienceEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        resume={resume}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <ResumeWorkExperienceData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      resume={resume}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers.client';\n\nexport default function ResumeWorkExperienceData({\n  editCard,\n  setEditCard,\n  resume,\n  dictionaries,\n}: {\n  resume?: Resume | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:work_experience')}\n      withEditButton\n      nameCard={ResumeCardEnum.workExperience}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      {resume?.work_experience && (\n        <CardContainer\n          as={motion.div}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n        >\n          {resume?.work_experience?.map((item) => (\n            <Box flexDirection='column' gap='10px' key={item.specialization_id}>\n              <DataField\n                label={t('user:specialization')}\n                data={getValueLang(item.specialization_name, userContext.language)}\n              />\n              <DataField label={t('user:position')} data={item.position} />\n              <DataField label={t('user:company')} data={item.company} />\n              <DataField label={t('user:description')} data={item.description} />\n              {getValueLang(item.from, userContext.language) && (\n                <DataField\n                  data={`${\n                    getValueLang(item.from, userContext.language)\n                      ?.split('-')\n                      .slice(0, 2)\n                      .join('-') || ''\n                  } - ${\n                    !getValueLang(item.to, userContext.language)\n                      ? t('user:present_time')\n                      : getValueLang(item.to, userContext.language)\n                          ?.split('-')\n                          .slice(0, 2)\n                          .join('-') || ''\n                  }`}\n                />\n              )}\n            </Box>\n          ))}\n        </CardContainer>\n      )}\n    </BoxCard>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "editCard", "setEditCard", "resume", "dictionaries", "t", "userContext", "useApp", "ResumeCardEnum", "additionalInformation", "motion", "div", "opacity", "type", "bounce", "duration", "additional_information", "languages", "language_id", "map", "item", "TextVariantEnum", "textBody2medium", "getValueLang", "language_name", "language", "proficiency_level_name", "skill_names", "en", "driver_license_names", "other_license", "religion_name", "marital_status_name", "citizenship_name", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "actionData", "ResumeCardEnum", "additionalInformation", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "t", "userContext", "useApp", "ResumeCardEnum", "education", "motion", "div", "opacity", "type", "bounce", "duration", "map", "item", "getValueLang", "education_level_name", "language", "institution", "specialization_name", "position", "start_year", "split", "slice", "join", "end_year", "specialization_id", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "actionData", "ResumeCardEnum", "education", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "t", "userContext", "useApp", "ResumeCardEnum", "information", "motion", "div", "opacity", "type", "bounce", "duration", "general_information", "first_name", "last_name", "getValueLang", "gender_name", "language", "birthdate", "email", "phone", "language_of_notify_name", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "actionData", "ResumeCardEnum", "information", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "t", "userContext", "useApp", "ResumeCardEnum", "jobPosition", "motion", "div", "opacity", "type", "bounce", "duration", "getValueLang", "job_position", "specialization_name", "language", "position", "employment_type_names", "map", "item", "TextVariantEnum", "textBody2medium", "en", "work_feature_ids", "getValueFromDictionaries", "workfeatures", "salary_payout_period_name", "salary_fixed", "toFixed", "salary_from", "salary_to", "currency_name", "description", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "actionData", "ResumeCardEnum", "jobPosition", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "t", "userContext", "useApp", "ResumeCardEnum", "location", "motion", "div", "opacity", "type", "bounce", "duration", "getValueLang", "country_name", "language", "city_name", "address", "source_name", "relocation_name", "business_trips", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "actionData", "t", "useApp", "ResumeCardEnum", "location", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "t", "theme", "userContext", "useApp", "renderFormFields", "disabled", "TextVariantEnum", "textBody2medium", "settings", "show_resume_to", "show_phone_number_to", "show_email_to", "emailNotifications", "email_notifications", "SettingsEmailNotificationsEnum", "never", "response", "ResumeCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "actionData", "ResumeCardEnum", "settings", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "t", "userContext", "useApp", "ResumeCardEnum", "workExperience", "work_experience", "motion", "div", "opacity", "type", "bounce", "duration", "map", "item", "getValueLang", "specialization_name", "language", "position", "company", "description", "from", "split", "slice", "join", "to", "specialization_id", "import_jsx_dev_runtime", "editCard", "setEditCard", "resume", "dictionaries", "actionData", "ResumeCardEnum", "workExperience", "width", "import_jsx_dev_runtime", "resume", "dictionaries", "actionSuccess", "actionData", "editCard", "setEditCard", "useState", "ResumeCardEnum", "all", "useEffect", "Wrapper", "import_jsx_dev_runtime", "request", "useLoaderData", "resume", "dictionaries", "actionData", "useActionData", "actionSuccess", "success", "t", "useApp", "widthScreen", "useScreenWidth", "incompleteness", "useCheckIncompleteness", "BoxInformationEnum", "warning"]
}
