{
  "version": 3,
  "sources": ["../../../../app/routes/user/resume.create.tsx", "../../../../app/components/pages/User/Resumes/Resume/ResumeCreate.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { ClientFactory } from 'shared/clientFactory';\nimport type { GeneralInformation, Resume } from 'shared/v2/resumes';\nimport { ResumesApi } from 'shared/v2/resumes';\n\nimport { ResumeCreate } from '~/components/pages/User/Resumes/Resume/ResumeCreate';\nimport { getMessageContext } from '~/storages/message.server';\nimport { getUserContextStorage } from '~/storages/userContext.server';\nimport type { IBodyFormData, IUpdateResume } from '~/types/interfaces/iForms';\nimport { collectData, getFileUrl } from '~/utils/helpers';\nimport { createResumeMessage, createResumeTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validateArrayDescriptionsForLanguage,\n  validateArrayElementsForLanguage,\n  validateDescription,\n  validateEmail,\n  validatePhone,\n  validateRequireField,\n  validateThaiOrEnglish,\n  validateTypeImage,\n  validateUnknownString,\n} from '~/utils/validations';\n\nexport const loader = async ({ context, request, params }: LoaderArgs) => {\n  if (!context.userContext.user.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  const clientResume = ClientFactory.createClient(ResumesApi, context.session);\n\n  const url = new URL(request.url);\n  const step = Number(url.searchParams.get('step') ?? '1');\n\n  const userContextStorage = await getUserContextStorage(request);\n  const userContext = userContextStorage.getUserContext();\n\n  try {\n    const resumeId: string = params.id || userContext.forms?.resume || '';\n    const [\n      genders,\n      specializations,\n      location,\n      employment,\n      workfeatures,\n      educationLevel,\n      yearsOfExperience,\n      citizenship,\n      relocations,\n      countries,\n      religions,\n      maritalStatuses,\n      languages,\n      sources,\n      payoutPeriods,\n      currency,\n      emailNotificationsSettings,\n      languageLevel,\n      drivingLicenses,\n      skills,\n      languagesOfNotify,\n      resume,\n    ] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationsMap,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      context.references.educationLevelMap,\n      context.references.yearsOfExperienceMap,\n      context.references.citizenshipMap,\n      context.references.relocationsMap,\n      context.references.countriesMap,\n      context.references.religionsMap,\n      context.references.maritalStatusesMap,\n      context.references.languagesMap,\n      context.references.sourceMap,\n      context.references.payoutPeriodsMap,\n      context.references.currencyMap,\n      context.references.emailNotificationsSettingsMap,\n      context.references.languageLevelMap,\n      context.references.drivingLicensesMap,\n      context.references.skillsMap,\n      context.references.languagesOfNotify,\n      resumeId ? clientResume.getResume({ id: resumeId || '' }) : null,\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n      countries: countries.ToArray(),\n      employment: employment.ToArray(),\n      workfeatures: workfeatures.ToArray(),\n      educationLevel: educationLevel.ToArray(),\n      yearsOfExperience: yearsOfExperience.ToArray(),\n      citizenship: citizenship.ToArray(),\n      relocations: relocations.ToArray(),\n      religions: religions.ToArray(),\n      maritalStatuses: maritalStatuses.ToArray(),\n      languages: languages.ToArray(),\n      sources: sources.ToArray(),\n      payoutPeriods: payoutPeriods.ToArray(),\n      currency: currency.ToArray(),\n      emailNotificationsSettings: emailNotificationsSettings.ToArray(),\n      languageLevel: languageLevel.ToArray(),\n      drivingLicenses: drivingLicenses.ToArray(),\n      skills: skills.ToArray(),\n      languagesOfNotify: languagesOfNotify.ToArray(),\n    };\n\n    return json({ step, resume, dictionaries, resumeId });\n  } catch (e) {\n    const updateUserContext = {\n      ...userContext,\n      forms: {\n        ...userContext.forms,\n        resume: '',\n      },\n    };\n    const headers: HeadersInit = new Headers();\n\n    userContextStorage.setUserContext(updateUserContext);\n    headers.append('Set-Cookie', await userContextStorage.commit());\n    return badRequest(\n      {\n        step: 1,\n        formError: null,\n        success: false,\n        resume: null,\n        resumeId: '',\n        dictionaries: {},\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context, params }: ActionArgs) => {\n  const text = await request.text();\n  const parsedData = qs.parse(text);\n  const { step, action, ...data } = qs.parse(text);\n  const nameCard = data?.nameCard;\n  const userContextStorage = await getUserContextStorage(request);\n  const messageContextStorage = await getMessageContext(request);\n\n  const userContext = userContextStorage.getUserContext();\n\n  const resumeId: string = params.id || userContext.forms?.resume || '';\n\n  const bodyFormData: IBodyFormData = {\n    id: resumeId || '',\n  };\n\n  const client = ClientFactory.createClient(ResumesApi, context.session);\n\n  if (action === 'previous') {\n    const nextPage = Number(step) - 1;\n\n    return redirect(`?step=${nextPage}`);\n  }\n\n  if (nameCard === 'general_information') {\n    if (\n      parsedData?.logo?.toString()?.startsWith('data:image/png') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/wepb') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/svg') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/ico')\n    ) {\n      return badRequest({\n        fieldErrors: {\n          image: validateTypeImage(),\n        },\n        formError: null,\n      });\n    }\n\n    const filUrl = await getFileUrl(parsedData?.logo?.toString(), context);\n\n    try {\n      const fieldErrors = {\n        email: validateEmail(parsedData.email?.toString()),\n        first_name: validateRequireField(parsedData.first_name?.toString()),\n        last_name: validateRequireField(parsedData.last_name?.toString()),\n        phone: validatePhone(parsedData.phone?.toString()),\n        gender_id: validateRequireField(parsedData.gender_id?.toString()),\n        language_of_notify_id: validateRequireField(parsedData.language_of_notify_id?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null });\n      }\n\n      bodyFormData.general_information = {\n        first_name: parsedData.first_name?.toString() || null,\n        last_name: parsedData.last_name?.toString() || null,\n        photo_uri: filUrl || null,\n        gender_id: parsedData.gender_id?.toString() || null,\n        birthdate:\n          parsedData.birthdate?.toString() && parsedData.birthdate?.toString() !== 'null'\n            ? {\n                [context.userContext.language]: parsedData.birthdate?.toString(),\n              }\n            : null,\n        email: parsedData.email?.toString() || null,\n        phone: parsedData.phone?.toString() || null,\n        language_of_notify_id: parsedData.language_of_notify_id?.toString() || null,\n      };\n\n      let createResume = {};\n\n      if (resumeId) {\n        createResume = await client.patchResume({\n          id: resumeId || '',\n          resume: bodyFormData,\n        });\n\n        if ('error' in createResume) {\n          return badRequest({\n            fieldErrors: validateUnknownString(createResume.error as string),\n            formError: null,\n          });\n        }\n\n        const nextPage = Number(step) + 1;\n\n        return redirect(`?step=${nextPage}`);\n      }\n\n      createResume = await client.postResume({\n        resume: {\n          general_information: bodyFormData.general_information as GeneralInformation,\n        } as Resume,\n      });\n\n      if ('error' in createResume) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createResume.error as string),\n          formError: null,\n        });\n      }\n\n      userContext.forms = {\n        ...userContext.forms,\n        resume: (createResume as Resume).id,\n      };\n      const nextPage = Number(step) + 1;\n      const headers: HeadersInit = new Headers();\n\n      userContextStorage.setUserContext(userContext);\n\n      headers.append('Set-Cookie', await userContextStorage.commit());\n\n      return redirect(`?step=${nextPage}`, {\n        headers,\n      });\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n        },\n      });\n    }\n  }\n\n  if (nameCard === 'job_position') {\n    try {\n      const fieldErrors = {\n        specialization_id: validateRequireField(parsedData.specialization?.toString()),\n        position: validateRequireField(parsedData.position?.toString()),\n        description: validateDescription(parsedData.description?.toString()),\n        employment_type_ids: validateRequireField(parsedData.employment?.toString()),\n        salary_payout_period_id: validateRequireField(\n          parsedData.salary_payout_period_id?.toString(),\n        ),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null });\n      }\n\n      bodyFormData.job_position = {\n        specialization_id: parsedData.specialization?.toString() || null,\n        position: parsedData.position?.toString() || null,\n        employment_type_ids: parsedData.employment?.toString()\n          ? parsedData.employment?.toString()?.split(',')\n          : [],\n        work_feature_ids: parsedData.work_feature_ids?.toString()\n          ? parsedData.work_feature_ids?.toString()?.split(',')\n          : [],\n        salary_payout_period_id: parsedData.salary_payout_period_id?.toString() || null,\n        salary_fixed: Number(parsedData.salary_fixed?.toString()) || 0,\n        salary_from: Number(parsedData.salary_from?.toString()) || 0,\n        salary_to: Number(parsedData.salary_to?.toString()) || 0,\n        currency_id: parsedData.currency_id?.toString() || null,\n        description: parsedData.description?.toString() || '',\n      };\n\n      const createResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n\n      if ('error' in createResume) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createResume.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n        },\n      });\n    }\n  }\n\n  if (nameCard === 'location') {\n    try {\n      const fieldErrors = {\n        country_id: validateRequireField(parsedData.country_id?.toString()),\n        region_id: validateRequireField(parsedData.region_id?.toString()),\n        city_id: validateRequireField(parsedData.city_id?.toString()),\n        relocation_id: validateRequireField(parsedData.relocation_id?.toString()),\n        address: validateThaiOrEnglish(parsedData.address?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null });\n      }\n\n      bodyFormData.location = {\n        country_id: parsedData.country_id?.toString() || null,\n        region_id: parsedData.region_id?.toString() || null,\n        city_id: parsedData.city_id?.toString() || null,\n        address: parsedData.address?.toString() || '',\n        source_id: parsedData.source_id?.toString() || null,\n        relocation_id: parsedData.relocation_id?.toString() || null,\n        business_trips: Boolean(parsedData.business_trips?.toString()),\n      };\n\n      const createResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n\n      if ('error' in createResume) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createResume.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n        },\n      });\n    }\n  }\n\n  if (nameCard === 'education') {\n    try {\n      const fieldErrors = {\n        institution: validateArrayElementsForLanguage(parsedData.institution as string[]),\n        position: validateArrayElementsForLanguage(parsedData.position as string[]),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      const education = collectData(\n        context,\n        { institution: (parsedData.institution as string[]) || null },\n        { education_level_id: (parsedData.education_level_id as string[]) || null },\n        { specialization_id: (parsedData.specialization_id as string[]) || null },\n        { position: (parsedData.position as string[]) || null },\n        { start_year: (parsedData.start_year as string[]) || null },\n        { end_year: (parsedData.end_year as string[]) || null },\n      );\n\n      bodyFormData.education = education || [];\n\n      const createResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n\n      if ('error' in createResume) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createResume.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n        },\n      });\n    }\n  }\n\n  if (nameCard === 'work_experience') {\n    try {\n      const fieldErrors = {\n        company: validateArrayElementsForLanguage(parsedData.company as string[]),\n        position: validateArrayElementsForLanguage(parsedData.position as string[]),\n        description: validateArrayDescriptionsForLanguage(parsedData.description as string[]),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      const work_experience = collectData(\n        context,\n        { specialization_id: (parsedData.specialization_id as string[]) || null },\n        { position: (parsedData.position as string[]) || null },\n        { company: (parsedData.company as string[]) || null },\n        { from: (parsedData.from as string[]) || null },\n        { to: (parsedData.to as string[]) || null },\n        { description: (parsedData.description as string[]) || null },\n      );\n\n      bodyFormData.work_experience = work_experience || [];\n\n      const createResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n\n      if ('error' in createResume) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createResume.error as string),\n          formError: null,\n        });\n      }\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n        },\n      });\n    }\n  }\n\n  if (nameCard === 'additional_information') {\n    try {\n      const languages = collectData(\n        context,\n        { language_id: (parsedData.language_id as string[]) || null },\n        { proficiency_level_id: (parsedData.proficiency_level_id as string[]) || null },\n      );\n\n      bodyFormData.additional_information = {\n        languages: languages || [],\n        skill_ids: parsedData.skill_ids?.toString()\n          ? parsedData.skill_ids?.toString()?.split(',')\n          : [],\n        driver_license_ids: parsedData.driver_license_ids?.toString()\n          ? parsedData.driver_license_ids?.toString()?.split(',')\n          : null,\n        other_license: parsedData.other_license?.toString() || '',\n        marital_status_id: parsedData.marital_status_id?.toString() || null,\n        citizenship_id: parsedData.citizenship_id?.toString() || null,\n        religion_id: parsedData.religion_id?.toString() || null,\n      };\n\n      const fieldErrors = {\n        other_license: validateThaiOrEnglish(parsedData.other_license as string),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      const createResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n\n      if ('error' in createResume) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createResume.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n        },\n      });\n    }\n  }\n\n  if (nameCard === 'settings') {\n    try {\n      bodyFormData.settings = {\n        show_resume_to: parsedData.show_resume_to?.toString() ? 'anyone' : 'nobody',\n        show_phone_number_to: parsedData.show_phone_number_to?.toString() ? 'anyone' : 'nobody',\n        show_email_to: parsedData.show_email_to?.toString() ? 'anyone' : 'nobody',\n        email_notifications: parsedData.email_notifications?.toString()\n          ? parsedData.email_notifications?.toString()\n          : 'nobody',\n      };\n\n      const createResume = await client.patchResume({\n        id: resumeId || '',\n        resume: bodyFormData,\n      });\n\n      if ('error' in createResume) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createResume.error as string),\n          formError: null,\n        });\n      }\n\n      const userContextStorage = await getUserContextStorage(request);\n      const userContext = userContextStorage.getUserContext();\n\n      userContext.forms = {\n        ...userContext.forms,\n        resume: '',\n      };\n      const headers: HeadersInit = new Headers();\n\n      userContextStorage.setUserContext(userContext);\n      messageContextStorage.setSuccessMessage(\n        createResumeMessage(context.userContext.language),\n        createResumeTitle(context.userContext.language),\n      );\n\n      headers.append('Set-Cookie', await userContextStorage.commit());\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n\n      return redirect(`/user/resume`, {\n        headers,\n      });\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n        },\n      });\n    }\n  }\n\n  return badRequest({\n    fieldErrors: null,\n    formError: {\n      en: 'Some data entered incorrectly',\n      th: 'ข้อมูลบางอย่างที่ป้อนไม่ถูกต้อง',\n    },\n  });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  const { step, resumeId, dictionaries } = request;\n\n  const resume = request?.resume;\n\n  return (\n    <ResumeCreate\n      step={step}\n      resume={resume}\n      actionData={actionData as IUpdateResume}\n      resumeId={resumeId}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { memo } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateResume } from '~/types/interfaces/iForms';\n\nimport ResumeAdditionalinformationEdit from './components/ResumeAdditionalInformation/ResumeAdditionalInformationEdit';\nimport ResumeEducationEdit from './components/ResumeEducation/ResumeEducationEdit';\nimport ResumeInformationEdit from './components/ResumeInformation/ResumeInformationEdit';\nimport ResumeJobPositionEdit from './components/ResumeJobPosition/ResumeJobPositionEdit';\nimport ResumeLocationEdit from './components/ResumeLocation/ResumeLocationEdit';\nimport ResumeSettingsEdit from './components/ResumeSettings/ResumeSettingsEdit';\nimport ResumeWorkExperienceEdit from './components/ResumeWorkExperience/ResumeWorkExperienceEdit';\nimport { Wrapper } from './styles';\n\nexport const ResumeCreate = memo(\n  ({\n    step,\n    resume,\n    actionData,\n    dictionaries,\n    resumeId,\n  }: {\n    step?: number;\n    resume?: Resume | null;\n    actionData?: IUpdateResume;\n    dictionaries?: IDictionaries;\n    resumeId: string;\n  }): JSX.Element => (\n    // const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    //   e.preventDefault();\n    // }\n\n    <Wrapper>\n      <input name='step' type='hidden' value={step} />\n      {step === 1 && (\n        <Form method='POST' style={{ width: '100%' }}>\n          <input name='step' type='hidden' value={step} />\n          <ResumeInformationEdit\n            state='create'\n            resume={resume}\n            dictionaries={dictionaries}\n            step={step}\n            actionData={actionData}\n          />\n        </Form>\n      )}\n      {step === 2 && (\n        <Form method='PATCH' style={{ width: '100%' }}>\n          <input name='step' type='hidden' value={step} />\n          <input name='vacancy_id' type='hidden' value={resumeId} />\n          <ResumeLocationEdit\n            state='create'\n            resume={resume}\n            dictionaries={dictionaries}\n            step={step}\n            actionData={actionData}\n          />\n        </Form>\n      )}\n      {step === 3 && (\n        <Form method='PATCH' style={{ width: '100%' }}>\n          <input name='step' type='hidden' value={step} />\n          <input name='vacancy_id' type='hidden' value={resumeId} />\n          <ResumeJobPositionEdit\n            state='create'\n            resume={resume}\n            dictionaries={dictionaries}\n            step={step}\n            actionData={actionData}\n          />\n        </Form>\n      )}\n      {step === 4 && (\n        <Form method='PATCH' style={{ width: '100%' }}>\n          <input name='step' type='hidden' value={step} />\n          <input name='vacancy_id' type='hidden' value={resumeId} />\n          <ResumeEducationEdit\n            state='create'\n            resume={resume}\n            dictionaries={dictionaries}\n            step={step}\n            actionData={actionData}\n          />\n        </Form>\n      )}\n      {step === 5 && (\n        <Form method='PATCH' style={{ width: '100%' }}>\n          <input name='step' type='hidden' value={step} />\n          <input name='vacancy_id' type='hidden' value={resumeId} />\n          <ResumeWorkExperienceEdit\n            state='create'\n            resume={resume}\n            dictionaries={dictionaries}\n            step={step}\n            actionData={actionData}\n          />\n        </Form>\n      )}\n      {step === 6 && (\n        <Form method='PATCH' style={{ width: '100%' }}>\n          <input name='step' type='hidden' value={step} />\n          <input name='vacancy_id' type='hidden' value={resumeId} />\n          <ResumeAdditionalinformationEdit\n            state='create'\n            resume={resume}\n            dictionaries={dictionaries}\n            step={step}\n            actionData={actionData}\n          />\n        </Form>\n      )}\n      {step === 7 && (\n        <Form method='PATCH' style={{ width: '100%' }}>\n          <input name='step' type='hidden' value={step} />\n          <input name='vacancy_id' type='hidden' value={resumeId} />\n          <ResumeSettingsEdit\n            state='create'\n            resume={resume}\n            dictionaries={dictionaries}\n            step={step}\n            actionData={actionData}\n          />\n        </Form>\n      )}\n    </Wrapper>\n  ),\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAA+B;AAC/B;AACA,gBAAe;;;ACHf;AACA,IAAAA,gBAAqB;AAkCf;AAnBC,IAAMC,mBAAeC,oBAC1B,CAAC;EACCC;EACAC;EACAC;EACAC;EACAC;AAOF;;;;EAKE,mDAAC,WACC;uDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOJ,QAAxC;;;;WAA6C;IAC5CA,SAAS,KACR,mDAAC,QAAK,QAAO,QAAO,OAAO;MAAEK,OAAO;IAAO,GACzC;yDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOL,QAAxC;;;;aAA6C;MAC7C,mDAAC,yBACC,OAAM,UACN,QACA,cACA,MACA,cALF;;;;aAKyB;SAP3B;;;;WASA;IAEDA,SAAS,KACR,mDAAC,QAAK,QAAO,SAAQ,OAAO;MAAEK,OAAO;IAAO,GAC1C;yDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOL,QAAxC;;;;aAA6C;MAC7C,mDAAC,WAAM,MAAK,cAAa,MAAK,UAAS,OAAOI,YAA9C;;;;aAAuD;MACvD,mDAAC,sBACC,OAAM,UACN,QACA,cACA,MACA,cALF;;;;aAKyB;SAR3B;;;;WAUA;IAEDJ,SAAS,KACR,mDAAC,QAAK,QAAO,SAAQ,OAAO;MAAEK,OAAO;IAAO,GAC1C;yDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOL,QAAxC;;;;aAA6C;MAC7C,mDAAC,WAAM,MAAK,cAAa,MAAK,UAAS,OAAOI,YAA9C;;;;aAAuD;MACvD,mDAAC,yBACC,OAAM,UACN,QACA,cACA,MACA,cALF;;;;aAKyB;SAR3B;;;;WAUA;IAEDJ,SAAS,KACR,mDAAC,QAAK,QAAO,SAAQ,OAAO;MAAEK,OAAO;IAAO,GAC1C;yDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOL,QAAxC;;;;aAA6C;MAC7C,mDAAC,WAAM,MAAK,cAAa,MAAK,UAAS,OAAOI,YAA9C;;;;aAAuD;MACvD,mDAAC,uBACC,OAAM,UACN,QACA,cACA,MACA,cALF;;;;aAKyB;SAR3B;;;;WAUA;IAEDJ,SAAS,KACR,mDAAC,QAAK,QAAO,SAAQ,OAAO;MAAEK,OAAO;IAAO,GAC1C;yDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOL,QAAxC;;;;aAA6C;MAC7C,mDAAC,WAAM,MAAK,cAAa,MAAK,UAAS,OAAOI,YAA9C;;;;aAAuD;MACvD,mDAAC,4BACC,OAAM,UACN,QACA,cACA,MACA,cALF;;;;aAKyB;SAR3B;;;;WAUA;IAEDJ,SAAS,KACR,mDAAC,QAAK,QAAO,SAAQ,OAAO;MAAEK,OAAO;IAAO,GAC1C;yDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOL,QAAxC;;;;aAA6C;MAC7C,mDAAC,WAAM,MAAK,cAAa,MAAK,UAAS,OAAOI,YAA9C;;;;aAAuD;MACvD,mDAAC,mCACC,OAAM,UACN,QACA,cACA,MACA,cALF;;;;aAKyB;SAR3B;;;;WAUA;IAEDJ,SAAS,KACR,mDAAC,QAAK,QAAO,SAAQ,OAAO;MAAEK,OAAO;IAAO,GAC1C;yDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOL,QAAxC;;;;aAA6C;MAC7C,mDAAC,WAAM,MAAK,cAAa,MAAK,UAAS,OAAOI,YAA9C;;;;aAAuD;MACvD,mDAAC,sBACC,OAAM,UACN,QACA,cACA,MACA,cALF;;;;aAKyB;SAR3B;;;;WAUA;OA1FJ;;;;SA4FA;CAEJ;;;ADvHA,qBAAkC;AAClC,yBAAsC;AAItC,qBAA2B;AA+lBvB,IAAAE,0BAAA;AATW,SAAf,QAAgC;AAC9B,QAAMC,UAAUC,cAA6B;AAC7C,QAAMC,aAAaC,cAA6B;AAEhD,QAAM;IAAEC;IAAMC;IAAUC;EAAa,IAAIN;AAEzC,QAAMO,SAASP,SAASO;AAExB,SACE,oDAAC,gBACC,MACA,QACA,YACA,UACA,gBALF;;;;SAK6B;AAGjC;",
  "names": ["import_react", "ResumeCreate", "memo", "step", "resume", "actionData", "dictionaries", "resumeId", "width", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "step", "resumeId", "dictionaries", "resume"]
}
