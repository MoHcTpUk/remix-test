{
  "version": 3,
  "sources": ["../../../../app/routes/user/responses.tsx", "../../../../app/components/pages/User/Responses/index.tsx", "../../../../app/components/ui/Containers/WrapperContainer/styles.ts", "../../../../app/components/ui/Containers/WrapperContainer/index.tsx", "../../../../app/components/pages/User/Responses/components/MainFilter/index.tsx"],
  "sourcesContent": ["import type { LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { Outlet } from '@remix-run/react';\n\nimport { Box } from '~/components/common/Box';\nimport { Responses } from '~/components/pages/User/Responses';\n\nexport const loader = async ({ context, params }: LoaderArgs) => {\n  if (!context.userContext?.user?.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  return json({});\n};\n\nexport default function Index() {\n  return (\n    <Box flexDirection='column' width='100%' alignItems='flex-start' gap='24px'>\n      <Responses />\n      <Outlet />\n      {}\n    </Box>\n  );\n}\n", "import { useMatches } from '@remix-run/react';\nimport { memo } from 'react';\nimport type { Response } from 'shared/v2/responses';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { WrapperContainer } from '~/components/ui/Containers';\nimport { calculateStatistics, useMatchesData } from '~/utils/helpers';\n\nimport MainFilter from './components/MainFilter';\n\nexport const Responses = memo((): JSX.Element => {\n  const matches = useMatches();\n  const data = useMatchesData(matches[3].id);\n\n  const dataVacancy: Vacancy = data?.vacancy;\n  const dataResume: Resume = data?.resume;\n  const responses: Response[] = data?.responses?.data;\n\n  const statistics = dataResume\n    ? calculateStatistics(responses, dataResume?.id)\n    : calculateStatistics(responses, dataVacancy?.id);\n\n  return (\n    <WrapperContainer>\n      <MainFilter\n        vacancy={dataVacancy}\n        resume={dataResume}\n        variant={(dataVacancy && 'vacancy') || (dataResume && 'resume')}\n        statistics={statistics}\n      />\n    </WrapperContainer>\n  );\n});\n", "import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 16px;\n  @media (min-width: 1024px) {\n    gap: 24px;\n  }\n`;\n", "import type { ReactNode } from 'react';\n\nimport { Wrapper } from './styles';\n\ninterface WrapperContainerProps {\n  children: ReactNode;\n}\n\nexport function WrapperContainer({ children }: WrapperContainerProps) {\n  return <Wrapper>{children}</Wrapper>;\n}\n", "import { Link, useLocation } from '@remix-run/react';\nimport { type Response, type Statistics } from 'shared/v2/responses';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { CheckBox } from '~/components/common/Checkbox';\nimport ResponseAllTypeStatuses from '~/components/common/ResponseAllTypeStatuses';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport {\n  ResumePartCardHeading,\n  VacancyPartCardHeading,\n} from '~/components/entities/cardComponents/partCard';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { ResponseCardVariantEnum } from '~/types/enums/responseCardVariantEnum';\n\nfunction MainFilter({\n  variant,\n  responses,\n  vacancy,\n  resume,\n  statistics,\n}: {\n  variant?: 'resume' | 'vacancy';\n  responses?: Response[];\n  vacancy?: Vacancy;\n  resume?: Resume;\n  statistics?: Statistics;\n}) {\n  const { theme, t } = useApp();\n  const location = useLocation();\n  const widthScreen = useScreenWidth();\n\n  return (\n    <BoxCard title={t('user:response_filters')}>\n      {resume && (\n        <Box\n          flexDirection='column'\n          padding={widthScreen > 768 ? '24px' : '16px'}\n          borderRadius={widthScreen > 768 ? '8px' : '4px'}\n          backgroundColor={theme.responses.filters.backgroundColor}\n          gap={widthScreen > 768 ? '16px' : ''}\n        >\n          <ResumePartCardHeading\n            resume={resume}\n            variant='response'\n            variantResponseCard={ResponseCardVariantEnum.heading}\n          />\n\n          <ResponseAllTypeStatuses statistics={statistics} />\n        </Box>\n      )}\n\n      {vacancy && (\n        <Box\n          flexDirection='column'\n          padding={widthScreen > 768 ? '24px' : '16px'}\n          borderRadius={widthScreen > 768 ? '8px' : '4px'}\n          backgroundColor={theme.responses.filters.backgroundColor}\n          gap={widthScreen > 768 ? '16px' : ''}\n        >\n          <VacancyPartCardHeading\n            vacancy={vacancy}\n            variant='response'\n            variantResponseCard={ResponseCardVariantEnum.heading}\n          />\n\n          <ResponseAllTypeStatuses statistics={statistics} />\n        </Box>\n      )}\n\n      {!resume && !vacancy && (\n        <>\n          <Text variant={TextVariantEnum.textBody1medium}>\n            {t('user:select_the_resume_or_vacancy_for_which_you_want_to_see_responses')}\n          </Text>\n          <Box gap='16px'>\n            <Link\n              to={location.pathname.includes('responses/resume') ? '/user/responses' : 'resume'}\n            >\n              <CheckBox\n                checked={location.pathname.includes('responses/resume')}\n                label={t('user:resumes')}\n              />\n            </Link>\n\n            <Link\n              to={location.pathname.includes('responses/vacancy') ? '/user/responses' : 'vacancy'}\n            >\n              <CheckBox\n                checked={location.pathname.includes('responses/vacancy')}\n                label={t('user:vacancies')}\n              />\n            </Link>\n          </Box>\n        </>\n      )}\n    </BoxCard>\n  );\n}\n\nexport default MainFilter;\n"],
  "mappings": "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",
  "names": ["import_react", "WrapperContainer", "children", "import_jsx_dev_runtime", "MainFilter", "variant", "responses", "vacancy", "resume", "statistics", "theme", "t", "useApp", "location", "useLocation", "widthScreen", "useScreenWidth", "filters", "backgroundColor", "ResponseCardVariantEnum", "heading", "TextVariantEnum", "textBody1medium", "pathname", "includes", "import_jsx_dev_runtime", "Responses", "memo", "matches", "useMatches", "data", "useMatchesData", "id", "dataVacancy", "vacancy", "dataResume", "resume", "responses", "statistics", "calculateStatistics", "import_jsx_dev_runtime"]
}
