{
  "version": 3,
  "sources": ["../../../../app/routes/user/vacancy.tsx", "../../../../app/components/pages/User/Vacancies/index.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { Form, useActionData, useLoaderData, useSubmit } from '@remix-run/react';\nimport { useEffect, useRef, useState } from 'react';\nimport type { EntityGetVacanciesResponse } from 'shared/client/data-contracts';\nimport { ClientFactory } from 'shared/clientFactory';\nimport type { Company } from 'shared/v2/companies';\nimport { CompaniesApi } from 'shared/v2/companies';\nimport { VacanciesApi } from 'shared/v2/vacancies';\nimport { styled } from 'styled-components';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { Pagination } from '~/components/common/Pagination';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { CreateEntityCard } from '~/components/pages/User/components/CreateEntityCard';\nimport { VacanciesComponent } from '~/components/pages/User/Vacancies';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { getMessageContext } from '~/storages/message.server';\nimport { getUserContextStorage } from '~/storages/userContext.server';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IPaginationRange } from '~/types/interfaces/IPaginationRange';\nimport { extractCompanyData, getPaginationPages, getPaginationRange } from '~/utils/helpers.client';\nimport {\n  copiedVacancyMessage,\n  copiedVacancyTitle,\n  deletedVacancyMessage,\n  deletedVacancyTitle,\n  errorActionMessage,\n  errorActionTitle,\n  errorPublishCommonIsNotEmailConfirmMessage,\n  errorPublishUnverifiedCompanyTitle,\n  errorPublishVacancyMessage,\n  errorPublishVacancyTitle,\n  publishVacancyMessage,\n  publishVacancyTitle,\n  unpublishVacancyMessage,\n  unpublishVacancyTitle,\n} from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\n\nexport const BoxPagination = styled.div`\n  width: 100%;\n  display: flex;\n  /* align-items: center; */\n  justify-content: center;\n  max-width: 920px;\n  margin: 16px 0;\n  flex-direction: row;\n  gap: 16px;\n\n  @media (min-width: 1024px) {\n    margin: 24px 0;\n    gap: 24px;\n  }\n  @media (min-width: 1280px) {\n    max-width: 100%;\n  }\n`;\n\nexport const FilterContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport interface ListVacanciesResponse {\n  success: boolean;\n  formError: {\n    en: string;\n    th: string;\n  } | null;\n  fieldErrors: unknown | null;\n  vacancies: EntityGetVacanciesResponse | null;\n  id: string | null;\n}\n\ninterface PublishError {\n  status?: string;\n  error?: string;\n  // Другие свойства вашей ошибки\n}\n\nexport const loader = async ({ context, request }: LoaderArgs) => {\n  if (!context.userContext.user.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  try {\n    const url = new URL(request.url);\n    const max_page_size = url.searchParams.get('max_page_size');\n    const current_token = url.searchParams.get('current_token');\n    const current_page = url.searchParams.get('current_page');\n    const max_pages = url.searchParams.get('max_pages');\n    const by_company = url.searchParams.get('company_id');\n\n    const pages = getPaginationPages(current_page, max_pages);\n    const clientVacancies = ClientFactory.createClient(VacanciesApi, context.session);\n    const clientCompanies = ClientFactory.createClient(CompaniesApi, context.session);\n\n    const [\n      genders,\n      specializations,\n      location,\n      employment,\n      workfeatures,\n      educationLevel,\n      yearsOfExperience,\n      vacancies,\n      companies,\n    ] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationsMap,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      context.references.educationLevelMap,\n      context.references.yearsOfExperienceMap,\n      clientVacancies.getVacancies({\n        company: by_company || undefined,\n        only_my: true,\n        max_page_size: max_page_size ? +max_page_size : 10,\n        pages,\n        page_token:\n          current_page && +current_page !== 1 && current_token ? current_token : undefined,\n      }),\n      clientCompanies.getCompanies({ only_my: true, max_page_size: 100 }),\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n      employment: employment.ToArray(),\n      workfeatures: workfeatures.ToArray(),\n      educationLevel: educationLevel.ToArray(),\n      yearsOfExperience: yearsOfExperience.ToArray(),\n    };\n\n    const paginationRange = getPaginationRange(pages, vacancies?.max_pages, vacancies?.page_tokens);\n    const maxPages = vacancies.max_pages;\n\n    const pagination = {\n      max_page_size,\n      current_token,\n      current_page,\n      paginationRange,\n      maxPages,\n    };\n\n    const filters = {\n      by_company,\n    };\n\n    return json({ vacancies, dictionaries, companies, filters, pagination });\n  } catch (e) {\n    const headers: HeadersInit = new Headers();\n    const messageContextStorage = await getMessageContext(request);\n\n    messageContextStorage.setSuccessMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n    return badRequest(\n      {\n        vacancies: { data: [] },\n        companies: { data: [] },\n        filters: {\n          by_company: null,\n        },\n        dictionaries: {\n          genders: [],\n          specializations: [],\n          location: [],\n          employment: [],\n          workfeatures: [],\n          educationLevel: [],\n          yearsOfExperience: [],\n        },\n        pagination: {\n          max_page_size: null,\n          current_token: null,\n          current_page: null,\n          paginationRange: null,\n          maxPages: null,\n        },\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context }: ActionArgs) => {\n  const formData = await request.formData();\n  const clientVacancies = ClientFactory.createClient(VacanciesApi, context.session);\n  const messageContextStorage = await getMessageContext(request);\n  const headers: HeadersInit = new Headers();\n\n  const id = formData.get('id') as string;\n  const action = formData.get('action');\n  const companyVerified = formData.get('company_verified');\n\n  try {\n    if (action === 'delete') {\n      await clientVacancies.deleteVacancy({ id: id || '' });\n      messageContextStorage.setSuccessMessage(\n        deletedVacancyMessage(context.userContext.language),\n        deletedVacancyTitle(context.userContext.language),\n      );\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n\n      if (context.userContext.forms?.vacancy === id) {\n        const userContextStorage = await getUserContextStorage(request);\n        const userContext = userContextStorage.getUserContext();\n\n        const updateUserContext = {\n          ...userContext,\n          forms: {\n            ...userContext.forms,\n            vacancy: '',\n          },\n        };\n        userContextStorage.setUserContext(updateUserContext);\n        headers.append('Set-Cookie', await userContextStorage.commit());\n      }\n\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n    if (action === 'copy') {\n      await clientVacancies.postVacancies({ source: id || '' });\n      messageContextStorage.setSuccessMessage(\n        copiedVacancyMessage(context.userContext.language),\n        copiedVacancyTitle(context.userContext.language),\n      );\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n      return json({ success: true, fieldErrors: null }, { headers });\n    }\n\n    if (action === 'published') {\n      const userContextStorage = await getUserContextStorage(request);\n      const userContext = userContextStorage.getUserContext();\n      const value = formData.get('publish');\n      const checkFields = formData.get('checkFields');\n\n      if (!userContext.user.isEmailConfirm) {\n        messageContextStorage.setErrorMessage(\n          errorPublishCommonIsNotEmailConfirmMessage(context.userContext.language),\n          errorPublishVacancyTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: null,\n            success: false,\n            vacancies: null,\n            id,\n          },\n          headers,\n        );\n      }\n\n      if (checkFields === 'false') {\n        messageContextStorage.setErrorMessage(\n          errorPublishVacancyMessage(context.userContext.language),\n          errorPublishVacancyTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: null,\n            success: false,\n            vacancies: null,\n            id,\n          },\n          headers,\n        );\n      }\n\n      if (companyVerified === 'false') {\n        messageContextStorage.setErrorMessage(\n          errorPublishUnverifiedCompanyTitle(context.userContext.language),\n          errorPublishVacancyTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: null,\n            success: false,\n            vacancies: null,\n            id,\n          },\n          headers,\n        );\n      }\n\n      const res = await clientVacancies.patchVacancy({\n        id,\n        vacancy: {\n          id,\n          published: value === 'true',\n        },\n      });\n\n      if ((res as PublishError)?.error) {\n        messageContextStorage.setSuccessMessage(\n          errorActionMessage(context.userContext.language),\n          errorActionTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: {\n              en: (res as PublishError)?.error,\n              th: (res as PublishError)?.error,\n            },\n            success: false,\n            vacancies: null,\n            id,\n          },\n          headers,\n        );\n      }\n\n      if (value === 'true') {\n        messageContextStorage.setSuccessMessage(\n          publishVacancyMessage(context.userContext.language),\n          publishVacancyTitle(context.userContext.language),\n        );\n      } else {\n        messageContextStorage.setSuccessMessage(\n          unpublishVacancyMessage(context.userContext.language),\n          unpublishVacancyTitle(context.userContext.language),\n        );\n      }\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n  } catch (e) {\n    messageContextStorage.setSuccessMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n    badRequest(\n      {\n        fieldErrors: e,\n        bodyFormData: null,\n        formError: null,\n        success: false,\n        vacancies: null,\n        id,\n      },\n      headers,\n    );\n  }\n\n  messageContextStorage.setSuccessMessage(\n    errorActionMessage(context.userContext.language),\n    errorActionTitle(context.userContext.language),\n  );\n  headers.append('Set-Cookie', await messageContextStorage.commit());\n  return badRequest(\n    {\n      fieldErrors: null,\n      bodyFormData: null,\n      formError: null,\n      success: false,\n      vacancies: null,\n      id,\n    },\n    headers,\n  );\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  const { theme, t } = useApp();\n  const widthScreen = useScreenWidth();\n  const submit = useSubmit();\n  const formRef = useRef(null);\n  const formFilterVacanciesRef = useRef(null);\n\n  const { dictionaries, pagination, filters } = request;\n\n  const [maxPageSize, setMaxPageSize] = useState(+(pagination?.max_page_size as string) || 10);\n  const [currentPage, setCurrentPage] = useState(+(pagination?.current_page as string) || 1);\n  const [currentToken, setCurrentToken] = useState(pagination?.current_token || undefined);\n\n  const handleSubmit = () => {\n    submit(formRef.current, { preventScrollReset: true });\n    submit(formFilterVacanciesRef.current, { preventScrollReset: true });\n  };\n\n  const [initialRendering, setInitialRendering] = useState(false);\n  const [filteredVacancies, setFilteredVacancies] = useState<string[]>([]);\n\n  useEffect(() => {\n    // don't submit form on first render\n    if (!filters.by_company) {\n      setInitialRendering(true);\n    }\n\n    if (initialRendering || (!initialRendering && filters.by_company)) {\n      if (filters.by_company) {\n        setFilteredVacancies([filters?.by_company]);\n      } else {\n        setFilteredVacancies([]);\n      }\n    }\n  }, [filters.by_company]);\n\n  useEffect(() => {\n    if (\n      filteredVacancies !== undefined &&\n      filteredVacancies?.[0] !== undefined &&\n      filteredVacancies?.[0] !== filters?.by_company &&\n      formFilterVacanciesRef?.current\n    ) {\n      if (initialRendering) {\n        handleSubmit();\n      } else {\n        setInitialRendering(true);\n      }\n    }\n  }, [filteredVacancies]);\n\n  function getFilterEntriesOfVacancies(data?: Company[]): [string, string][] {\n    const companiesWithVacancies = data?.filter(\n      (item) => item.number_of_vacancies && item.number_of_vacancies > 0,\n    );\n    const allVacanciesFilter: [id: string, value: string] = ['', t('user:all_vacancies')];\n    const result = [allVacanciesFilter, ...extractCompanyData(companiesWithVacancies)];\n    return result;\n  }\n\n  const filterEntries = getFilterEntriesOfVacancies(request.companies.data);\n\n  return request.vacancies.data.length > 0 ? (\n    <Box flexDirection='column' width='100%' gap={widthScreen < 1024 ? '16px' : '24px'}>\n      {filterEntries[1] && (\n        <BoxCard variant={VariantCardEnum.editCard}>\n          <FilterContent>\n            <Text variant={TextVariantEnum.textHeading3} color={theme.defaultTextColor}>\n              {t('common:filters')}\n            </Text>\n            <Form\n              method='GET'\n              style={{ width: '100%' }}\n              onChange={handleSubmit}\n              ref={formFilterVacanciesRef}\n              preventScrollReset\n            >\n              <Select\n                entries={filterEntries}\n                placeholder={t('user:all_vacancies')}\n                values={filteredVacancies}\n                setExternalState={setFilteredVacancies}\n                id='company_id'\n                name='company_id'\n                className='vacancyFilter'\n              />\n            </Form>\n          </FilterContent>\n        </BoxCard>\n      )}\n\n      <VacanciesComponent\n        actionData={actionData as ListVacanciesResponse}\n        vacancies={request.vacancies.data}\n        companies={request.companies.data}\n        dictionaries={dictionaries}\n      />\n\n      {pagination?.maxPages && pagination?.maxPages > 1 && (\n        <Form\n          method='GET'\n          style={{ width: '100%', margin: widthScreen > 1280 ? '24px 0' : '16px 0' }}\n          onChange={handleSubmit}\n          ref={formRef}\n          preventScrollReset\n        >\n          <Pagination\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage}\n            setCurrentToken={setCurrentToken}\n            paginationRange={pagination?.paginationRange as IPaginationRange[]}\n            maxPages={pagination.maxPages}\n            maxPageSize={maxPageSize}\n            setMaxPageSize={setMaxPageSize}\n            handleSubmit={handleSubmit}\n            widthScreen={widthScreen}\n          />\n          <input type='hidden' name='current_page' value={currentPage} />\n          <input type='hidden' name='current_token' value={currentToken} />\n          <input type='hidden' name='max_pages' value={pagination?.maxPages} />\n        </Form>\n      )}\n    </Box>\n  ) : (\n    <CreateEntityCard />\n  );\n}\n", "import { Form, Link, useSubmit } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport SvgAttention from '~/components/common/Icons/Attention';\nimport { Select } from '~/components/common/Select';\nimport { Switcher } from '~/components/common/Switcher';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ModalConfirmDelete from '~/components/entities/ModalConfirmDelete';\nimport { useApp, useCheckIncompleteEntityInList, useScreenWidth } from '~/hooks';\nimport type { ListVacanciesResponse } from '~/routes/user/vacancy';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { DEFAULT_COMPANY_LOGO } from '~/utils/constants';\nimport {\n  checkCompleteness,\n  extractCompanyData,\n  getImageUrl,\n  getSalary,\n  getValueLang,\n} from '~/utils/helpers.client';\n\nimport { BoxCard } from '../../../common/Card';\nimport {\n  BoxButtons,\n  BoxControl,\n  BoxHeading,\n  DataBox,\n  Field,\n  FilterContent,\n  HeadingInformation,\n} from './styles';\n\nexport const VacanciesComponent = memo(\n  ({\n    vacancies,\n    dictionaries,\n    companies,\n    actionData,\n  }: {\n    vacancies?: Vacancy[] | null;\n    companies?: Company[];\n    dictionaries?: IDictionaries;\n    actionData?: ListVacanciesResponse;\n  }): JSX.Element => {\n    const { theme, t, userContext } = useApp();\n    const widthScreen = useScreenWidth();\n\n    const submit = useSubmit();\n\n    const handleChangeForm = (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      const action = (event.target as HTMLInputElement).name;\n\n      const formElement = event.currentTarget as HTMLFormElement;\n\n      if (action === 'published') {\n        submit(formElement, { preventScrollReset: true });\n      }\n    };\n\n    const [visibleDelete, setVisibleDelete] = useState(false);\n    const [deleteSelectedId, setSelectedId] = useState('');\n\n    const handleClickDelete = (id?: string) => {\n      setSelectedId(id || '');\n      setVisibleDelete(true);\n    };\n\n    const hasIncompleteVacancy = useCheckIncompleteEntityInList(null, vacancies);\n\n    return (\n      <Box\n        flexDirection='column'\n        width='100%'\n        gap={widthScreen > 1024 ? '24px' : '16px'}\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        {hasIncompleteVacancy && (\n          <BoxInformation\n            variant={BoxInformationEnum.warning}\n            title={t('user:you_have_incomplete_vacancies')}\n            flexDirection='column'\n          />\n        )}\n\n        {vacancies?.map((vacancy) => (\n          <BoxCard key={vacancy?.id} variant={VariantCardEnum.userCard}>\n            <Link to={vacancy?.id || '#'}>\n              <BoxHeading>\n                <img\n                  src={\n                    vacancy?.company_logo_uri\n                      ? getImageUrl(vacancy?.company_logo_uri)\n                      : DEFAULT_COMPANY_LOGO\n                  }\n                  alt='company logo'\n                />\n                {!checkCompleteness(null, vacancy) && <SvgAttention />}\n\n                <HeadingInformation>\n                  <Text className='title' variant={TextVariantEnum.textHeading2}>\n                    {vacancy.vacancy_page?.position}\n                  </Text>\n                  <Text\n                    variant={TextVariantEnum.textBody1medium}\n                    color={theme.user.descriptionTextColor}\n                  >\n                    {vacancy?.contacts?.company_name}\n                  </Text>\n\n                  {(vacancy?.vacancy_page?.salary_fixed ||\n                    (vacancy.vacancy_page?.salary_from && vacancy.vacancy_page?.salary_to)) && (\n                    <Box>\n                      {vacancy.vacancy_page?.salary_from && vacancy.vacancy_page?.salary_to ? (\n                        <Text className='price' variant={TextVariantEnum.textHeading3}>\n                          {vacancy.vacancy_page?.salary_from} - {vacancy.vacancy_page?.salary_to}\n                          &nbsp;\n                          {getSalary(\n                            vacancy.vacancy_page.currency_name?.en,\n                            vacancy.vacancy_page.salary_payout_period_name?.en,\n                            userContext.language,\n                          )}\n                        </Text>\n                      ) : (\n                        <Text className='price' variant={TextVariantEnum.textHeading3}>\n                          {vacancy.vacancy_page?.salary_fixed}&nbsp;\n                          {getSalary(\n                            vacancy.vacancy_page.currency_name?.en,\n                            vacancy.vacancy_page.salary_payout_period_name?.en,\n                            userContext.language,\n                          )}\n                        </Text>\n                      )}\n                    </Box>\n                  )}\n                </HeadingInformation>\n              </BoxHeading>\n            </Link>\n\n            <DataBox>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:district')}\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(vacancy.location?.city_name, userContext.language)}\n                </Text>\n              </Field>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:employment')}\n                </Text>\n                <Box flexDirection='column' gap='4px' flexWrap='wrap'>\n                  {vacancy.vacancy_page?.employment_type_names?.map((employment) => (\n                    <Text\n                      key={employment[userContext.language]}\n                      variant={TextVariantEnum.textBody2medium}\n                    >\n                      {getValueLang(employment, userContext.language)}\n                    </Text>\n                  ))}\n                </Box>\n              </Field>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:work_features')}\n                </Text>\n                <Box flexDirection='column' gap='4px' flexWrap='wrap'>\n                  {vacancy.vacancy_page?.work_feature_names?.map((feature) => (\n                    <Text\n                      key={feature[userContext.language]}\n                      variant={TextVariantEnum.textBody2medium}\n                    >\n                      {getValueLang(feature, userContext.language)}\n                    </Text>\n                  ))}\n                </Box>\n              </Field>\n            </DataBox>\n\n            <BoxControl>\n              <Form method='PATCH' onChange={(event) => handleChangeForm(event)} preventScrollReset>\n                <input type='hidden' name='id' value={vacancy?.id} />\n                <input type='hidden' name='action' value='published' />\n                <input\n                  type='hidden'\n                  name='company_verified'\n                  value={vacancy?.company_verified?.toString()}\n                />\n                <input type='hidden' name='publish' value={vacancy?.published ? 'false' : 'true'} />\n                <input\n                  type='hidden'\n                  name='checkFields'\n                  value={checkCompleteness(null, vacancy)?.toString()}\n                />\n                <Switcher\n                  checked={Boolean(vacancy?.published)}\n                  htmlLabel={vacancy?.id}\n                  name='published'\n                  variant='default'\n                  checkedLabel={t('user:published')}\n                  unCheckedLabel={t('user:published')}\n                  control\n                />\n              </Form>\n\n              <BoxButtons>\n                <Form method='DELETE' preventScrollReset style={{ width: 'fit-content' }}>\n                  <input type='hidden' name='id' value={vacancy?.id} />\n                  <Button\n                    className='icon'\n                    priority='secondary'\n                    onlyIcon\n                    onClick={() => handleClickDelete(vacancy?.id)}\n                  >\n                    <Icon name={IconEnum.cart} color={theme.user.iconColor} />\n                  </Button>\n                </Form>\n\n                <Form method='POST' preventScrollReset style={{ width: 'fit-content' }}>\n                  <input type='hidden' name='id' value={vacancy.id} />\n                  <Button\n                    type='submit'\n                    className='icon'\n                    priority='secondary'\n                    onlyIcon\n                    value='copy'\n                    name='action'\n                  >\n                    <Icon name={IconEnum.copy} color={theme.user.iconColor} />\n                  </Button>\n                </Form>\n\n                <Link key={vacancy.id} to={vacancy?.id || '#'}>\n                  <Button className='icon' priority='secondary' onlyIcon>\n                    <Icon name={IconEnum.view} color={theme.user.iconColor} />\n                  </Button>\n                </Link>\n              </BoxButtons>\n            </BoxControl>\n          </BoxCard>\n        ))}\n        <ModalConfirmDelete\n          id={deleteSelectedId}\n          visibility={visibleDelete}\n          setVisibility={setVisibleDelete}\n        />\n      </Box>\n    );\n  },\n);\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "VacanciesComponent", "memo", "vacancies", "dictionaries", "companies", "actionData", "theme", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "submit", "useSubmit", "handleChangeForm", "event", "preventDefault", "action", "target", "name", "formElement", "currentTarget", "preventScrollReset", "visibleDelete", "setVisibleDelete", "useState", "deleteSelectedId", "setSelectedId", "handleClickDelete", "id", "hasIncompleteVacancy", "useCheckIncompleteEntityInList", "motion", "div", "opacity", "BoxInformationEnum", "warning", "map", "vacancy", "VariantCardEnum", "userCard", "company_logo_uri", "getImageUrl", "DEFAULT_COMPANY_LOGO", "checkCompleteness", "TextVariantEnum", "textHeading2", "vacancy_page", "position", "textBody1medium", "user", "descriptionTextColor", "contacts", "company_name", "salary_fixed", "salary_from", "salary_to", "textHeading3", "getSalary", "currency_name", "en", "salary_payout_period_name", "language", "textBody2", "textBody2medium", "getValueLang", "location", "city_name", "employment_type_names", "employment", "work_feature_names", "feature", "company_verified", "toString", "published", "Boolean", "width", "IconEnum", "cart", "iconColor", "copy", "view", "import_jsx_dev_runtime", "BoxPagination", "styled", "div", "withConfig", "displayName", "componentId", "FilterContent", "request", "useLoaderData", "actionData", "useActionData", "theme", "t", "useApp", "widthScreen", "useScreenWidth", "submit", "useSubmit", "formRef", "useRef", "formFilterVacanciesRef", "dictionaries", "pagination", "filters", "maxPageSize", "setMaxPageSize", "useState", "max_page_size", "currentPage", "setCurrentPage", "current_page", "currentToken", "setCurrentToken", "current_token", "undefined", "handleSubmit", "current", "preventScrollReset", "initialRendering", "setInitialRendering", "filteredVacancies", "setFilteredVacancies", "useEffect", "by_company", "getFilterEntriesOfVacancies", "data", "companiesWithVacancies", "filter", "item", "number_of_vacancies", "allVacanciesFilter", "result", "extractCompanyData", "filterEntries", "companies", "vacancies", "length", "VariantCardEnum", "editCard", "FilterContent", "TextVariantEnum", "textHeading3", "defaultTextColor", "width", "maxPages", "margin", "paginationRange"]
}
