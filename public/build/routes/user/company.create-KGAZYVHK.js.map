{
  "version": 3,
  "sources": ["../../../../app/routes/user/company.create.tsx", "../../../../app/components/pages/User/Companies/Company/CompanyCreate.tsx"],
  "sourcesContent": ["import type { LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { ClientFactory } from 'shared/clientFactory';\nimport type { Company } from 'shared/v2/companies';\nimport { CompaniesApi } from 'shared/v2/companies';\n\nimport { CompanyCreate } from '~/components/pages/User/Companies/Company/CompanyCreate';\nimport { getMessageContext } from '~/storages/message.server';\nimport type { IError } from '~/types/interfaces/IError';\nimport type { IUpdateCompany } from '~/types/interfaces/iForms';\nimport { getFileUrl } from '~/utils/helpers.client';\nimport { createCompanyMessage, createCompanyTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validateDescription,\n  validatePhone,\n  validateRequireField,\n  validateThaiOrEnglish,\n  validateTypeImage,\n  validateUnknownString,\n  validateZipCode,\n} from '~/utils/validations';\n\nexport const loader = async ({ context, request }: LoaderArgs) => {\n  const url = new URL(request.url);\n  const step = Number(url.searchParams.get('step') ?? '1');\n\n  const [\n    genders,\n    specializations,\n    location,\n    employment,\n    workfeatures,\n    educationLevel,\n    yearsOfExperience,\n    employeeNumbers,\n  ] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationForCompany,\n    context.references.locationMap,\n    context.references.employmentsMap,\n    context.references.workFeaturesMap,\n    context.references.educationLevelMap,\n    context.references.yearsOfExperienceMap,\n    context.references.employeeNumbersMap,\n  ]);\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n    employment: employment.ToArray(),\n    workfeatures: workfeatures.ToArray(),\n    educationLevel: educationLevel.ToArray(),\n    yearsOfExperience: yearsOfExperience.ToArray(),\n    employeeNumbers: employeeNumbers.ToArray(),\n  };\n\n  return json({ step, dictionaries });\n};\n\nexport const action = async ({ request, context, params }: LoaderArgs) => {\n  const text = await request.text();\n  const url = new URL(request.url);\n  const forVacancyStep = url.searchParams.get('forvacancy');\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n\n  const parsedData = qs.parse(text);\n\n  try {\n    if (\n      parsedData?.logo?.toString()?.startsWith('data:image/png') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/wepb') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/svg') ||\n      parsedData?.logo?.toString()?.startsWith('data:image/ico')\n    ) {\n      return badRequest({\n        fieldErrors: {\n          image: validateTypeImage(),\n        },\n        formError: null,\n      });\n    }\n\n    const filUrl = await getFileUrl(parsedData?.logo?.toString(), context);\n\n    const bodyFormData = {\n      name: parsedData?.name?.toString(),\n      phone: parsedData?.phone?.toString(),\n      city_id: parsedData?.city?.toString(),\n      address: parsedData?.address?.toString(),\n      zip_code: parsedData?.zip_code?.toString(),\n      website: parsedData?.website?.toString(),\n      number_of_employees_id: parsedData?.employee?.toString(),\n      description: parsedData?.description?.toString(),\n      specialization_id: parsedData?.specialization_id?.toString(),\n      logo_uri: filUrl || '',\n      // published: Boolean(parsedData.published?.toString()),\n      verified: Boolean(parsedData?.verified?.toString()) || false,\n    };\n\n    const fieldErrors = {\n      name: validateRequireField(parsedData.name?.toString()),\n      phone: validatePhone(parsedData.phone?.toString()),\n      city_id: validateRequireField(parsedData.city?.toString()),\n      address: validateRequireField(parsedData.address?.toString()),\n      zip_code: validateZipCode(parsedData.zip_code?.toString()),\n      number_of_employees_id: validateRequireField(parsedData.employee?.toString()),\n      specialization_id: validateRequireField(parsedData?.specialization_id?.toString()),\n      website: validateThaiOrEnglish(parsedData?.website?.toString()),\n      description: validateDescription(parsedData?.description?.toString()),\n    };\n\n    if (Object.values(fieldErrors).some(Boolean)) {\n      return badRequest({ fieldErrors, formError: null });\n    }\n\n    const createCompany = await clientCompany.postCompanies({ company: bodyFormData as Company });\n\n    if ('error' in createCompany) {\n      return badRequest({\n        fieldErrors: validateUnknownString(createCompany.error as string),\n        formError: null,\n      });\n    }\n\n    if (\n      (createCompany as IError)?.status?.includes('Internal Server Error') ||\n      ('status' in (createCompany as IError) &&\n        (createCompany as IError)?.status?.includes('Invalid request'))\n    ) {\n      return badRequest({\n        fieldErrors: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n      });\n    }\n\n    if (forVacancyStep) {\n      return redirect('/user/vacancy/create?step=2&create=true');\n    }\n\n    return redirect('/user/company?create=true');\n  } catch (e) {\n    console.log(e);\n    badRequest({\n      fieldErrors: e,\n      formError: {\n        en: 'Some data entered incorrectly',\n        th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n      },\n    });\n  }\n\n  return badRequest({\n    fieldErrors: null,\n    formError: {\n      en: 'Some data entered incorrectly',\n      th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n    },\n  });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  const { step, dictionaries } = request;\n\n  return (\n    <CompanyCreate\n      step={step}\n      actionData={actionData as IUpdateCompany}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { memo } from 'react';\nimport type { Company } from 'shared/v2/companies';\n\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateCompany } from '~/types/interfaces/iForms';\n\nimport CompanyInformationEdit from './components/CompanyInformation/CompanyInformationEdit';\nimport { Wrapper } from './styles';\n\nexport const CompanyCreate = memo(\n  ({\n    step,\n    company,\n    dictionaries,\n    actionData,\n  }: {\n    step?: number;\n    company?: Company;\n    dictionaries?: IDictionaries;\n    actionData?: IUpdateCompany;\n  }): JSX.Element => (\n    <Form method='POST' style={{ width: '100%' }}>\n      <Wrapper>\n        <input name='step' type='hidden' value={step} />\n        {step === 1 && (\n          <CompanyInformationEdit\n            state='create'\n            company={company}\n            step={step}\n            dictionaries={dictionaries}\n            actionData={actionData}\n          />\n        )}\n      </Wrapper>\n    </Form>\n  ),\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAA+B;AAC/B;AACA,gBAAe;;;ACHf;AACA,IAAAA,gBAAqB;AAuBb;AAdD,IAAMC,oBAAgBC,oBAC3B,CAAC;EACCC;EACAC;EACAC;EACAC;AAMF,MACE,mDAAC,QAAK,QAAO,QAAO,OAAO;EAAEC,OAAO;AAAO,GACzC,6DAAC,WACC;qDAAC,WAAM,MAAK,QAAO,MAAK,UAAS,OAAOJ,QAAxC;;;;SAA6C;EAC5CA,SAAS,KACR,mDAAC,0BACC,OAAM,UACN,SACA,MACA,cACA,cALF;;;;SAKyB;KAR7B;;;;OAWA,KAZF;;;;OAaA,CAEJ;;;ADvBA,qBAA2B;AAgKvB,IAAAK,0BAAA;AAPW,SAAf,QAAgC;AAC9B,QAAMC,UAAUC,cAA6B;AAC7C,QAAMC,aAAaC,cAA6B;AAEhD,QAAM;IAAEC;IAAMC;EAAa,IAAIL;AAE/B,SACE,oDAAC,iBACC,MACA,YACA,gBAHF;;;;SAG6B;AAGjC;",
  "names": ["import_react", "CompanyCreate", "memo", "step", "company", "dictionaries", "actionData", "width", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "step", "dictionaries"]
}
