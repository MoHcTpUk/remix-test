{
  "version": 3,
  "sources": ["../../../../app/routes/user/company.tsx", "../../../../app/components/pages/User/Companies/index.tsx", "../../../../app/components/entities/ModalConfirmDeleteCompany/index.tsx", "../../../../app/components/entities/ModalConfirmDeleteCompany/styles.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { Form, useActionData, useLoaderData, useSubmit } from '@remix-run/react';\nimport { useRef, useState } from 'react';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { CompaniesApi } from 'shared/v2/companies';\nimport styled from 'styled-components';\n\nimport { Box } from '~/components/common/Box';\nimport { Pagination } from '~/components/common/Pagination';\nimport ModalCompanyCreated from '~/components/entities/ModalCompanyCreated';\nimport { CompaniesComponent } from '~/components/pages/User/Companies';\nimport { CreateEntityCard } from '~/components/pages/User/components/CreateEntityCard';\nimport { useModalForParams, useScreenWidth } from '~/hooks';\nimport { getMessageContext } from '~/storages/message.server';\nimport { getUserContextStorage } from '~/storages/userContext.server';\nimport type { ListCompaniesResponse, PublishError } from '~/types/interfaces/iForms';\nimport type { IPaginationRange } from '~/types/interfaces/IPaginationRange';\nimport { getPaginationPages, getPaginationRange } from '~/utils/helpers';\nimport {\n  copiedCompanyMessage,\n  copiedCompanyTitle,\n  deletedCompanyMessage,\n  deletedCompanyTitle,\n  errorActionMessage,\n  errorActionTitle,\n  errorPublishCommonIsNotEmailConfirmMessage,\n  errorPublishCompanyTitle,\n  errorPublishUnverifiedCompanyTitle,\n  publishCompanyMessage,\n  publishCompanyTitle,\n  unpublishCompanyMessage,\n  unpublishCompanyTitle,\n} from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\n\nexport const BoxPagination = styled.div`\n  width: 100%;\n  display: flex;\n  /* align-items: center; */\n  justify-content: center;\n  max-width: 920px;\n  margin: 16px 0;\n  flex-direction: row;\n  gap: 16px;\n\n  @media (min-width: 1024px) {\n    margin: 24px 0;\n    gap: 24px;\n  }\n  @media (min-width: 1280px) {\n    max-width: 100%;\n  }\n`;\n\nexport const loader = async ({ context, request }: LoaderArgs) => {\n  // if (!context.userContext.user.isAuthenticated) {\n  //   return redirect('/', {\n  //     status: 302,\n  //   });\n  // }\n\n  const clientCompanies = ClientFactory.createClient(CompaniesApi, context.session);\n\n  const url = new URL(request.url);\n  const max_page_size = url.searchParams.get('max_page_size');\n  const current_token = url.searchParams.get('current_token');\n  const current_page = url.searchParams.get('current_page');\n  const max_pages = url.searchParams.get('max_pages');\n\n  try {\n    const pages = getPaginationPages(current_page, max_pages);\n    const [\n      genders,\n      specializations,\n      location,\n      employment,\n      workfeatures,\n      educationLevel,\n      yearsOfExperience,\n      employeeNumbers,\n      companies,\n    ] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationForCompany,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      context.references.educationLevelMap,\n      context.references.yearsOfExperienceMap,\n      context.references.employeeNumbersMap,\n      clientCompanies.getCompanies({\n        only_my: true,\n        max_page_size: max_page_size ? +max_page_size : 10,\n        pages,\n        page_token:\n          current_page && +current_page !== 1 && current_token ? current_token : undefined,\n      }),\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n      employment: employment.ToArray(),\n      workfeatures: workfeatures.ToArray(),\n      educationLevel: educationLevel.ToArray(),\n      yearsOfExperience: yearsOfExperience.ToArray(),\n      employeeNumbers: employeeNumbers.ToArray(),\n    };\n\n    const paginationRange = getPaginationRange(pages, companies?.max_pages, companies?.page_tokens);\n    const maxPages = companies.max_pages;\n\n    const pagination = {\n      max_page_size,\n      current_token,\n      current_page,\n      paginationRange,\n      maxPages,\n    };\n    return json({ dictionaries, companies, pagination });\n  } catch (e) {\n    console.log(e);\n    const headers: HeadersInit = new Headers();\n    const messageContextStorage = await getMessageContext(request);\n\n    messageContextStorage.setSuccessMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n    return badRequest(\n      {\n        companies: {\n          data: [],\n        },\n        dictionaries: {\n          genders: [],\n          specializations: [],\n          location: [],\n          employment: [],\n          workfeatures: [],\n          educationLevel: [],\n          yearsOfExperience: [],\n          employeeNumbers: [],\n        },\n        pagination: {\n          max_page_size: null,\n          current_token: null,\n          current_page: null,\n          paginationRange: [],\n          maxPages: 0,\n        },\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context }: ActionArgs) => {\n  const formData = await request.formData();\n  const clientCompanies = ClientFactory.createClient(CompaniesApi, context.session);\n  const messageContextStorage = await getMessageContext(request);\n  const headers: HeadersInit = new Headers();\n\n  const action = formData.get('action');\n  const id = formData.get('id') as string;\n\n  try {\n    if (action === 'delete') {\n      await clientCompanies.deleteCompany({ id });\n      messageContextStorage.setSuccessMessage(\n        deletedCompanyMessage(context.userContext.language),\n        deletedCompanyTitle(context.userContext.language),\n      );\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n    if (action === 'copy') {\n      await clientCompanies.postCompanies({ source: id });\n      messageContextStorage.setSuccessMessage(\n        copiedCompanyMessage(context.userContext.language),\n        copiedCompanyTitle(context.userContext.language),\n      );\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n\n    if (action === 'published') {\n      const userContextStorage = await getUserContextStorage(request);\n      const userContext = userContextStorage.getUserContext();\n      const value = formData.get('publish');\n      const verifiedValue = formData.get('verified');\n\n      if (!userContext.user.isEmailConfirm) {\n        messageContextStorage.setErrorMessage(\n          errorPublishCommonIsNotEmailConfirmMessage(context.userContext.language),\n          errorPublishCompanyTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n        return badRequest({\n          fieldErrors: null,\n          bodyFormData: null,\n          formError: null,\n          success: false,\n          companies: null,\n          id,\n        });\n      }\n\n      if (verifiedValue === 'false') {\n        messageContextStorage.setErrorMessage(\n          undefined,\n          errorPublishUnverifiedCompanyTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: null,\n            success: false,\n            companies: null,\n            id,\n          },\n          headers,\n        );\n      }\n\n      const res = await clientCompanies.patchCompany({\n        id,\n        company: {\n          id,\n          published: value === 'true',\n          verified: value === 'true',\n        },\n      });\n\n      if ((res as PublishError)?.error) {\n        messageContextStorage.setErrorMessage(\n          errorActionMessage(context.userContext.language),\n          errorActionTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n        return badRequest({\n          fieldErrors: null,\n          bodyFormData: null,\n          formError: null,\n          success: false,\n          companies: null,\n          id,\n        });\n      }\n\n      if (value === 'true') {\n        messageContextStorage.setSuccessMessage(\n          publishCompanyMessage(context.userContext.language),\n          publishCompanyTitle(context.userContext.language),\n        );\n      } else {\n        messageContextStorage.setSuccessMessage(\n          unpublishCompanyMessage(context.userContext.language),\n          unpublishCompanyTitle(context.userContext.language),\n        );\n      }\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n  } catch (e) {\n    messageContextStorage.setSuccessMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n    badRequest(\n      {\n        fieldErrors: e,\n        bodyFormData: null,\n        formError: {\n          en: 'Some data is entered incorrectly or your email is not verified',\n          th: 'ข้อมูลบางอย่างไม่ถูกต้องหรืออีเมลของคุณไม่ได้รับการยืนยัน',\n        },\n        success: false,\n        companies: null,\n        id,\n      },\n      headers,\n    );\n  }\n  messageContextStorage.setSuccessMessage(\n    errorActionMessage(context.userContext.language),\n    errorActionTitle(context.userContext.language),\n  );\n  headers.append('Set-Cookie', await messageContextStorage.commit());\n  return badRequest(\n    {\n      fieldErrors: null,\n      bodyFormData: null,\n      formError: null,\n      success: false,\n      companies: null,\n      id,\n    },\n    headers,\n  );\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  const widthScreen = useScreenWidth();\n  const submit = useSubmit();\n  const formRef = useRef(null);\n\n  const { dictionaries, pagination } = request;\n\n  const [maxPageSize, setMaxPageSize] = useState(+(pagination?.max_page_size as string) || 10);\n  const [currentPage, setCurrentPage] = useState(+(pagination?.current_page as string) || 1);\n  const [currentToken, setCurrentToken] = useState(pagination?.current_token || undefined);\n\n  const handleSubmit = () => {\n    submit(formRef.current, { preventScrollReset: true });\n  };\n\n  const { visibilityModal, setVisibilityModal } = useModalForParams('create');\n\n  return request.companies?.data.length > 0 ? (\n    <Box flexDirection='column' width='100%'>\n      <CompaniesComponent\n        actionData={actionData as ListCompaniesResponse}\n        companies={request.companies?.data}\n        dictionaries={dictionaries}\n      />\n\n      <ModalCompanyCreated\n        visibility={visibilityModal}\n        setVisibility={setVisibilityModal}\n        company={request.companies?.data[0]?.id}\n      />\n\n      {pagination?.maxPages && pagination?.maxPages > 1 && (\n        <Form\n          method='GET'\n          style={{ width: '100%', margin: widthScreen > 1280 ? '24px 0' : '16px 0' }}\n          onChange={handleSubmit}\n          ref={formRef}\n          preventScrollReset\n        >\n          <Pagination\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage}\n            setCurrentToken={setCurrentToken}\n            paginationRange={pagination?.paginationRange as IPaginationRange[]}\n            maxPages={pagination.maxPages}\n            maxPageSize={maxPageSize}\n            setMaxPageSize={setMaxPageSize}\n            handleSubmit={handleSubmit}\n            widthScreen={widthScreen}\n          />\n          <input type='hidden' name='current_page' value={currentPage} />\n          <input type='hidden' name='current_token' value={currentToken} />\n          <input type='hidden' name='max_pages' value={pagination?.maxPages} />\n        </Form>\n      )}\n    </Box>\n  ) : (\n    <CreateEntityCard />\n  );\n}\n", "import { Form, Link, useSubmit } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport SvgAttentionNotVerified from '~/components/common/Icons/AttentionNotVerified';\nimport SvgAttentionVerified from '~/components/common/Icons/AttentionVerified';\nimport { Switcher } from '~/components/common/Switcher';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ButtonCreate from '~/components/entities/ButtonCreate';\nimport ModalConfirmDelete from '~/components/entities/ModalConfirmDelete';\nimport ModalConfirmDeleteCompany from '~/components/entities/ModalConfirmDeleteCompany';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { ListCompaniesResponse } from '~/types/interfaces/iForms';\nimport { DEFAULT_COMPANY_LOGO } from '~/utils/constants';\nimport { getImageUrl, getValueLang } from '~/utils/helpers';\n\nimport { BoxCard } from '../../../common/Card';\nimport { BoxButtons, BoxControl, BoxHeading, DataBox, Field, HeadingInformation } from './styles';\n\nexport const CompaniesComponent = memo(\n  ({\n    dictionaries,\n    companies,\n    actionData,\n  }: {\n    companies?: Company[] | null;\n    dictionaries?: IDictionaries;\n    actionData?: ListCompaniesResponse;\n  }): JSX.Element => {\n    const { theme, t, userContext } = useApp();\n    const widthScreen = useScreenWidth();\n\n    const submit = useSubmit();\n\n    const handleChangeForm = (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      const action = (event.target as HTMLInputElement).name;\n\n      const formElement = event.currentTarget as HTMLFormElement;\n\n      if (action === 'published') {\n        submit(formElement, { preventScrollReset: true });\n      }\n    };\n\n    const [visibleDelete, setVisibleDelete] = useState(false);\n    const [visibleDeleteSecondStep, setVisibleDeleteSecondStep] = useState(false);\n\n    const [deleteSelectedId, setSelectedId] = useState('');\n    const [isVerifiedCompany, setIsVerifiedCompany] = useState(false);\n\n    const handleClickDelete = (id?: string, verified?: boolean) => {\n      setSelectedId(id || '');\n      setVisibleDelete(true);\n      if (verified) {\n        setIsVerifiedCompany(verified);\n      }\n    };\n\n    const hasNotVerifiedCompanies = companies?.some((company) => company?.verified === false);\n\n    return (\n      <Box\n        flexDirection='column'\n        width='100%'\n        gap={widthScreen > 1024 ? '24px' : '16px'}\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        {hasNotVerifiedCompanies && (\n          <BoxInformation\n            variant={BoxInformationEnum.warning}\n            title={t('user:you_have_unverified_companies')}\n            flexDirection='column'\n          />\n        )}\n\n        {companies?.map((company) => (\n          <BoxCard key={company?.id} variant={VariantCardEnum.userCard}>\n            <Link to={company?.id || '#'}>\n              <BoxHeading>\n                <img\n                  src={company?.logo_uri ? getImageUrl(company?.logo_uri) : DEFAULT_COMPANY_LOGO}\n                  alt='company logo'\n                />\n\n                {company?.verified ? <SvgAttentionVerified /> : <SvgAttentionNotVerified />}\n\n                <HeadingInformation>\n                  <Text className='title' variant={TextVariantEnum.textHeading2}>\n                    {company.name}\n                  </Text>\n                  <Text\n                    variant={TextVariantEnum.textBody1medium}\n                    color={theme.user.descriptionTextColor}\n                  >\n                    {getValueLang(company?.specialization_name, userContext.language)}\n                  </Text>\n                </HeadingInformation>\n              </BoxHeading>\n            </Link>\n\n            <DataBox>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:vacancies')}\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium}>{company.number_of_vacancies}</Text>\n              </Field>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:opened_vacancies')}\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium}>{company.number_of_vacancies}</Text>\n              </Field>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:users')}\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(company?.number_of_employees_name, userContext.language)}\n                </Text>\n              </Field>\n            </DataBox>\n\n            <BoxControl>\n              <Form method='PATCH' onChange={handleChangeForm} preventScrollReset>\n                <input type='hidden' name='id' value={company?.id} />\n                <input type='hidden' name='action' value='published' />\n                <input type='hidden' name='publish' value={company?.published ? 'false' : 'true'} />\n                <input type='hidden' name='verified' value={company?.verified.toString()} />\n\n                <Switcher\n                  checked={Boolean(company?.published)}\n                  htmlLabel={company?.id}\n                  name='published'\n                  variant='default'\n                  checkedLabel={t('user:published')}\n                  unCheckedLabel={t('user:published')}\n                  control\n                />\n              </Form>\n\n              <BoxButtons>\n                <Button\n                  className='icon'\n                  priority='secondary'\n                  onlyIcon\n                  onClick={() => handleClickDelete(company?.id, company?.verified)}\n                >\n                  <Icon name={IconEnum.cart} color={theme.user.iconColor} />\n                </Button>\n\n                <Form method='POST' preventScrollReset>\n                  <input type='hidden' name='id' value={company.id} />\n                  <Button\n                    type='submit'\n                    className='icon'\n                    priority='secondary'\n                    onlyIcon\n                    value='copy'\n                    name='action'\n                  >\n                    <Icon name={IconEnum.copy} color={theme.user.iconColor} />\n                  </Button>\n                </Form>\n\n                <Link to={company?.id || '#'}>\n                  <Button className='icon' priority='secondary' onlyIcon>\n                    <Icon name={IconEnum.view} color={theme.user.iconColor} />\n                  </Button>\n                </Link>\n\n                {company && company?.number_of_vacancies === 0 ? (\n                  <ButtonCreate\n                    variant='vacancy'\n                    priority='primary'\n                    //  setVariantCreate={setVariantCreate}\n                    //  setSelectionCreate={setSelectionCreate}\n                  />\n                ) : (\n                  <Link to={company?.id || '#'}>\n                    <Button priority='primary'>\n                      <Text style={{ whiteSpace: 'nowrap' }} variant={TextVariantEnum.textBody2}>\n                        {t('user:show_vacancies')}\n                      </Text>\n                    </Button>\n                  </Link>\n                )}\n              </BoxButtons>\n            </BoxControl>\n            {actionData?.id === company.id && actionData?.formError?.[userContext.language] && (\n              <Text variant={TextVariantEnum.textBody2} color={theme.errorTextColor}>\n                {actionData?.formError?.[userContext.language]}\n              </Text>\n            )}\n          </BoxCard>\n        ))}\n        <ModalConfirmDelete\n          id={deleteSelectedId}\n          visibility={visibleDeleteSecondStep}\n          setVisibility={setVisibleDeleteSecondStep}\n        />\n        <ModalConfirmDeleteCompany\n          id={deleteSelectedId}\n          visibility={visibleDelete}\n          setVisibility={setVisibleDelete}\n          isVerifiedCompany={isVerifiedCompany}\n          setIsVerifiedCompany={setIsVerifiedCompany}\n          visibleDeleteSecondStep={visibleDeleteSecondStep}\n          setVisibleDeleteSecondStep={setVisibleDeleteSecondStep}\n        />\n      </Box>\n    );\n  },\n);\n", "import { Form } from '@remix-run/react';\n\nimport BoxInformation from '~/components/common/BoxInformation';\nimport { List, ListItem } from '~/components/common/BoxInformation/styles';\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport { Modal } from '~/components/common/Modal';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { VariantModalEnum } from '~/types/enums/variantModalEnum';\n\nimport {\n  BoxContainer,\n  ButtonsControl,\n  ContentWrapper,\n  IconWrapper,\n  TextWrapper,\n  TitleWrapper,\n} from './styles';\n\nexport default function ModalConfirmDeleteCompany({\n  visibility,\n  setVisibility,\n  id,\n  isVerifiedCompany,\n  setIsVerifiedCompany,\n  visibleDeleteSecondStep,\n  setVisibleDeleteSecondStep,\n}: {\n  visibility: boolean;\n  setVisibility: (visibility: boolean) => void;\n  id?: string;\n  isVerifiedCompany: boolean;\n  setIsVerifiedCompany: (isVerifiedCompany: boolean) => void;\n  visibleDeleteSecondStep: boolean;\n  setVisibleDeleteSecondStep: (visibleDeleteSecondStep: boolean) => void;\n}) {\n  const { t } = useApp();\n\n  return (\n    <Modal\n      visibility={visibility}\n      setVisibility={setVisibility}\n      variant={VariantModalEnum.confirmDeleteCompany}\n    >\n      <BoxContainer>\n        <ContentWrapper>\n          <IconWrapper>\n            <Icon name={IconEnum.warning} />\n          </IconWrapper>\n\n          <TextWrapper>\n            <TitleWrapper>\n              <Text variant={TextVariantEnum.textHeading2}>{t('user:delete_company')}</Text>\n            </TitleWrapper>\n\n            <Text variant={TextVariantEnum.textBody2medium}>\n              {!isVerifiedCompany\n                ? t('user:are_you_sure_you_want_to_delete_this_company')\n                : t('user:are_you_sure_you_want_to_delete_this_verified_company')}\n            </Text>\n          </TextWrapper>\n\n          <BoxInformation\n            variant={BoxInformationEnum.warning}\n            title={t('user:read_this_before_you_take_action')}\n            information={\n              !isVerifiedCompany ? (\n                t(\n                  'user:when_you_delete_a_company_all_vacancies_associated_with_it_will_also_be_deleted_and_cannot_be_restored',\n                )\n              ) : (\n                <List>\n                  <ListItem>\n                    {t(\n                      'user:when_you_delete_a_company_all_vacancies_associated_with_it_will_also_be_deleted_and_cannot_be_restored',\n                    )}\n                  </ListItem>\n                  <br />\n                  <ListItem>\n                    {t(\n                      'user:this_company_is_verified_and_if_you_delete_it_you_will_have_to_go_through_verification_again',\n                    )}\n                  </ListItem>\n                </List>\n              )\n            }\n            noShadow\n          />\n        </ContentWrapper>\n\n        <ButtonsControl>\n          <Form method='DELETE' preventScrollReset>\n            <input type='hidden' name='id' value={id} />\n            <Button\n              priority='secondary'\n              value='delete'\n              name='action'\n              className='growingButton'\n              type='submit'\n              onClick={(event) => {\n                setVisibility(false);\n                if (isVerifiedCompany === true) {\n                  event?.preventDefault();\n                  setVisibleDeleteSecondStep(true);\n                }\n                setIsVerifiedCompany(false);\n              }}\n            >\n              <Text variant={TextVariantEnum.textBody2}>\n                {t('user:i_understand_lets_delete_company')}\n              </Text>\n            </Button>\n          </Form>\n\n          <Button\n            priority='primary'\n            onClick={() => {\n              setVisibility(false);\n              setIsVerifiedCompany(false);\n            }}\n            className='growingButton'\n          >\n            <Text variant={TextVariantEnum.textBody2}>{t('common:cancel')}</Text>\n          </Button>\n        </ButtonsControl>\n      </BoxContainer>\n    </Modal>\n  );\n}\n", "import styled from 'styled-components';\n\nimport { FONT_SIZES_DESC, FONT_WEIGHTS_DESC, LINE_HEIGHTS_DESC } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\n\nexport const BoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: start;\n  justify-content: center;\n  gap: 24px;\n  max-width: 100%;\n`;\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n  max-width: 100%;\n\n  @media (min-width: 768px) {\n    gap: 24px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  @media (min-width: 768px) {\n    svg {\n      height: 56px;\n      width: 56px;\n    }\n  }\n`;\n\nexport const TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  gap: 8px;\n`;\n\nexport const TitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    align-items: flex-start;\n\n    & span {\n      font-size: ${FONT_SIZES_DESC[TextVariantEnum.textHeading3]};\n      font-weight: ${FONT_WEIGHTS_DESC[TextVariantEnum.textHeading3]};\n      line-height: ${LINE_HEIGHTS_DESC[TextVariantEnum.textHeading3]};\n    }\n  }\n`;\n\nexport const ButtonsControl = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-end;\n  width: 100%;\n  gap: 16px;\n\n  & form {\n    width: 100%;\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n\n    & form {\n      width: fit-content;\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "BoxContainer", "styled", "div", "withConfig", "displayName", "componentId", "ContentWrapper", "IconWrapper", "TextWrapper", "TitleWrapper", "FONT_SIZES_DESC", "TextVariantEnum", "textHeading3", "FONT_WEIGHTS_DESC", "LINE_HEIGHTS_DESC", "ButtonsControl", "visibility", "setVisibility", "id", "isVerifiedCompany", "setIsVerifiedCompany", "visibleDeleteSecondStep", "setVisibleDeleteSecondStep", "t", "useApp", "VariantModalEnum", "confirmDeleteCompany", "IconEnum", "warning", "TextVariantEnum", "textHeading2", "textBody2medium", "BoxInformationEnum", "event", "preventDefault", "textBody2", "import_jsx_dev_runtime", "CompaniesComponent", "memo", "dictionaries", "companies", "actionData", "theme", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "submit", "useSubmit", "handleChangeForm", "event", "preventDefault", "action", "target", "name", "formElement", "currentTarget", "preventScrollReset", "visibleDelete", "setVisibleDelete", "useState", "visibleDeleteSecondStep", "setVisibleDeleteSecondStep", "deleteSelectedId", "setSelectedId", "isVerifiedCompany", "setIsVerifiedCompany", "handleClickDelete", "id", "verified", "hasNotVerifiedCompanies", "some", "company", "motion", "div", "opacity", "BoxInformationEnum", "warning", "map", "VariantCardEnum", "userCard", "logo_uri", "getImageUrl", "DEFAULT_COMPANY_LOGO", "TextVariantEnum", "textHeading2", "textBody1medium", "user", "descriptionTextColor", "getValueLang", "specialization_name", "language", "textBody2", "textBody2medium", "number_of_vacancies", "number_of_employees_name", "published", "toString", "Boolean", "IconEnum", "cart", "iconColor", "copy", "view", "whiteSpace", "formError", "errorTextColor", "import_jsx_dev_runtime", "BoxPagination", "styled", "div", "withConfig", "displayName", "componentId", "request", "useLoaderData", "actionData", "useActionData", "widthScreen", "useScreenWidth", "submit", "useSubmit", "formRef", "useRef", "dictionaries", "pagination", "maxPageSize", "setMaxPageSize", "useState", "max_page_size", "currentPage", "setCurrentPage", "current_page", "currentToken", "setCurrentToken", "current_token", "undefined", "handleSubmit", "current", "preventScrollReset", "visibilityModal", "setVisibilityModal", "useModalForParams", "companies", "data", "length", "id", "maxPages", "width", "margin", "paginationRange"]
}
