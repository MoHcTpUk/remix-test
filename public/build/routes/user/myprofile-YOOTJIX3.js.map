{
  "version": 3,
  "sources": ["../../../../app/routes/user/myprofile.tsx", "../../../../app/components/pages/User/MyProfile/index.tsx", "../../../../app/components/entities/ModalConfirmEmail/styles.tsx", "../../../../app/components/entities/ModalConfirmEmail/index.tsx", "../../../../app/components/pages/User/MyProfile/components/Info/index.tsx", "../../../../app/components/pages/User/MyProfile/components/NotifySettings/index.tsx", "../../../../app/components/pages/User/MyProfile/components/PasswordSettings/index.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { UserService } from 'shared/client/UserService';\nimport { ClientFactory } from 'shared/clientFactory';\nimport routes from 'shared/routing/routes';\nimport type { UserInfo } from 'shared/v2/users';\nimport { UsersApi, UserServiceApi } from 'shared/v2/users';\n\nimport { UserInfoComponent } from '~/components/pages/User/MyProfile';\nimport { getMessageContext } from '~/storages/message.server';\nimport { getSessionStorage } from '~/storages/session.server';\nimport { getUserContextStorage } from '~/storages/userContext.server';\nimport type { IUpdateProfile } from '~/types/interfaces/iForms';\nimport {\n  getFileUrl,\n  getUserContext,\n  getUserInfoFromService,\n  setHeadersForResponse,\n  setUserInfoContext,\n} from '~/utils/helpers.client';\nimport { changedPasswordMessage, changedPasswordTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validatePassword,\n  validatePasswordConfirm,\n  validateRealDate,\n  validateRequireField,\n  validateTypeImage,\n} from '~/utils/validations';\n\nexport const loader = async ({ context, request }: LoaderArgs) => {\n  if (!context.userContext?.user?.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  try {\n    const [genders, languages, languagesOfNotify, userInfo] = await Promise.all([\n      context.references.gendersMap,\n      context.references.languagesMap,\n      context.references.languagesOfNotify,\n      await getUserInfoFromService(context.session),\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      languages: languages.ToArray(),\n      languagesOfNotify: languagesOfNotify.ToArray(),\n    };\n\n    return json({ userInfo, dictionaries });\n  } catch (e) {\n    const sessionStorage = await getSessionStorage(request);\n    const userContextStorage = await getUserContextStorage(request);\n\n    const headers: HeadersInit = new Headers();\n\n    headers.append('Set-Cookie', await userContextStorage.logout());\n    headers.append('Set-Cookie', await sessionStorage.logout());\n\n    return redirect(routes.auth.login.root, {\n      status: 302,\n      headers,\n    });\n  }\n};\n\nexport const action = async ({ request, context }: ActionArgs) => {\n  const text = await request.text();\n  const parsedData = qs.parse(text);\n\n  const { ...data } = qs.parse(text);\n  const formName = data?.formName;\n\n  const messageContextStorage = await getMessageContext(request);\n  const headers: HeadersInit = new Headers();\n\n  const clientProfileV2 = ClientFactory.createClient(UserServiceApi, context.session);\n  const client = new UserService();\n  client.auth(context.session);\n\n  try {\n    if (formName === 'general') {\n      if (\n        parsedData?.logo?.toString()?.startsWith('data:image/png') ||\n        parsedData?.logo?.toString()?.startsWith('data:image/wepb') ||\n        parsedData?.logo?.toString()?.startsWith('data:image/svg') ||\n        parsedData?.logo?.toString()?.startsWith('data:image/ico')\n      ) {\n        return badRequest({\n          fieldErrors: {\n            image: validateTypeImage(),\n          },\n          formError: null,\n          emailConfirmed: false,\n          success: false,\n        });\n      }\n\n      const filUrl = await getFileUrl(parsedData?.photo?.toString(), context);\n\n      const bodyFormData = {\n        // birthday: parsedData.birthday !== 'null' ? parsedData.birthday?.toString() : undefined,\n        birthday_experimental:\n          parsedData.birthday?.toString() && parsedData.birthday?.toString() !== 'null'\n            ? {\n                [context.userContext.language]: parsedData.birthday?.toString(),\n              }\n            : null,\n        first_name: parsedData.firstName?.toString() || '',\n        last_name: parsedData.lastName?.toString() || '',\n        photo: filUrl || '',\n        gender: parsedData.gender?.toString() || null,\n        phone: parsedData.phone?.toString() || '',\n        primary_language: parsedData.primary_language?.toString() || null,\n      };\n\n      const fieldErrors = {\n        first_name: validateRequireField(parsedData.firstName?.toString()),\n        last_name: validateRequireField(parsedData.lastName?.toString()),\n        password: null,\n        passwordConfirm: null,\n        birthday: validateRealDate(parsedData.birthday?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false, emailConfirmed: false });\n      }\n\n      await clientProfileV2.patchUsersMe({ update_user_info: bodyFormData });\n\n      const { userContextStorage, userContext } = await getUserContext(request);\n      const userInfo = await getUserInfoFromService(context.session);\n      await setUserInfoContext(userInfo, userContext, userContextStorage);\n      const headers = await setHeadersForResponse(undefined, userContextStorage);\n\n      return json(\n        { success: true, fieldErrors: null, formError: null, emailConfirmed: false },\n        { headers },\n      );\n    }\n\n    if (formName === 'confirm_email') {\n      const clientProfileV2 = ClientFactory.createClient(UsersApi, context.session);\n\n      await clientProfileV2.postResendConfirmation({\n        id: context.userContext.user.id || '',\n        post_resend_confirmation_request: {\n          locale: context.userContext.language,\n        },\n      });\n\n      return json({ success: true, emailConfirmed: true, fieldErrors: null, formError: null });\n    }\n    if (formName === 'password') {\n      const pass = parsedData.password?.toString() || null;\n      const passwordConfirm = parsedData.password_confirmation?.toString() || null;\n\n      const fieldErrors = {\n        password: validatePassword(pass),\n        passwordConfirm: validatePasswordConfirm(pass, passwordConfirm),\n        first_name: null,\n        last_name: null,\n        birthday: null,\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false, emailConfirmed: false });\n      }\n\n      if (pass) {\n        const resetPassword = await client.resetPasswordCreate({ newPassword: pass });\n\n        messageContextStorage.setSuccessMessage(\n          changedPasswordMessage(context.userContext.language),\n          changedPasswordTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n\n        if (resetPassword.status === 204)\n          return json(\n            { success: true, fieldErrors: null, formError: null, emailConfirmed: false },\n            { headers },\n          );\n\n        return json({\n          success: false,\n          emailConfirmed: false,\n          fieldErrors: null,\n          formError: {\n            en: 'Something went wrong',\n            th: 'มีบางอย่างผิดพลาด',\n          },\n        });\n      }\n\n      return badRequest({ fieldErrors, formError: null, success: false, emailConfirmed: false });\n    }\n    const bodyFormData = {\n      birthday: parsedData.birthday?.toString(),\n      notifications: {\n        email: parsedData.notify_email?.toString() === 'true',\n        phone: parsedData.notify_phone?.toString() === 'true',\n      },\n    };\n\n    await clientProfileV2.patchUsersMe({ update_user_info: bodyFormData });\n  } catch (e) {\n    console.log(e);\n    return json({\n      success: false,\n      emailConfirmed: false,\n      fieldErrors: null,\n      formError: {\n        en: 'Something went wrong',\n        th: 'มีบางอย่างผิดพลาด',\n      },\n    });\n  }\n\n  return json(\n    { success: true, fieldErrors: null, formError: null, emailConfirmed: false },\n    { headers },\n  );\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  const user: UserInfo | null = request.userInfo;\n  const { dictionaries } = request;\n\n  return (\n    <UserInfoComponent\n      user={user}\n      dictionaries={dictionaries}\n      actionData={actionData as IUpdateProfile}\n    />\n  );\n}\n", "import { Form, useSubmit } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useEffect, useRef, useState } from 'react';\nimport type { UserInfo } from 'shared/v2/users';\n\nimport BoxInformation from '~/components/common/BoxInformation';\nimport Button from '~/components/common/Button';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ModalConfirmEmail from '~/components/entities/ModalConfirmEmail';\nimport { useApp } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateProfile } from '~/types/interfaces/iForms';\n\nimport { Wrapper } from '../Companies/styles';\nimport { GeneralInfo } from './components/Info';\nimport { NotifySettings } from './components/NotifySettings';\nimport { PasswordSettings } from './components/PasswordSettings';\n\nexport const UserInfoComponent = memo(\n  ({\n    user,\n    dictionaries,\n    actionData,\n  }: {\n    user?: UserInfo | null;\n    dictionaries: IDictionaries;\n    actionData?: IUpdateProfile;\n  }): JSX.Element => {\n    const [stateUserInfo, setStateUserInfo] = useState<StateCard>('info');\n    const [stateUserPassword, setStateUserPassword] = useState<StateCard>('info');\n\n    const { userContext, t } = useApp();\n\n    useEffect(() => {\n      if (actionData?.success) {\n        if (stateUserInfo !== 'info') setStateUserInfo('info');\n        if (stateUserPassword !== 'info') setStateUserPassword('info');\n      }\n      if (actionData?.emailConfirmed) {\n        setVisibleConfirmEmail(true);\n      }\n    }, [user]);\n\n    const formRef = useRef(null);\n    const submit = useSubmit();\n\n    const handleChangeForm = (event: React.ChangeEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      const formData = new FormData();\n      const field = event.target.name;\n\n      if (field === 'notify_email') {\n        formData.append('notify_phone', user?.notifications?.phone?.toString() || '');\n        formData.append('notify_email', (!user?.notifications?.email)?.toString() || '');\n        formData.append('birthday', user?.birthday?.toString() || '');\n\n        submit(formData, { method: 'POST', preventScrollReset: true });\n      } else if (field === 'notify_phone') {\n        formData.append('notify_phone', (!user?.notifications?.phone)?.toString() || '');\n        formData.append('notify_email', user?.notifications?.email?.toString() || '');\n        formData.append('birthday', user?.birthday?.toString() || '');\n\n        submit(formData, { method: 'POST', preventScrollReset: true });\n      }\n    };\n\n    const [visibleConfirmEmail, setVisibleConfirmEmail] = useState(false);\n\n    const buttonConfirmEmail = () => (\n      <Button type='submit' priority='secondary'>\n        <Text variant={TextVariantEnum.textBody2}>{t('user:confirm_email')}</Text>\n        <input type='hidden' name='formName' value='confirm_email' />\n      </Button>\n    );\n\n    return (\n      <Wrapper>\n        {!userContext.user.isEmailConfirm && (\n          <Form method='POST' style={{ width: '100%' }} preventScrollReset>\n            <BoxInformation\n              variant={BoxInformationEnum.warning}\n              title={t('user:email_is_not_confirmed')}\n              information={t(\n                'user:you_will_not_be_able_to_post_your_resumes_vacancies_and_companies_until_your_email_confirmation',\n              )}\n              button={() => buttonConfirmEmail()}\n              flexDirection='column'\n            />\n          </Form>\n        )}\n\n        <Form\n          method='POST'\n          style={{ width: '100%' }}\n          ref={formRef}\n          preventScrollReset\n          onChange={handleChangeForm}\n        >\n          <Wrapper\n            as={motion.div}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <ModalConfirmEmail\n              visibility={visibleConfirmEmail}\n              setVisibility={setVisibleConfirmEmail}\n            />\n\n            <GeneralInfo\n              user={user}\n              stateUserInfo={stateUserInfo}\n              setStateUserInfo={setStateUserInfo}\n              dictionaries={dictionaries}\n              actionData={actionData}\n            />\n\n            <PasswordSettings\n              stateUserPassword={stateUserPassword}\n              setStateUserPassword={setStateUserPassword}\n              actionData={actionData}\n            />\n\n            <NotifySettings user={user} />\n          </Wrapper>\n        </Form>\n      </Wrapper>\n    );\n  },\n);\n", "import { styled } from 'styled-components';\n\nexport const BoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  gap: 24px;\n  width: 460px;\n  max-width: 100%;\n  height: 160px;\n\n  @media (min-width: 1024px) {\n    gap: 32px;\n  }\n`;\n\nexport const BoxInput = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 8px;\n  border: 1px solid ${({ theme }) => theme.user.borderCustomFieldData};\n  padding: 12px;\n\n  .link {\n    overflow: hidden;\n    white-space: nowrap;\n  }\n`;\n\nexport const BoxIcons = styled.div`\n  overflow: auto;\n`;\n\nexport const IconsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  overflow: visible;\n  min-width: max-content;\n  gap: 8px;\n`;\n", "import { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { Modal } from '~/components/common/Modal';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\nimport { VariantModalEnum } from '~/types/enums/variantModalEnum';\n\nimport { BoxContainer } from './styles';\n\nexport default function ModalConfirmEmail({\n  visibility,\n  setVisibility,\n}: {\n  visibility: boolean;\n  setVisibility: (visibility: boolean) => void;\n}) {\n  const { t, userContext, theme } = useApp();\n\n  return (\n    <Modal\n      visibility={visibility}\n      setVisibility={setVisibility}\n      variant={VariantModalEnum.confirmEmail}\n    >\n      <BoxContainer>\n        <Box style={{ position: 'absolute', top: '24px', left: '24px' }}>\n          <Text variant={TextVariantEnum.textHeading3}>{t('user:email_confirmation')}</Text>\n        </Box>\n\n        <Box\n          width='90%'\n          flexDirection='column'\n          gap='24px'\n          style={{ position: 'absolute', left: '24px', marginTop: '54px' }}\n        >\n          <Text variant={TextVariantEnum.textBody2}>\n            {`${t('user:open_the_email_sent_to')} `}{' '}\n            <span style={{ color: theme.accentTextColor }}>{userContext.user.email}</span>{' '}\n            {`${t('user:and_click_the_link_in_the_email_to_complete_the_verification_process')}`}\n          </Text>\n\n          <Box width='100%' justifyContent='flex-end'>\n            <Button priority='secondary' onClick={() => setVisibility(!visibility)}>\n              <Text variant={TextVariantEnum.textBody2}>{t('common:close')}</Text>\n            </Button>\n          </Box>\n        </Box>\n      </BoxContainer>\n    </Modal>\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { memo, useEffect, useState } from 'react';\nimport type { MultiDateValue, UserInfo } from 'shared/v2/users';\n\nimport { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport { Input } from '~/components/common/Input';\nimport { Select } from '~/components/common/Select';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { DatePicker } from '~/components/entities/DatePicker';\nimport { UploadingImageModal } from '~/components/entities/UploadingImageModal';\nimport { BoxFields } from '~/components/ui/Card';\nimport { BoxAvatar } from '~/components/ui/Card/BoxAvatar';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateProfile } from '~/types/interfaces/iForms';\nimport { DEFAULT_USER_AVATAR } from '~/utils/constants';\nimport {\n  extractTitles,\n  extractTitlesNewWay,\n  getImageUrl,\n  getValueFromDictionaries,\n  getValueFromDictionariesNewWay,\n  getValueLang,\n} from '~/utils/helpers.client';\n\nimport { BoxPicture, BoxUserData, BoxUserEditData, Image } from './styles';\n\nexport const GeneralInfo = memo(\n  ({\n    stateUserInfo,\n    setStateUserInfo,\n    user,\n    dictionaries,\n    actionData,\n  }: {\n    stateUserInfo: StateCard;\n    setStateUserInfo?: Dispatch<SetStateAction<StateCard>>;\n    user?: UserInfo | null;\n    dictionaries: IDictionaries;\n    actionData?: IUpdateProfile;\n  }): JSX.Element => {\n    const { t, userContext, theme } = useApp();\n    const [showUploader, setShowUploader] = useState(false);\n    const [photo, setPhoto] = useState(\n      user?.photo ? getImageUrl(user?.photo) : DEFAULT_USER_AVATAR,\n    );\n    const [errorTextForImage, setErrorTextForImage] = useState(false);\n\n    useEffect(() => {\n      if (\n        !photo?.startsWith('data:image/jpg') &&\n        !photo?.startsWith('data:image/jpeg') &&\n        !photo?.startsWith('https://api.test.upjob.com/m') &&\n        !photo?.startsWith('/images/user') &&\n        photo\n      ) {\n        setErrorTextForImage(true);\n      } else {\n        setErrorTextForImage(false);\n      }\n    }, [photo]);\n\n    return (\n      <BoxCard\n        title={t('user:personal_information')}\n        state={stateUserInfo}\n        setState={setStateUserInfo}\n        withEditButton\n        withControl\n      >\n        {stateUserInfo === 'info' && (\n          <BoxUserData\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n          >\n            <DataField label={t('user:first_name')} data={user?.first_name || ''} />\n            <DataField label={t('user:last_name')} data={user?.last_name || ''} />\n            <DataField\n              label={t('user:gender')}\n              data={\n                getValueFromDictionaries(\n                  dictionaries.genders,\n                  user?.gender,\n                  userContext.language,\n                ) ||\n                getValueFromDictionaries(dictionaries.genders, user?.gender, userContext.language)\n              }\n            />\n            <DataField\n              label={t('user:date_of_birth')}\n              data={\n                user?.birthday\n                  ? getValueLang(user?.birthday, userContext.language)\n                  : getValueLang(\n                      userContext?.user.birthday as MultiDateValue,\n                      userContext.language,\n                    ) || ''\n              }\n            />\n            <DataField label={t('user:email')} data={user?.email} />\n            <DataField label={t('user:phone')} data={user?.phone} />\n            <DataField\n              label={t('user:language_of_notify')}\n              data={getValueFromDictionariesNewWay(\n                dictionaries.languagesOfNotify,\n                user?.primary_language,\n                userContext.language,\n              )}\n            />\n          </BoxUserData>\n        )}\n        {stateUserInfo === 'edit' && (\n          <Box\n            width='100%'\n            as={motion.div}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n          >\n            <input type='hidden' name='formName' value='general' />\n            <BoxUserEditData>\n              <BoxPicture>\n                <Text variant={TextVariantEnum.textBody1medium}>{t('user:profile_picture')}</Text>\n                <BoxAvatar variant='user'>\n                  <input type='hidden' name='photo' value={photo} />\n                  <Image src={photo || DEFAULT_USER_AVATAR} alt='avatar' />\n                  <Button priority='secondary' onClick={() => setShowUploader(!showUploader)}>\n                    <Text variant={TextVariantEnum.textBody2}> {t('user:edit_photo')}</Text>\n                  </Button>\n                </BoxAvatar>\n                {errorTextForImage && (\n                  <Text variant={TextVariantEnum.textSmall} color={theme.errorTextColor}>\n                    {t('user:image_type_must_be_jpeg')}\n                  </Text>\n                )}\n                <UploadingImageModal\n                  visibility={showUploader}\n                  setVisibility={setShowUploader}\n                  defaultImage={photo}\n                  setDefaultImage={setPhoto}\n                />\n              </BoxPicture>\n              <BoxFields>\n                <Input\n                  placeholder={t('user:first_name')}\n                  id='i_firstName'\n                  name='firstName'\n                  value={user?.first_name || ''}\n                  errorText={actionData?.fieldErrors?.first_name?.[userContext.language]}\n                />\n                <Input\n                  placeholder={t('user:last_name')}\n                  id='i_lastName'\n                  name='lastName'\n                  value={user?.last_name || ''}\n                  errorText={actionData?.fieldErrors?.last_name?.[userContext.language]}\n                />\n                <Input\n                  placeholder={t('user:email')}\n                  id='email'\n                  name='email'\n                  value={user?.email || ''}\n                  disabled\n                />\n                <Select\n                  entries={extractTitles(dictionaries?.genders, userContext.language)}\n                  placeholder={t('user:gender')}\n                  id='gender'\n                  name='gender'\n                  values={[user?.gender || '']}\n                />\n                <DatePicker\n                  name='birthday'\n                  defaultDate={getValueLang(user?.birthday as MultiDateValue, userContext.language)}\n                  placeholderDay={t('user:day_of_birth')}\n                  placeholderMonth={t('user:month_of_birth')}\n                  placeholderYear={t('user:year_of_birth')}\n                  errorText={actionData?.fieldErrors?.birthday?.[userContext.language]}\n                />\n                <Input\n                  placeholder={t('user:phone')}\n                  id='i_phone'\n                  name='phone'\n                  value={user?.phone}\n                  variant='phone'\n                />\n                <Select\n                  entries={extractTitlesNewWay(\n                    dictionaries?.languagesOfNotify,\n                    userContext.language,\n                  )}\n                  placeholder={t('user:language_of_notify')}\n                  id='primaryLanguage'\n                  name='primary_language'\n                  values={[user?.primary_language || '']}\n                />\n              </BoxFields>\n            </BoxUserEditData>\n          </Box>\n        )}\n      </BoxCard>\n    );\n  },\n);\n", "import type { MutableRefObject } from 'react';\nimport { memo } from 'react';\nimport type { UserInfo } from 'shared/v2/users';\n\nimport { CheckBox } from '~/components/common/Checkbox';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\n\nimport { BoxCard } from '../../../../../common/Card';\n\nexport const NotifySettings = memo(\n  ({\n    user,\n    formRef,\n  }: {\n    user?: UserInfo | null;\n    formRef?: MutableRefObject<null>;\n  }): JSX.Element => {\n    const { theme, t } = useApp();\n\n    return (\n      <BoxCard title={t('user:notifications')}>\n        <CardContainer>\n          <CheckBox\n            name='notify_phone'\n            label={t('user:phone_notifications')}\n            checked={user?.notifications?.phone ?? false}\n            value={user?.notifications?.phone?.toString()}\n            id='phone_notifications'\n            // onChange={handleChangeNotify}\n          />\n          <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n            {t(\n              'user:by_submitting_the_form_and_checking_this_box_i_hereby_agree_to_receive_calls_sms_and_or_Line_messages_from_UPJOB_company_and_employers_who_use_UPJOB_including_through_automated_dialing_systems_and_recorded_calls_to_the_above_phone_number',\n            )}\n          </Text>\n        </CardContainer>\n\n        <CardContainer>\n          <CheckBox\n            name='notify_email'\n            label={t('user:email_notifications')}\n            checked={user?.notifications?.email}\n            value={user?.notifications?.email?.toString()}\n            id='email_notifications'\n            // onChange={handleChangeNotify}\n          />\n          <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n            {t(\n              'user:by_submitting_the_form_and_checking_this_box_i_hereby_agree_to_receive_email_from_UPJOB_company_and_employers_who_use_UPJOB_including_automated_notifications_by_email',\n            )}\n          </Text>\n        </CardContainer>\n      </BoxCard>\n    );\n  },\n);\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport { memo } from 'react';\n\nimport { Box } from '~/components/common/Box';\nimport { Button } from '~/components/common/Button/styles';\nimport { Input } from '~/components/common/Input';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxFields, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { StateCard } from '~/types/enums/stateCardEnum';\nimport type { IUpdateProfile } from '~/types/interfaces/iForms';\n\nimport { BoxCard } from '../../../../../common/Card';\n\nexport const PasswordSettings = memo(\n  ({\n    stateUserPassword,\n    setStateUserPassword,\n    actionData,\n  }: {\n    stateUserPassword: StateCard;\n    setStateUserPassword: Dispatch<SetStateAction<StateCard>>;\n    actionData?: IUpdateProfile;\n  }): JSX.Element => {\n    const { theme, t, userContext } = useApp();\n    return (\n      <BoxCard\n        title={t('user:security_settings')}\n        state={stateUserPassword}\n        setState={setStateUserPassword}\n        withControl\n      >\n        {stateUserPassword === 'info' && (\n          <CardContainer\n            as={motion.div}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n            style={{ gap: '16px' }}\n            withGrowingBtn\n          >\n            <Box display='flex' flexDirection='column' gap='8px'>\n              <Text variant={TextVariantEnum.textBody1medium}>\n                {t('user:benefits_of_changing_your_password_regularly')}\n              </Text>\n              <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                {t('user:it_limits_breaches_to_multiple_users')}\n              </Text>\n            </Box>\n            <Button\n              priority='secondary'\n              className='growingButton'\n              onClick={() => setStateUserPassword('edit')}\n            >\n              <Text variant={TextVariantEnum.textBody2}> {t('user:change_password')}</Text>\n            </Button>\n          </CardContainer>\n        )}\n        {stateUserPassword === 'edit' && (\n          <CardContainer\n            as={motion.div}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n            style={{ gap: '16px' }}\n          >\n            <input type='hidden' name='formName' value='password' />\n\n            <Text variant={TextVariantEnum.textBody1medium}>\n              {t(\n                'user:create_a_new_password_use_a_minimum_of_characters_including_uppercase_letters_lowercase_letters_and_numbers',\n              )}\n            </Text>\n            <BoxFields>\n              <Input\n                placeholder={t('auth:enter_password')}\n                id='i_password'\n                name='password'\n                variant='password'\n                errorText={actionData?.fieldErrors?.password?.[userContext.language]}\n              />\n              <Input\n                placeholder={t('auth:password_confirmation')}\n                id='i_passwordConfirmation'\n                name='password_confirmation'\n                variant='password'\n                errorText={actionData?.fieldErrors?.passwordConfirm?.[userContext.language]}\n              />\n            </BoxFields>\n          </CardContainer>\n        )}\n      </BoxCard>\n    );\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAA+B;AAC/B;AACA,gBAAe;;;ACHf;AAEA,IAAAA,gBAAkD;;;ACA3C,IAAMC,eAAeC,sCAAOC,IAAGC,WAAA;EAAAC,aAAA;EAAAC,aAAA;AAAA,CAAA,EAAA,CAAA,+KAAA,CAAA;AAgB/B,IAAMC,WAAWL,sCAAOC,IAAGC,WAAA;EAAAC,aAAA;EAAAC,aAAA;AAAA,CAAA,EAAA,CAAA,mIAAA,0DAAA,GAOZ,CAAC;EAAEE;AAAM,MAAMA,MAAMC,KAAKC,qBAAqB;AAS9D,IAAMC,WAAWT,sCAAOC,IAAGC,WAAA;EAAAC,aAAA;EAAAC,aAAA;AAAA,CAAA,EAAA,CAAA,gBAAA,CAAA;AAI3B,IAAMM,iBAAiBV,sCAAOC,IAAGC,WAAA;EAAAC,aAAA;EAAAC,aAAA;AAAA,CAAA,EAAA,CAAA,iFAAA,CAAA;;;ACX9B;AAjBK,SAAf,kBAA0C;EACxCO;EACAC;AAIF,GAAG;AACD,QAAM;IAAEC;IAAGC;IAAaC;EAAM,IAAIC,OAAO;AAEzC,SACE,mDAAC,SACC,YACA,eACA,SAASC,iBAAiBC,cAE1B,6DAAC,gBACC;uDAAC,OAAI,OAAO;MAAEC,UAAU;MAAYC,KAAK;MAAQC,MAAM;IAAO,GAC5D,6DAAC,QAAK,SAASC,gBAAgBC,cAAeV,YAAE,yBAAyB,KAAzE;;;;WAA2E,KAD7E;;;;WAEA;IAEA,mDAAC,OACC,OAAM,OACN,eAAc,UACd,KAAI,QACJ,OAAO;MAAEM,UAAU;MAAYE,MAAM;MAAQG,WAAW;IAAO,GAE/D;yDAAC,QAAK,SAASF,gBAAgBG,WAC3B;WAAEZ,EAAE,6BAA6B;QAAM;QACzC,mDAAC,UAAK,OAAO;UAAEa,OAAOX,MAAMY;QAAgB,GAAIb,sBAAYc,KAAKC,SAAjE;;;;eAAuE;QAAQ;QAC7E,GAAEhB,EAAE,2EAA2E;WAHnF;;;;aAIA;MAEA,mDAAC,OAAI,OAAM,QAAO,gBAAe,YAC/B,6DAAC,kBAAO,UAAS,aAAY,SAAS,MAAMD,cAAc,CAACD,UAAU,GACnE,6DAAC,QAAK,SAASW,gBAAgBG,WAAYZ,YAAE,cAAc,KAA3D;;;;aAA6D,KAD/D;;;;aAEA,KAHF;;;;aAIA;SAhBF;;;;WAiBA;OAtBF;;;;SAuBA,KA5BF;;;;SA6BA;AAEJ;;;ACjDA,mBAA0C;AAiF9B,IAAAiB,0BAAA;AAlDL,IAAMC,kBAAcC,mBACzB,CAAC;EACCC;EACAC;EACAC;EACAC;EACAC;AAOF,MAAmB;AACjB,QAAM;IAAEC;IAAGC;IAAaC;EAAM,IAAIC,OAAO;AACzC,QAAM,CAACC,cAAcC,eAAe,QAAIC,uBAAS,KAAK;AACtD,QAAM,CAACC,OAAOC,QAAQ,QAAIF,uBACxBT,MAAMU,QAAQE,YAAYZ,MAAMU,KAAK,IAAIG,mBAC3C;AACA,QAAM,CAACC,mBAAmBC,oBAAoB,QAAIN,uBAAS,KAAK;AAEhEO,8BAAU,MAAM;AACd,QACE,CAACN,OAAOO,WAAW,gBAAgB,KACnC,CAACP,OAAOO,WAAW,iBAAiB,KACpC,CAACP,OAAOO,WAAW,8BAA8B,KACjD,CAACP,OAAOO,WAAW,cAAc,KACjCP,OACA;AACAK,2BAAqB,IAAI;IAC3B,OAAO;AACLA,2BAAqB,KAAK;IAC5B;EACF,GAAG,CAACL,KAAK,CAAC;AAEV,SACE,oDAAC,WACC,OAAOP,EAAE,2BAA2B,GACpC,OAAOL,eACP,UAAUC,kBACV,gBAAc,MACd,aAAW,MAEVD;sBAAkB,UACjB,oDAAC,eACC,SAAS;MAAEoB,SAAS;IAAE,GACtB,SAAS;MAAEA,SAAS;IAAE,GACtB,MAAM;MAAEA,SAAS;IAAE,GACnB,YAAY;MAAEC,MAAM;MAAUC,QAAQ;MAAGC,UAAU;IAAI,GAEvD;0DAAC,aAAU,OAAOlB,EAAE,iBAAiB,GAAG,MAAMH,MAAMsB,cAAc,MAAlE;;;;aAAqE;MACrE,oDAAC,aAAU,OAAOnB,EAAE,gBAAgB,GAAG,MAAMH,MAAMuB,aAAa,MAAhE;;;;aAAmE;MACnE,oDAAC,aACC,OAAOpB,EAAE,aAAa,GACtB,MACEqB,yBACEvB,aAAawB,SACbzB,MAAM0B,QACNtB,YAAYuB,QACd,KACAH,yBAAyBvB,aAAawB,SAASzB,MAAM0B,QAAQtB,YAAYuB,QAAQ,KARrF;;;;aASG;MAEH,oDAAC,aACC,OAAOxB,EAAE,oBAAoB,GAC7B,MACEH,MAAM4B,WACFC,aAAa7B,MAAM4B,UAAUxB,YAAYuB,QAAQ,IACjDE,aACEzB,aAAaJ,KAAK4B,UAClBxB,YAAYuB,QACd,KAAK,MARb;;;;aASG;MAEH,oDAAC,aAAU,OAAOxB,EAAE,YAAY,GAAG,MAAMH,MAAM8B,SAA/C;;;;aAAqD;MACrD,oDAAC,aAAU,OAAO3B,EAAE,YAAY,GAAG,MAAMH,MAAM+B,SAA/C;;;;aAAqD;MACrD,oDAAC,aACC,OAAO5B,EAAE,yBAAyB,GAClC,MAAM6B,+BACJ/B,aAAagC,mBACbjC,MAAMkC,kBACN9B,YAAYuB,QACd,KANF;;;;aAMI;SAtCN;;;;WAwCA;IAED7B,kBAAkB,UACjB,oDAAC,OACC,OAAM,QACN,IAAIqC,OAAOC,KACX,SAAS;MAAElB,SAAS;IAAE,GACtB,SAAS;MAAEA,SAAS;IAAE,GACtB,MAAM;MAAEA,SAAS;IAAE,GACnB,YAAY;MAAEC,MAAM;MAAUC,QAAQ;MAAGC,UAAU;IAAI,GAEvD;0DAAC,WAAM,MAAK,UAAS,MAAK,YAAW,OAAM,aAA3C;;;;aAAoD;MACpD,oDAAC,mBACC;4DAAC,cACC;8DAAC,QAAK,SAASgB,gBAAgBC,iBAAkBnC,YAAE,sBAAsB,KAAzE;;;;iBAA2E;UAC3E,oDAAC,aAAU,SAAQ,QACjB;gEAAC,WAAM,MAAK,UAAS,MAAK,SAAQ,OAAOO,SAAzC;;;;mBAA+C;YAC/C,oDAAC,SAAM,KAAKA,SAASG,qBAAqB,KAAI,YAA9C;;;;mBAAsD;YACtD,oDAAC,kBAAO,UAAS,aAAY,SAAS,MAAML,gBAAgB,CAACD,YAAY,GACvE,8DAAC,QAAK,SAAS8B,gBAAgBE,WAAW;;cAAEpC,EAAE,iBAAiB;iBAA/D;;;;mBAAiE,KADnE;;;;mBAEA;eALF;;;;iBAMA;UACCW,qBACC,oDAAC,QAAK,SAASuB,gBAAgBG,WAAW,OAAOnC,MAAMoC,gBACpDtC,YAAE,8BAA8B,KADnC;;;;iBAEA;UAEF,oDAAC,uBACC,YAAYI,cACZ,eAAeC,iBACf,cAAcE,OACd,iBAAiBC,YAJnB;;;;iBAI4B;aAlB9B;;;;eAoBA;QACA,oDAAC,aACC;8DAAC,SACC,aAAaR,EAAE,iBAAiB,GAChC,IAAG,eACH,MAAK,aACL,OAAOH,MAAMsB,cAAc,IAC3B,WAAWpB,YAAYwC,aAAapB,aAAalB,YAAYuB,QAAQ,KALvE;;;;iBAKyE;UAEzE,oDAAC,SACC,aAAaxB,EAAE,gBAAgB,GAC/B,IAAG,cACH,MAAK,YACL,OAAOH,MAAMuB,aAAa,IAC1B,WAAWrB,YAAYwC,aAAanB,YAAYnB,YAAYuB,QAAQ,KALtE;;;;iBAKwE;UAExE,oDAAC,SACC,aAAaxB,EAAE,YAAY,GAC3B,IAAG,SACH,MAAK,SACL,OAAOH,MAAM8B,SAAS,IACtB,UAAQ,QALV;;;;iBAKU;UAEV,oDAAC,UACC,SAASa,cAAc1C,cAAcwB,SAASrB,YAAYuB,QAAQ,GAClE,aAAaxB,EAAE,aAAa,GAC5B,IAAG,UACH,MAAK,UACL,QAAQ,CAACH,MAAM0B,UAAU,EAAE,KAL7B;;;;iBAK+B;UAE/B,oDAAC,cACC,MAAK,YACL,aAAaG,aAAa7B,MAAM4B,UAA4BxB,YAAYuB,QAAQ,GAChF,gBAAgBxB,EAAE,mBAAmB,GACrC,kBAAkBA,EAAE,qBAAqB,GACzC,iBAAiBA,EAAE,oBAAoB,GACvC,WAAWD,YAAYwC,aAAad,WAAWxB,YAAYuB,QAAQ,KANrE;;;;iBAMuE;UAEvE,oDAAC,SACC,aAAaxB,EAAE,YAAY,GAC3B,IAAG,WACH,MAAK,SACL,OAAOH,MAAM+B,OACb,SAAQ,WALV;;;;iBAKiB;UAEjB,oDAAC,UACC,SAASa,oBACP3C,cAAcgC,mBACd7B,YAAYuB,QACd,GACA,aAAaxB,EAAE,yBAAyB,GACxC,IAAG,mBACH,MAAK,oBACL,QAAQ,CAACH,MAAMkC,oBAAoB,EAAE,KARvC;;;;iBAQyC;aApD3C;;;;eAsDA;WA5EF;;;;aA6EA;SAtFF;;;;WAuFA;OA1IJ;;;;SA4IA;AAEJ,CACF;;;ACnNA,IAAAW,gBAAqB;AAwBX,IAAAC,0BAAA;AAbH,IAAMC,qBAAiBC,oBAC5B,CAAC;EACCC;EACAC;AAIF,MAAmB;AACjB,QAAM;IAAEC;IAAOC;EAAE,IAAIC,OAAO;AAE5B,SACE,oDAAC,WAAQ,OAAOD,EAAE,oBAAoB,GACpC;wDAAC,iBACC;;QAAC;;UACC,MAAK;UACL,OAAOA,EAAE,0BAA0B;UACnC,SAASH,MAAMK,eAAeC,SAAS;UACvC,OAAON,MAAMK,eAAeC,OAAOC,SAAS;UAC5C,IAAG;;QALL;;;;;;;;MAME;MAEF,oDAAC,QAAK,SAASC,gBAAgBC,WAAW,OAAOP,MAAMF,KAAKU,sBACzDP,YACC,oPACF,KAHF;;;;aAIA;SAbF;;;;WAcA;IAEA,oDAAC,iBACC;;QAAC;;UACC,MAAK;UACL,OAAOA,EAAE,0BAA0B;UACnC,SAASH,MAAMK,eAAeM;UAC9B,OAAOX,MAAMK,eAAeM,OAAOJ,SAAS;UAC5C,IAAG;;QALL;;;;;;;;MAME;MAEF,oDAAC,QAAK,SAASC,gBAAgBC,WAAW,OAAOP,MAAMF,KAAKU,sBACzDP,YACC,6KACF,KAHF;;;;aAIA;SAbF;;;;WAcA;OA/BF;;;;SAgCA;AAEJ,CACF;;;ACxDA,IAAAS,gBAAqB;AA2CP,IAAAC,0BAAA;AA7BP,IAAMC,uBAAmBC,oBAC9B,CAAC;EACCC;EACAC;EACAC;AAKF,MAAmB;AACjB,QAAM;IAAEC;IAAOC;IAAGC;EAAY,IAAIC,OAAO;AACzC,SACE,oDAAC,WACC,OAAOF,EAAE,wBAAwB,GACjC,OAAOJ,mBACP,UAAUC,sBACV,aAAW,MAEVD;0BAAsB,UACrB,oDAAC,iBACC,IAAIO,OAAOC,KACX,SAAS;MAAEC,SAAS;IAAE,GACtB,SAAS;MAAEA,SAAS;IAAE,GACtB,MAAM;MAAEA,SAAS;IAAE,GACnB,YAAY;MAAEC,MAAM;MAAUC,QAAQ;MAAGC,UAAU;IAAI,GACvD,OAAO;MAAEC,KAAK;IAAO,GACrB,gBAAc,MAEd;0DAAC,OAAI,SAAQ,QAAO,eAAc,UAAS,KAAI,OAC7C;4DAAC,QAAK,SAASC,gBAAgBC,iBAC5BX,YAAE,mDAAmD,KADxD;;;;eAEA;QACA,oDAAC,QAAK,SAASU,gBAAgBE,WAAW,OAAOb,MAAMc,KAAKC,sBACzDd,YAAE,2CAA2C,KADhD;;;;eAEA;WANF;;;;aAOA;MACA,oDAAC,UACC,UAAS,aACT,WAAU,iBACV,SAAS,MAAMH,qBAAqB,MAAM,GAE1C,8DAAC,QAAK,SAASa,gBAAgBE,WAAW;;QAAEZ,EAAE,sBAAsB;WAApE;;;;aAAsE,KALxE;;;;aAMA;SAvBF;;;;WAwBA;IAEDJ,sBAAsB,UACrB,oDAAC,iBACC,IAAIO,OAAOC,KACX,SAAS;MAAEC,SAAS;IAAE,GACtB,SAAS;MAAEA,SAAS;IAAE,GACtB,MAAM;MAAEA,SAAS;IAAE,GACnB,YAAY;MAAEC,MAAM;MAAUC,QAAQ;MAAGC,UAAU;IAAI,GACvD,OAAO;MAAEC,KAAK;IAAO,GAErB;0DAAC,WAAM,MAAK,UAAS,MAAK,YAAW,OAAM,cAA3C;;;;aAAqD;MAErD,oDAAC,QAAK,SAASC,gBAAgBC,iBAC5BX,YACC,kHACF,KAHF;;;;aAIA;MACA,oDAAC,aACC;4DAAC,SACC,aAAaA,EAAE,qBAAqB,GACpC,IAAG,cACH,MAAK,YACL,SAAQ,YACR,WAAWF,YAAYiB,aAAaC,WAAWf,YAAYgB,QAAQ,KALrE;;;;eAKuE;QAEvE,oDAAC,SACC,aAAajB,EAAE,4BAA4B,GAC3C,IAAG,0BACH,MAAK,yBACL,SAAQ,YACR,WAAWF,YAAYiB,aAAaG,kBAAkBjB,YAAYgB,QAAQ,KAL5E;;;;eAK8E;WAbhF;;;;aAeA;SA9BF;;;;WA+BA;OAjEJ;;;;SAmEA;AAEJ,CACF;;;ALzBQ,IAAAE,0BAAA;AApDD,IAAMC,wBAAoBC,oBAC/B,CAAC;EACCC;EACAC;EACAC;AAKF,MAAmB;AACjB,QAAM,CAACC,eAAeC,gBAAgB,QAAIC,wBAAoB,MAAM;AACpE,QAAM,CAACC,mBAAmBC,oBAAoB,QAAIF,wBAAoB,MAAM;AAE5E,QAAM;IAAEG;IAAaC;EAAE,IAAIC,OAAO;AAElCC,+BAAU,MAAM;AACd,QAAIT,YAAYU,SAAS;AACvB,UAAIT,kBAAkB;AAAQC,yBAAiB,MAAM;AACrD,UAAIE,sBAAsB;AAAQC,6BAAqB,MAAM;IAC/D;AACA,QAAIL,YAAYW,gBAAgB;AAC9BC,6BAAuB,IAAI;IAC7B;EACF,GAAG,CAACd,IAAI,CAAC;AAET,QAAMe,cAAUC,sBAAO,IAAI;AAC3B,QAAMC,SAASC,UAAU;AAEzB,QAAMC,mBAAmBA,CAACC,UAA8C;AACtEA,UAAMC,eAAe;AACrB,UAAMC,WAAW,IAAIC,SAAS;AAC9B,UAAMC,QAAQJ,MAAMK,OAAOC;AAE3B,QAAIF,UAAU,gBAAgB;AAC5BF,eAASK,OAAO,gBAAgB3B,MAAM4B,eAAeC,OAAOC,SAAS,KAAK,EAAE;AAC5ER,eAASK,OAAO,iBAAiB,CAAC3B,MAAM4B,eAAeG,QAAQD,SAAS,KAAK,EAAE;AAC/ER,eAASK,OAAO,YAAY3B,MAAMgC,UAAUF,SAAS,KAAK,EAAE;AAE5Db,aAAOK,UAAU;QAAEW,QAAQ;QAAQC,oBAAoB;MAAK,CAAC;IAC/D,WAAWV,UAAU,gBAAgB;AACnCF,eAASK,OAAO,iBAAiB,CAAC3B,MAAM4B,eAAeC,QAAQC,SAAS,KAAK,EAAE;AAC/ER,eAASK,OAAO,gBAAgB3B,MAAM4B,eAAeG,OAAOD,SAAS,KAAK,EAAE;AAC5ER,eAASK,OAAO,YAAY3B,MAAMgC,UAAUF,SAAS,KAAK,EAAE;AAE5Db,aAAOK,UAAU;QAAEW,QAAQ;QAAQC,oBAAoB;MAAK,CAAC;IAC/D;EACF;AAEA,QAAM,CAACC,qBAAqBrB,sBAAsB,QAAIT,wBAAS,KAAK;AAEpE,QAAM+B,qBAAqBA,MACzB,oDAAC,kBAAO,MAAK,UAAS,UAAS,aAC7B;wDAAC,QAAK,SAASC,gBAAgBC,WAAY7B,YAAE,oBAAoB,KAAjE;;;;WAAmE;IACnE,oDAAC,WAAM,MAAK,UAAS,MAAK,YAAW,OAAM,mBAA3C;;;;WAA0D;OAF5D;;;;SAGA;AAGF,SACE,oDAAC,WACE;KAACD,YAAYR,KAAKuC,kBACjB,oDAAC,QAAK,QAAO,QAAO,OAAO;MAAEC,OAAO;IAAO,GAAG,oBAAkB,MAC9D,8DAAC,0BACC,SAASC,mBAAmBC,SAC5B,OAAOjC,EAAE,6BAA6B,GACtC,aAAaA,EACX,sGACF,GACA,QAAQ,MAAM2B,mBAAmB,GACjC,eAAc,YAPhB;;;;WAOwB,KAR1B;;;;WAUA;IAGF,oDAAC,QACC,QAAO,QACP,OAAO;MAAEI,OAAO;IAAO,GACvB,KAAKzB,SACL,oBAAkB,MAClB,UAAUI,kBAEV,8DAAC,WACC,IAAIwB,OAAOC,KACX,SAAS;MAAEC,SAAS;IAAE,GACtB,SAAS;MAAEA,SAAS;IAAE,GACtB,MAAM;MAAEA,SAAS;IAAE,GAEnB;0DAAC,qBACC,YAAYV,qBACZ,eAAerB,0BAFjB;;;;aAEwC;MAGxC,oDAAC,eACC,MACA,eACA,kBACA,cACA,cALF;;;;aAKyB;MAGzB,oDAAC,oBACC,mBACA,sBACA,cAHF;;;;aAGyB;MAGzB,oDAAC,kBAAe,QAAhB;;;;aAA2B;SAzB7B;;;;WA0BA,KAjCF;;;;WAkCA;OAjDF;;;;SAkDA;AAEJ,CACF;;;ADzHA,qBAAkC;AAClC,qBAAkC;AAClC,yBAAsC;AAUtC,qBAA2B;AAsNvB,IAAAgC,0BAAA;AARW,SAAf,QAAgC;AAC9B,QAAMC,UAAUC,cAA6B;AAC7C,QAAMC,aAAaC,cAA6B;AAEhD,QAAMC,OAAwBJ,QAAQK;AACtC,QAAM;IAAEC;EAAa,IAAIN;AAEzB,SACE,oDAAC,qBACC,MACA,cACA,cAHF;;;;SAG2C;AAG/C;",
  "names": ["import_react", "BoxContainer", "styled", "div", "withConfig", "displayName", "componentId", "BoxInput", "theme", "user", "borderCustomFieldData", "BoxIcons", "IconsContainer", "visibility", "setVisibility", "t", "userContext", "theme", "useApp", "VariantModalEnum", "confirmEmail", "position", "top", "left", "TextVariantEnum", "textHeading3", "marginTop", "textBody2", "color", "accentTextColor", "user", "email", "import_jsx_dev_runtime", "GeneralInfo", "memo", "stateUserInfo", "setStateUserInfo", "user", "dictionaries", "actionData", "t", "userContext", "theme", "useApp", "showUploader", "setShowUploader", "useState", "photo", "setPhoto", "getImageUrl", "DEFAULT_USER_AVATAR", "errorTextForImage", "setErrorTextForImage", "useEffect", "startsWith", "opacity", "type", "bounce", "duration", "first_name", "last_name", "getValueFromDictionaries", "genders", "gender", "language", "birthday", "getValueLang", "email", "phone", "getValueFromDictionariesNewWay", "languagesOfNotify", "primary_language", "motion", "div", "TextVariantEnum", "textBody1medium", "textBody2", "textSmall", "errorTextColor", "fieldErrors", "extractTitles", "extractTitlesNewWay", "import_react", "import_jsx_dev_runtime", "NotifySettings", "memo", "user", "formRef", "theme", "t", "useApp", "notifications", "phone", "toString", "TextVariantEnum", "textBody2", "descriptionTextColor", "email", "import_react", "import_jsx_dev_runtime", "PasswordSettings", "memo", "stateUserPassword", "setStateUserPassword", "actionData", "theme", "t", "userContext", "useApp", "motion", "div", "opacity", "type", "bounce", "duration", "gap", "TextVariantEnum", "textBody1medium", "textBody2", "user", "descriptionTextColor", "fieldErrors", "password", "language", "passwordConfirm", "import_jsx_dev_runtime", "UserInfoComponent", "memo", "user", "dictionaries", "actionData", "stateUserInfo", "setStateUserInfo", "useState", "stateUserPassword", "setStateUserPassword", "userContext", "t", "useApp", "useEffect", "success", "emailConfirmed", "setVisibleConfirmEmail", "formRef", "useRef", "submit", "useSubmit", "handleChangeForm", "event", "preventDefault", "formData", "FormData", "field", "target", "name", "append", "notifications", "phone", "toString", "email", "birthday", "method", "preventScrollReset", "visibleConfirmEmail", "buttonConfirmEmail", "TextVariantEnum", "textBody2", "isEmailConfirm", "width", "BoxInformationEnum", "warning", "motion", "div", "opacity", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "user", "userInfo", "dictionaries"]
}
