{
  "version": 3,
  "sources": ["../../../../../../app/routes/user/responses/vacancy.$id/$resumeId.tsx", "../../../../../../app/components/pages/User/Responses/components/Vacancies/InnerResponsesResumeComponent/index.tsx", "../../../../../../app/components/pages/User/Responses/components/Vacancies/InnerResponsesResumeComponent/styles.ts"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { ResponsesApi } from 'shared/v2/responses';\nimport { ResumesApi } from 'shared/v2/resumes';\n\nimport InnerResponsesResumeComponent from '~/components/pages/User/Responses/components/Vacancies/InnerResponsesResumeComponent';\nimport { getMessageContext } from '~/storages/message.server';\nimport { ResponseState } from '~/types/enums/responseState';\nimport { successAccessMessage } from '~/utils/messages';\n\nexport const loader = async ({ context, request, params }: LoaderArgs) => {\n  const clientResponses = ClientFactory.createClient(ResponsesApi, context.session);\n  const clientResumes = ClientFactory.createClient(ResumesApi, context.session);\n  const { url } = request;\n  const responseId = url.split('?')[1].split('=')[1];\n  const { resumeId } = params;\n\n  const [genders, specializations, location, employment, workfeatures, response, resume] =\n    await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationsMap,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      clientResponses.getResponse({ id: responseId }),\n      clientResumes.getResume({ id: resumeId || '' }),\n    ]);\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n    employment: employment.ToArray(),\n    workfeatures: workfeatures.ToArray(),\n  };\n\n  return json({ resume, dictionaries, response });\n};\n\nexport const action = async ({ request, context }: ActionArgs) => {\n  const text = await request.text();\n  const { ...data } = qs.parse(text);\n\n  const clientResponses = ClientFactory.createClient(ResponsesApi, context.session);\n  const messageContextStorage = await getMessageContext(request);\n\n  const responseId = data?.responseId;\n  try {\n    if (responseId) {\n      await clientResponses.patchResponse({\n        id: responseId.toString(),\n        response: {\n          id: responseId.toString(),\n          state: ResponseState.APPROVED,\n        },\n      });\n\n      const headers: HeadersInit = new Headers();\n\n      messageContextStorage.setSuccessMessage(\n        '',\n        successAccessMessage(context.userContext.language),\n      );\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n    }\n    return json(\n      {\n        success: true,\n        message: {\n          en: 'Successfully!',\n          th: 'สำเร็จ!',\n        },\n      },\n      { headers: { 'Set-Cookie': await messageContextStorage.commit() } },\n    );\n  } catch (e) {\n    const headers: HeadersInit = new Headers();\n\n    messageContextStorage.setErrorMessage(\n      context.userContext.language === 'en' ? 'Something went wrong' : 'มีบางอย่างผิดพลาด',\n      context.userContext.language === 'en' ? 'Error' : 'ข้อผิดพลาด',\n    );\n\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n    console.log(e);\n    return json({\n      success: false,\n      message: {\n        en: 'Something went wrong',\n        th: 'มีบางอย่างผิดพลาด',\n      },\n    });\n  }\n};\n\nexport default function ResponseVacancyIndex() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const { resume, response, dictionaries } = request;\n\n  return (\n    <InnerResponsesResumeComponent\n      resume={resume}\n      response={response}\n      responseAction={actionData?.success}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { useMatches } from '@remix-run/react';\nimport { useState } from 'react';\nimport { type Response } from 'shared/v2/responses';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport ResponseTypeHeading from '~/components/common/ResponseTypeStatus';\nimport { ResumeFullCardWidget } from '~/components/entities/cardWidgets';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nimport { BoxContainer } from './styles';\n\nexport default function InnerResponsesResumeComponent({\n  resume,\n  dictionaries,\n  response,\n  responseAction,\n}: {\n  resume?: Resume;\n  dictionaries?: IDictionaries;\n  response?: Response;\n  responseAction?: boolean;\n}) {\n  const [visibleRequest, setVisibleRequest] = useState(false);\n\n  const handleRequest = () => {\n    setVisibleRequest(!visibleRequest);\n  };\n\n  const matches = useMatches();\n  const selectedVacancy: Vacancy = matches[3].data?.vacancy;\n\n  return (\n    <BoxContainer>\n      <ResumeFullCardWidget\n        resume={resume}\n        dictionaries={dictionaries}\n        handleRequest={handleRequest}\n        stateResponse={response?.state}\n        typeResponse={response?.shared_id === selectedVacancy?.id ? 'REQUEST' : 'INVITATION'}\n        responseId={response?.id}\n        variant='response'\n        responseAction={responseAction}\n        status={\n          <ResponseTypeHeading\n            type={response?.shared_id === selectedVacancy?.id ? 'REQUEST' : 'INVITATION'}\n            state={response?.state}\n            position='relative'\n            onlyContainer\n          />\n        }\n      />\n    </BoxContainer>\n  );\n}\n", "import styled from 'styled-components';\n\nexport const BoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: sticky;\n  width: 100%;\n  align-items: center;\n  min-height: 100%;\n  justify-content: center;\n  gap: 16px;\n  @media (min-width: 1280px) {\n    min-height: 100%;\n    top: 0;\n    /* overflow: hidden; */\n    justify-content: flex-start;\n    gap: 24px;\n  }\n`;\n\nexport const BoxControl = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-top: 1px solid ${({ theme }) => theme.user.borderColor};\n\n  form {\n    align-items: center;\n    padding-top: 16px;\n  }\n\n  @media (min-width: 768px) {\n    align-items: flex-end;\n\n    form {\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-end;\n      align-items: center;\n      width: 100%;\n      align-items: flex-end;\n    }\n  }\n\n  @media (min-width: 1280px) {\n    .requestCard {\n      justify-content: center;\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAAqB;AACrB;AACA,gBAAe;;;ACHf;AACA,IAAAA,gBAAyB;;;ACClB,IAAM,eAAe,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkB5B,IAAM,aAAa,sCAAO;AAAA;AAAA;AAAA;AAAA,0BAIP,CAAC,EAAE,MAAM,MAAM,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ADqB1C;AAhCK,SAAf,8BAAsD;EACpDC;EACAC;EACAC;EACAC;AAMF,GAAG;AACD,QAAM,CAACC,gBAAgBC,iBAAiB,QAAIC,wBAAS,KAAK;AAE1D,QAAMC,gBAAgBA,MAAM;AAC1BF,sBAAkB,CAACD,cAAc;EACnC;AAEA,QAAMI,UAAUC,WAAW;AAC3B,QAAMC,kBAA2BF,QAAQ,CAAC,EAAEG,MAAMC;AAElD,SACE,mDAAC,gBACC,6DAAC,wBACC,QACA,cACA,eACA,eAAeV,UAAUW,OACzB,cAAcX,UAAUY,cAAcJ,iBAAiBK,KAAK,YAAY,cACxE,YAAYb,UAAUa,IACtB,SAAQ,YACR,gBACA,QACE,mDAAC,8BACC,MAAMb,UAAUY,cAAcJ,iBAAiBK,KAAK,YAAY,cAChE,OAAOb,UAAUW,OACjB,UAAS,YACT,eAAa,QAJf;;;;SAIe,KAdnB;;;;SAgBG,KAjBL;;;;SAmBA;AAEJ;;;AD9CA,qBAAkC;AA+F9B,IAAAG,0BAAA;AANW,SAAf,uBAA+C;AAC7C,QAAMC,UAAUC,cAA6B;AAC7C,QAAMC,aAAaC,cAA6B;AAChD,QAAM;IAAEC;IAAQC;IAAUC;EAAa,IAAIN;AAE3C,SACE,oDAAC,iCACC,QACA,UACA,gBAAgBE,YAAYK,SAC5B,gBAJF;;;;SAI6B;AAGjC;",
  "names": ["import_react", "resume", "dictionaries", "response", "responseAction", "visibleRequest", "setVisibleRequest", "useState", "handleRequest", "matches", "useMatches", "selectedVacancy", "data", "vacancy", "state", "shared_id", "id", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "resume", "response", "dictionaries", "success"]
}
