{
  "version": 3,
  "sources": ["../../../../../app/routes/user/responses/resume.tsx", "../../../../../app/components/pages/User/Responses/components/Resumes/index.tsx"],
  "sourcesContent": ["import { json, type LoaderArgs, redirect } from '@remix-run/cloudflare';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { memo } from 'react';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { ResponsesApi } from 'shared/v2/responses';\nimport type { Resume } from 'shared/v2/resumes';\nimport { ResumesApi } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport { ResponsesResumesComponent } from '~/components/pages/User/Responses/components/Resumes';\nimport { getPaginationPages } from '~/utils/helpers';\n\nexport const loader = async ({ context, request, params }: LoaderArgs) => {\n  if (!context.userContext.user.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  const url = new URL(request.url);\n  const max_page_size = url.searchParams.get('max_page_size');\n  const current_token = url.searchParams.get('current_token');\n  const current_page = url.searchParams.get('current_page');\n  const max_pages = url.searchParams.get('max_pages');\n\n  const pages = getPaginationPages(current_page, max_pages);\n\n  const clientResponses = ClientFactory.createClient(ResponsesApi, context.session);\n  const clientResumes = ClientFactory.createClient(ResumesApi, context.session);\n\n  const [genders, specializations, location, responses] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationsMap,\n    context.references.locationMap,\n    clientResponses.getEntitiesResponses({\n      max_page_size: max_page_size ? +max_page_size : 10,\n      pages,\n      page_token: current_page && +current_page !== 1 && current_token ? current_token : undefined,\n      entity_type: 'RESUME',\n    }),\n  ]);\n\n  let resumes: Resume[] = [];\n  if (responses.data.length > 0) {\n    const resumeIds = responses.data.map((item) => item.entity_id).join(',');\n\n    resumes = await clientResumes.getBatchResumes({ ids: resumeIds }).then((res) => res.data);\n  }\n\n  // const paginationRange = getPaginationRange(pages, responses?.max_pages, resumes?.page_tokens);\n  // const maxPages = responses.max_pages;\n\n  const pagination = {\n    max_page_size,\n    current_token,\n    current_page,\n    // paginationRange,\n    // maxPages,\n  };\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n  };\n\n  return json({ responses, dictionaries, pagination, resumes });\n};\n\nconst ResponsesResume = memo((): JSX.Element => {\n  const request = useLoaderData<typeof loader>();\n  const { resumes, responses } = request;\n\n  return (\n    <Box flexDirection='column' width='100%'>\n      <ResponsesResumesComponent resumes={resumes} responses={responses.data} />\n      <Outlet />\n    </Box>\n  );\n});\n\nexport default ResponsesResume;\n", "import { Link, useLocation } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo } from 'react';\nimport routes from 'shared/routing/routes';\nimport type { ResponsesGroupedByEntity } from 'shared/v2/responses';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport Button from '~/components/common/Button';\nimport { BoxCard } from '~/components/common/Card';\nimport ResponseAllTypeStatuses from '~/components/common/ResponseAllTypeStatuses';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport {\n  ResumePartCardHeading,\n  ResumePartCardInfo,\n} from '~/components/entities/cardComponents/partCard';\nimport { MediaBox } from '~/components/ui/Card';\nimport { Divider } from '~/components/ui/Divider';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { ResponseCardVariantEnum } from '~/types/enums/responseCardVariantEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nexport const ResponsesResumesComponent = memo(\n  ({\n    resumes,\n    resume,\n    dictionaries,\n    responses,\n  }: {\n    resumes?: Resume[] | null;\n    resume?: Resume;\n    dictionaries?: IDictionaries;\n    responses?: ResponsesGroupedByEntity[];\n  }): JSX.Element => {\n    const { theme, t } = useApp();\n    const widthScreen = useScreenWidth();\n\n    const getResponseStatistics = (responses?: ResponsesGroupedByEntity[], id?: string) =>\n      responses?.find((item) => item.entity_id === id)?.statistics;\n\n    const boxHeading = (resume: Resume) => (\n      <Box flexDirection='column' width='100%'>\n        <ResumePartCardHeading\n          variant='response'\n          resume={resume}\n          variantResponseCard={ResponseCardVariantEnum.main}\n        />\n        {widthScreen >= 768 && <Divider />}\n        <ResumePartCardInfo variant='response' resume={resume} />\n        <Box flexDirection='row' justifyContent='space-between'>\n          <ResponseAllTypeStatuses statistics={getResponseStatistics(responses, resume.id)} />\n        </Box>\n      </Box>\n    );\n\n    const buttonCreateResume = () => (\n      <Link to={routes.user.resume.create}>\n        <Button priority='secondary'>\n          <Text variant={TextVariantEnum.textBody2}>{t('user:create_resume')}</Text>\n        </Button>\n      </Link>\n    );\n\n    return (\n      <Box\n        flexDirection='column'\n        alignItems='flex-start'\n        width='100%'\n        gap='24px'\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        <Box\n          flexDirection='column'\n          width='100%'\n          gap={widthScreen > 1024 ? '24px' : '16px'}\n          style={{\n            flex: '1',\n          }}\n        >\n          {/* <Heading variant='resumes' title={t('user:my_resumes')} /> */}\n\n          {!resumes?.length && (\n            <BoxInformation\n              variant={BoxInformationEnum.info}\n              title={t('user:no_resumes_available')}\n              information={t(\n                'user:you_dont_have_a_single_resume_yet_that_employers_could_respond_to',\n              )}\n              button={() => buttonCreateResume()}\n              flexDirection='column'\n            />\n          )}\n\n          {resumes?.map((item, index) => (\n            <Box\n              width='100%'\n              style={{\n                cursor: 'pointer',\n                borderRadius: '12px',\n                transition: 'all 0.2s cubic-bezier(0.2, 0, 0, 1)',\n                border:\n                  widthScreen > 1024 && item.id === resume?.id\n                    ? `2px solid ${theme.modal.borderCardsColor}`\n                    : '',\n              }}\n              key={item?.id}\n            >\n              <BoxCard key={item?.id} variant='userCard'>\n                <MediaBox variant='mobile'>\n                  <Link to={item?.id || '#'}>{boxHeading(item)}</Link>\n                </MediaBox>\n\n                <MediaBox variant='desktop'>\n                  <Link to={item?.id} preventScrollReset>\n                    {boxHeading(item)}\n                  </Link>\n                </MediaBox>\n              </BoxCard>\n            </Box>\n          ))}\n        </Box>\n      </Box>\n    );\n  },\n);\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "ResponsesResumesComponent", "memo", "resumes", "resume", "dictionaries", "responses", "theme", "t", "useApp", "widthScreen", "useScreenWidth", "getResponseStatistics", "id", "find", "item", "entity_id", "statistics", "boxHeading", "ResponseCardVariantEnum", "main", "buttonCreateResume", "routes", "user", "create", "TextVariantEnum", "textBody2", "motion", "div", "opacity", "flex", "length", "BoxInformationEnum", "info", "map", "index", "cursor", "borderRadius", "transition", "border", "modal", "borderCardsColor", "import_jsx_dev_runtime", "ResponsesResume", "memo", "request", "useLoaderData", "resumes", "responses", "data"]
}
