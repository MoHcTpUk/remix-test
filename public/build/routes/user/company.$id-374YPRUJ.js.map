{
  "version": 3,
  "sources": ["../../../../app/routes/user/company.$id.tsx", "../../../../app/components/pages/User/Companies/Company/index.tsx", "../../../../app/components/pages/User/Companies/Company/components/CompanyInformation/index.tsx", "../../../../app/components/entities/ModalVerification/index.tsx", "../../../../app/components/entities/ModalVerification/styles.tsx", "../../../../app/components/pages/User/Companies/Company/components/CompanyInformation/CompanyInformationData.tsx"],
  "sourcesContent": ["import type { LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { ClientFactory } from 'shared/clientFactory';\nimport type { Company } from 'shared/v2/companies';\nimport { CompaniesApi } from 'shared/v2/companies';\n\nimport { CompanyComponent } from '~/components/pages/User/Companies/Company';\nimport { getMessageContext } from '~/storages/message.server';\nimport type { IError } from '~/types/interfaces/IError';\nimport type { IUpdateCompany } from '~/types/interfaces/iForms';\nimport { getFileUrl } from '~/utils/helpers.client';\nimport { errorActionMessage, errorActionTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validateDescription,\n  validatePhone,\n  validateRequireField,\n  validateThaiOrEnglish,\n  validateTypeImage,\n  validateUnknownString,\n  validateZipCode,\n} from '~/utils/validations';\n\nexport const loader = async ({ params, context, request }: LoaderArgs) => {\n  // if (!context.userContext.user.isAuthenticated) {\n  //   return redirect('/', {\n  //     status: 302,\n  //   });\n  // }\n\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n\n  try {\n    const companyId = params.id;\n\n    const [\n      genders,\n      specializations,\n      location,\n      employment,\n      workfeatures,\n      educationLevel,\n      yearsOfExperience,\n      employeeNumbers,\n      company,\n    ] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationForCompany,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      context.references.educationLevelMap,\n      context.references.yearsOfExperienceMap,\n      context.references.employeeNumbersMap,\n      clientCompany.getCompany({ id: companyId || '' }),\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n      employment: employment.ToArray(),\n      workfeatures: workfeatures.ToArray(),\n      educationLevel: educationLevel.ToArray(),\n      yearsOfExperience: yearsOfExperience.ToArray(),\n      employeeNumbers: employeeNumbers.ToArray(),\n    };\n\n    return json({ company, dictionaries });\n  } catch (e) {\n    console.log(e);\n    const messageContextStorage = await getMessageContext(request);\n\n    messageContextStorage.setErrorMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    const headers: HeadersInit = new Headers();\n\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n\n    return badRequest(\n      {\n        dictionaries: {},\n        company: null,\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context, params }: LoaderArgs) => {\n  const formData = await request.formData();\n  const companyId = params.id;\n  const address = formData.get('address')?.toString();\n  const city_id = formData.get('city')?.toString();\n  const specialization_id = formData.get('specialization_id')?.toString();\n  const description = formData.get('description')?.toString();\n  const number_of_employees_ID = formData.get('employee')?.toString();\n  const name = formData.get('name')?.toString();\n  const phone = formData.get('phone')?.toString();\n  const website = formData.get('website')?.toString();\n  const zip_code = formData.get('zip_code')?.toString();\n  const logo_uri = formData.get('logo')?.toString();\n  const verified = Boolean(formData.get('verified')?.toString());\n\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n\n  try {\n    if (\n      logo_uri?.startsWith('data:image/png') ||\n      logo_uri?.startsWith('data:image/wepb') ||\n      logo_uri?.startsWith('data:image/svg') ||\n      logo_uri?.startsWith('data:image/ico')\n    ) {\n      return badRequest({\n        fieldErrors: {\n          image: validateTypeImage(),\n        },\n        formError: null,\n      });\n    }\n\n    const filUrl = await getFileUrl(logo_uri, context);\n\n    const bodyFormData = {\n      id: companyId || '',\n      address: address || '',\n      city_id: city_id || null,\n      specialization_id: specialization_id || null,\n      description: description || '',\n      number_of_employees_ID: number_of_employees_ID || null,\n      name: name || '',\n      phone: phone || '',\n      website: website || '',\n      zip_code: zip_code || '',\n      logo_uri: filUrl || '',\n      verified: verified || false,\n    };\n\n    const fieldErrors = {\n      name: validateRequireField(name),\n      phone: validatePhone(phone),\n      city_id: validateRequireField(city_id),\n      address: validateRequireField(address),\n      zip_code: validateZipCode(zip_code),\n      number_of_employees_id: validateRequireField(number_of_employees_ID),\n      specialization_id: validateRequireField(specialization_id),\n      website: validateThaiOrEnglish(website),\n      description: validateDescription(description),\n    };\n\n    if (Object.values(fieldErrors).some(Boolean)) {\n      return badRequest({ fieldErrors, bodyFormData, formError: null, success: false });\n    }\n\n    const updateCompany = await clientCompany.patchCompany({\n      id: companyId || '',\n      company: bodyFormData as Company,\n    });\n\n    if ('error' in updateCompany) {\n      return badRequest({\n        fieldErrors: validateUnknownString(updateCompany.error as string),\n        formError: null,\n        success: false,\n      });\n    }\n    if (\n      (updateCompany as IError)?.status?.includes('Internal Server Error') ||\n      ('status' in (updateCompany as IError) &&\n        (updateCompany as IError)?.status?.includes('Invalid request'))\n    ) {\n      return badRequest({\n        fieldErrors: null,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  } catch (error) {\n    // Handle any errors that occurred during the process\n    badRequest({\n      fieldErrors: error,\n      formError: {\n        en: 'Some data entered incorrectly',\n        th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n      },\n      success: false,\n    });\n  }\n\n  return json({ success: true, fieldErrors: null, formError: null });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const { company } = request;\n  const { dictionaries } = request;\n\n  return (\n    <CompanyComponent\n      company={company}\n      dictionaries={dictionaries}\n      actionData={actionData as IUpdateCompany}\n    />\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { useEffect, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\n\nimport { CompanyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateCompany } from '~/types/interfaces/iForms';\n\nimport CompanyInformation from './components/CompanyInformation';\nimport { Wrapper } from './styles';\n\nexport function CompanyComponent({\n  company,\n  dictionaries,\n  actionData,\n}: {\n  company?: Company | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateCompany;\n}) {\n  const [editCard, setEditCard] = useState(CompanyCardEnum.all);\n\n  useEffect(() => {\n    if (actionData?.success) setEditCard(CompanyCardEnum.all);\n  }, [company]);\n\n  return (\n    <Form method='POST' style={{ width: '100%' }}>\n      <Wrapper>\n        <CompanyInformation\n          company={company}\n          dictionaries={dictionaries}\n          editCard={editCard}\n          setEditCard={setEditCard}\n          actionData={actionData}\n        />\n      </Wrapper>\n    </Form>\n  );\n}\n", "import { Link } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport type { Dispatch, MouseEvent, SetStateAction } from 'react';\nimport { useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport { Button } from '~/components/common/Button/styles';\nimport { BoxCard } from '~/components/common/Card';\nimport { Icon } from '~/components/common/Icon';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport ModalVerification from '~/components/entities/ModalVerification';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { CompanyCardEnum } from '~/types/enums/stateCardEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateCompany } from '~/types/interfaces/iForms';\nimport { maskTaxId } from '~/utils/masks';\n\nimport CompanyInformationData from './CompanyInformationData';\nimport CompanyInformationEdit from './CompanyInformationEdit';\nimport { VerificationStatus } from './styles';\n\nexport default function CompanyInformation({\n  editCard,\n  setEditCard,\n  company,\n  dictionaries,\n  actionData,\n}: {\n  editCard: CompanyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  company?: Company | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateCompany;\n}) {\n  const { t, theme } = useApp();\n  const [visibleVerification, setVisibleVerification] = useState(false);\n  const handleClickVerification = (e: MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => {\n    e.preventDefault();\n    setVisibleVerification(true);\n  };\n\n  const buttonShowVacancies = () => (\n    <Link to={`/user/vacancy?company_id=${company?.id || ''}`}>\n      <Button priority='secondary'>\n        <Text variant={TextVariantEnum.textBody2}>{t('common:show')}</Text>\n      </Button>\n    </Link>\n  );\n\n  const verificationCard = (company?: Company | null) => (\n    <BoxCard variant={VariantCardEnum.userCard}>\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n        style={{ gap: '16px' }}\n        withGrowingBtn\n      >\n        <Box display='flex' flexDirection='column' gap='12px'>\n          <VerificationStatus verified={company?.verified}>\n            <Icon\n              name={company?.verified ? IconEnum.attentionVerified : IconEnum.attentionNotVerified}\n            />\n            <Text variant={TextVariantEnum.textBody2medium}>\n              {company?.verified\n                ? t('user:company_is_verified')\n                : t('user:verification_is_required')}\n            </Text>\n          </VerificationStatus>\n\n          {company?.verified ? (\n            <Text variant={TextVariantEnum.textBody2}>\n              {t('user:your_companys_vacancies_can_be_visible_to_other_users')}\n            </Text>\n          ) : (\n            <Box display='flex' flexDirection='column' gap='8px'>\n              <Text variant={TextVariantEnum.textHeading3}>\n                {t('user:why_is_verification_needed')}{' '}\n              </Text>\n              <Text variant={TextVariantEnum.textBody2}>\n                {t('user:we_value_the_safety_of_our_users')}\n              </Text>\n              <Text variant={TextVariantEnum.textBody2}>\n                {t('user:after_verification_you_will_be_able_to_post_vacancies')}\n              </Text>\n            </Box>\n          )}\n        </Box>\n\n        <Box display='flex' flexDirection='column' gap='8px'>\n          <Text variant={TextVariantEnum.textBody2}>{t('user:tax_id')}</Text>\n          <DataField\n            data={\n              company?.verified\n                ? maskTaxId(company?.tax_id)\n                : t('user:company_verification_is_required')\n            }\n            color={theme.backgroundColor}\n          />\n        </Box>\n\n        {!company?.verified && (\n          <Button\n            priority='primary'\n            className='growingButton'\n            onClick={(e) => handleClickVerification(e)}\n          >\n            <Text variant={TextVariantEnum.textBody2}>{t('user:how_to_verify_a_company')}</Text>\n          </Button>\n        )}\n      </CardContainer>\n    </BoxCard>\n  );\n\n  return (\n    <>\n      {verificationCard(company)}\n\n      <BoxInformation\n        variant={BoxInformationEnum.info}\n        title={\n          company?.number_of_vacancies && company?.number_of_vacancies > 0 // TODO: fix on all vacancies\n            ? t('user:vacancies_in_this_company')\n            : t('user:this_company_has_no_vacancies_yet')\n        }\n        button={\n          company?.number_of_vacancies && company?.number_of_vacancies > 0\n            ? () => buttonShowVacancies()\n            : null\n        }\n        flexDirection='column'\n      />\n\n      {editCard === CompanyCardEnum.all && (\n        <CompanyInformationData\n          editCard={editCard}\n          setEditCard={setEditCard}\n          company={company}\n          dictionaries={dictionaries}\n        />\n      )}\n\n      {editCard === CompanyCardEnum.information && (\n        <CompanyInformationEdit\n          editCard={editCard}\n          setEditCard={setEditCard}\n          company={company}\n          dictionaries={dictionaries}\n          actionData={actionData}\n        />\n      )}\n\n      <ModalVerification visibility={visibleVerification} setVisibility={setVisibleVerification} />\n    </>\n  );\n}\n", "import { Link } from '@remix-run/react';\n\nimport { Box } from '~/components/common/Box';\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport { Modal } from '~/components/common/Modal';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { useApp } from '~/hooks';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { VariantModalEnum } from '~/types/enums/variantModalEnum';\n\nimport { BoxContainer, ContentWrapper, HeaderWrapper, ItemWrapper } from './styles';\n\nexport default function ModalVerification({\n  visibility,\n  setVisibility,\n}: {\n  visibility: boolean;\n  setVisibility: (visibility: boolean) => void;\n}) {\n  const { t, theme } = useApp();\n\n  return (\n    <Modal\n      visibility={visibility}\n      setVisibility={setVisibility}\n      variant={VariantModalEnum.verification}\n    >\n      <BoxContainer>\n        <ContentWrapper>\n          <HeaderWrapper>\n            <Icon name={IconEnum.emojiShield} />\n            <Box display='flex' flexDirection='column' gap='8px'>\n              <Text variant={TextVariantEnum.textHeading2} className='title'>\n                {t('user:application_for_verification')}\n              </Text>\n              <Text variant={TextVariantEnum.textBody2medium}>\n                {t(\n                  'user:for_security_reasons_we_need_you_to_confirm_your_connection_with_the_company',\n                )}\n              </Text>\n            </Box>\n          </HeaderWrapper>\n\n          <Box display='flex' flexDirection='column' gap='16px'>\n            <ItemWrapper>\n              <Icon name={IconEnum.blackCamera} />\n              <Text variant={TextVariantEnum.textBody2medium}>\n                {t('user:take_a_photo_or_scan_of_your_documents_with_tax_id')}\n              </Text>\n            </ItemWrapper>\n            <ItemWrapper>\n              <Icon name={IconEnum.blackWarning} />\n              <Text variant={TextVariantEnum.textBody2medium}>\n                {t('user:make_sure_that_in_the_resulting_photo_the_text_and_the_tax_id')}\n              </Text>\n            </ItemWrapper>\n            <ItemWrapper>\n              <Icon name={IconEnum.blackMail} />\n              <Box display='flex' flexDirection='column' gap='14px'>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {t('user:send_a_photo_or_scan_to')}\n                  <Link\n                    to='#'\n                    onClick={() => {\n                      window.location.href =\n                        'mailto:support@upjob.com?subject=Company Verification';\n                    }}\n                  >\n                    <Text\n                      variant={TextVariantEnum.textBody2medium}\n                      color={theme.accentTextColor}\n                      style={{ textDecoration: 'underline' }}\n                    >\n                      support@upjob.com\n                    </Text>\n                  </Link>\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium} style={{ fontWeight: '200' }}>\n                  {t(\n                    'user:after_you_sent_a_letter_with_documents_to_us_our_moderator_will_check_the_company',\n                  )}\n                </Text>\n              </Box>\n            </ItemWrapper>\n          </Box>\n        </ContentWrapper>\n\n        <Button priority='secondary' onClick={() => setVisibility(false)} className='growingButton'>\n          <Text variant={TextVariantEnum.textBody2}>{t('common:cancel')} </Text>\n        </Button>\n      </BoxContainer>\n    </Modal>\n  );\n}\n", "import { styled } from 'styled-components';\n\nimport { FONT_SIZES_DESC, FONT_WEIGHTS_DESC, LINE_HEIGHTS_DESC } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\n\nexport const BoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 24px;\n  width: 100%;\n  max-width: 100%;\n  @media (min-width: 768px) {\n    max-width: 458px;\n  }\n  @media (min-width: 1024px) {\n    max-width: 558px;\n  }\n  @media (min-width: 1280px) {\n    max-width: 642px;\n  }\n\n  & button {\n    align-self: center;\n  }\n`;\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: center;\n\n  @media (min-width: 768px) {\n    gap: 24px;\n  }\n`;\n\nexport const HeaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: center;\n  text-align: center;\n\n  & svg {\n    width: 43px;\n    height: 48px;\n  }\n\n  @media (min-width: 768px) {\n    max-width: 430px;\n\n    & svg {\n      width: 50px;\n      height: 56px;\n    }\n\n    .title {\n      font-size: ${FONT_SIZES_DESC[TextVariantEnum.textHeading3]};\n      font-weight: ${FONT_WEIGHTS_DESC[TextVariantEnum.textHeading3]};\n      line-height: ${LINE_HEIGHTS_DESC[TextVariantEnum.textHeading3]};\n    }\n  }\n`;\n\nexport const ItemWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  background-color: ${({ theme }) => theme.сards.imageBackground};\n  padding: 16px;\n  border-radius: 4px;\n\n  & span {\n    margin-top: 2px;\n  }\n\n  @media (min-width: 768px) {\n    padding: 24px;\n    border-radius: 8px;\n    gap: 12px;\n\n    & span {\n      font-size: ${FONT_SIZES_DESC[TextVariantEnum.textBody1medium]};\n      font-weight: ${FONT_WEIGHTS_DESC[TextVariantEnum.textBody1medium]};\n      line-height: ${LINE_HEIGHTS_DESC[TextVariantEnum.textBody1medium]};\n    }\n  }\n`;\n", "import { Link } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Company } from 'shared/v2/companies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Text } from '~/components/common/Text';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { CompanyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers.client';\n\nimport { BoxWebsite } from './styles';\n\nexport default function CompanyInformationData({\n  editCard,\n  setEditCard,\n  company,\n  dictionaries,\n}: {\n  editCard: CompanyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  company?: Company | null;\n  dictionaries?: IDictionaries;\n}) {\n  const { t, theme, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:general_information')}\n      withEditButton\n      nameCard={CompanyCardEnum.information}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField label={t('user:company_name')} data={company?.name} />\n        {/* TODO: add spec to companies */}\n        <DataField\n          label={t('user:specialization')}\n          data={getValueLang(company?.specialization_name, userContext.language)}\n        />\n        <DataField label={t('user:phone')} data={company?.phone} />\n        <DataField\n          label={t('user:district')}\n          data={getValueLang(company?.city_name, userContext.language)}\n        />\n        <DataField label={t('user:address')} data={company?.address} />\n        <DataField label={t('user:zip_code')} data={company?.zip_code} />\n        {company?.website && (\n          <BoxWebsite>\n            <DataField variant='custom' label={t('user:website_or_facebook_page')}>\n              <Link to={company?.website || ''}>\n                <Text color={theme.accentTextColor}>{company?.website}</Text>\n              </Link>\n            </DataField>\n          </BoxWebsite>\n        )}\n        <DataField\n          label={t('user:number_of_employees')}\n          data={getValueLang(company?.number_of_employees_name, userContext.language)}\n        />\n        <DataField label={t('user:description')} data={company?.description} />\n        {/* <Switcher\n          checked={Boolean(company?.published)}\n          htmlLabel='published'\n          name='published'\n          disabled\n          variant='default'\n          checkedLabel={t('user:published')}\n          unCheckedLabel={t('user:published')}\n        /> */}\n      </CardContainer>\n    </BoxCard>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "BoxContainer", "styled", "div", "withConfig", "displayName", "componentId", "ContentWrapper", "HeaderWrapper", "FONT_SIZES_DESC", "TextVariantEnum", "textHeading3", "FONT_WEIGHTS_DESC", "LINE_HEIGHTS_DESC", "ItemWrapper", "theme", "\u0441ards", "imageBackground", "textBody1medium", "visibility", "setVisibility", "t", "theme", "useApp", "VariantModalEnum", "verification", "IconEnum", "emojiShield", "TextVariantEnum", "textHeading2", "textBody2medium", "blackCamera", "blackWarning", "blackMail", "window", "location", "href", "accentTextColor", "textDecoration", "fontWeight", "textBody2", "import_jsx_dev_runtime", "editCard", "setEditCard", "company", "dictionaries", "t", "theme", "userContext", "useApp", "CompanyCardEnum", "information", "motion", "div", "opacity", "type", "bounce", "duration", "name", "getValueLang", "specialization_name", "language", "phone", "city_name", "address", "zip_code", "website", "accentTextColor", "number_of_employees_name", "description", "import_jsx_dev_runtime", "editCard", "setEditCard", "company", "dictionaries", "actionData", "t", "theme", "useApp", "visibleVerification", "setVisibleVerification", "useState", "handleClickVerification", "e", "preventDefault", "buttonShowVacancies", "id", "TextVariantEnum", "textBody2", "verificationCard", "VariantCardEnum", "userCard", "motion", "div", "opacity", "type", "bounce", "duration", "gap", "verified", "IconEnum", "attentionVerified", "attentionNotVerified", "textBody2medium", "textHeading3", "maskTaxId", "tax_id", "backgroundColor", "BoxInformationEnum", "info", "number_of_vacancies", "CompanyCardEnum", "all", "information", "import_jsx_dev_runtime", "CompanyComponent", "company", "dictionaries", "actionData", "editCard", "setEditCard", "useState", "CompanyCardEnum", "all", "useEffect", "success", "width", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "company", "dictionaries"]
}
