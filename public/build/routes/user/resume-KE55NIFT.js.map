{
  "version": 3,
  "sources": ["../../../../app/routes/user/resume.tsx", "../../../../app/components/pages/User/Resumes/index.tsx", "../../../../app/components/pages/User/Resumes/styles.ts"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { Form, useActionData, useLoaderData, useSubmit } from '@remix-run/react';\nimport { useRef, useState } from 'react';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { ResumesApi } from 'shared/v2/resumes';\nimport styled from 'styled-components';\n\nimport { Box } from '~/components/common/Box';\nimport { Pagination } from '~/components/common/Pagination';\nimport { CreateEntityCard } from '~/components/pages/User/components/CreateEntityCard';\nimport { ResumesComponent } from '~/components/pages/User/Resumes';\nimport { useScreenWidth } from '~/hooks';\nimport { getMessageContext, messageContextStorage } from '~/storages/message.server';\nimport { getUserContextStorage } from '~/storages/userContext.server';\nimport type { ListResumeResponse, PublishError } from '~/types/interfaces/iForms';\nimport type { IPaginationRange } from '~/types/interfaces/IPaginationRange';\nimport { getPaginationPages, getPaginationRange } from '~/utils/helpers';\nimport {\n  copiedResumeMessage,\n  copiedResumeTitle,\n  deletedResumeMessage,\n  deletedResumeTitle,\n  errorActionMessage,\n  errorActionTitle,\n  errorPublishCommonIsNotEmailConfirmMessage,\n  errorPublishResumeMessage,\n  errorPublishResumeTitle,\n  publishResumeMessage,\n  publishResumeTitle,\n  unpublishResumeMessage,\n  unpublishResumeTitle,\n} from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\n\nexport const BoxPagination = styled.div`\n  width: 100%;\n  display: flex;\n  /* align-items: center; */\n  justify-content: center;\n  max-width: 920px;\n  margin: 16px 0;\n  flex-direction: row;\n  gap: 16px;\n\n  @media (min-width: 1024px) {\n    margin: 24px 0;\n    gap: 24px;\n  }\n  @media (min-width: 1280px) {\n    max-width: 100%;\n  }\n`;\n\nexport const loader = async ({ context, request }: LoaderArgs) => {\n  if (!context.userContext.user.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n  const url = new URL(request.url);\n  const max_page_size = url.searchParams.get('max_page_size');\n  const current_token = url.searchParams.get('current_token');\n  const current_page = url.searchParams.get('current_page');\n  const max_pages = url.searchParams.get('max_pages');\n\n  const pages = getPaginationPages(current_page, max_pages);\n\n  const client = ClientFactory.createClient(ResumesApi, context.session);\n\n  try {\n    const [genders, specializations, location, resumes] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationsMap,\n      context.references.locationMap,\n      client.getResumes({\n        only_my: true,\n        max_page_size: max_page_size ? +max_page_size : 10,\n        pages,\n        page_token:\n          current_page && +current_page !== 1 && current_token ? current_token : undefined,\n      }),\n    ]);\n\n    const paginationRange = getPaginationRange(pages, resumes?.max_pages, resumes?.page_tokens);\n    const maxPages = resumes.max_pages;\n\n    const pagination = {\n      max_page_size,\n      current_token,\n      current_page,\n      paginationRange,\n      maxPages,\n    };\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n    };\n\n    return json({ resumes, dictionaries, pagination });\n  } catch (e) {\n    console.log(e);\n    const headers: HeadersInit = new Headers();\n    const messageContextStorage = await getMessageContext(request);\n\n    messageContextStorage.setSuccessMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n    return badRequest(\n      {\n        resumes: { data: [] },\n        dictionaries: {\n          genders: [],\n          specializations: [],\n          location: [],\n        },\n        pagination: {\n          max_page_size: null,\n          current_token: null,\n          current_page: null,\n          paginationRange: null,\n          maxPages: null,\n        },\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context }: ActionArgs) => {\n  const formData = await request.formData();\n  const client = ClientFactory.createClient(ResumesApi, context.session);\n\n  const action = formData.get('action');\n  const id = formData.get('id') as string;\n  const messageContextStorage = await getMessageContext(request);\n  const headers: HeadersInit = new Headers();\n\n  try {\n    if (action === 'delete') {\n      await client.deleteResume({ id });\n      messageContextStorage.setSuccessMessage(\n        deletedResumeMessage(context.userContext.language),\n        deletedResumeTitle(context.userContext.language),\n      );\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n\n      if (context.userContext.forms?.resume === id) {\n        const userContextStorage = await getUserContextStorage(request);\n        const userContext = userContextStorage.getUserContext();\n\n        const updateUserContext = {\n          ...userContext,\n          forms: {\n            ...userContext.forms,\n            resume: '',\n          },\n        };\n        userContextStorage.setUserContext(updateUserContext);\n        headers.append('Set-Cookie', await userContextStorage.commit());\n      }\n\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n    if (action === 'copy') {\n      await client.postResume({ source: id });\n      messageContextStorage.setSuccessMessage(\n        copiedResumeMessage(context.userContext.language),\n        copiedResumeTitle(context.userContext.language),\n      );\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n\n    if (action === 'published') {\n      const userContextStorage = await getUserContextStorage(request);\n      const userContext = userContextStorage.getUserContext();\n      const value = formData.get('publish');\n      const checkFields = formData.get('checkFields');\n\n      if (!userContext.user.isEmailConfirm) {\n        messageContextStorage.setErrorMessage(\n          errorPublishCommonIsNotEmailConfirmMessage(context.userContext.language),\n          errorPublishResumeTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: null,\n            success: false,\n            vacancies: null,\n            id,\n          },\n          headers,\n        );\n      }\n\n      if (checkFields === 'false') {\n        messageContextStorage.setErrorMessage(\n          errorPublishResumeMessage(context.userContext.language),\n          errorPublishResumeTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: null,\n            success: false,\n            vacancies: null,\n            id,\n          },\n          headers,\n        );\n      }\n\n      const res = await client.patchResume({\n        id,\n        resume: {\n          id,\n          published: value === 'true',\n        },\n      });\n\n      if ((res as PublishError)?.error) {\n        messageContextStorage.setSuccessMessage(\n          errorActionMessage(context.userContext.language),\n          errorActionTitle(context.userContext.language),\n        );\n        headers.append('Set-Cookie', await messageContextStorage.commit());\n        return badRequest(\n          {\n            fieldErrors: null,\n            bodyFormData: null,\n            formError: null,\n            success: false,\n            resumes: null,\n            id,\n          },\n          headers,\n        );\n      }\n      if (value === 'true') {\n        messageContextStorage.setSuccessMessage(\n          publishResumeMessage(context.userContext.language),\n          publishResumeTitle(context.userContext.language),\n        );\n      } else {\n        messageContextStorage.setSuccessMessage(\n          unpublishResumeMessage(context.userContext.language),\n          unpublishResumeTitle(context.userContext.language),\n        );\n      }\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n\n      return json({ success: true, fieldErrors: null, formError: null, id }, { headers });\n    }\n  } catch (e) {\n    messageContextStorage.setErrorMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n    badRequest(\n      {\n        fieldErrors: e,\n        bodyFormData: null,\n        formError: {\n          en: 'Something went wrong or your email is not confirm',\n          th: 'มีข้อผิดพลาดเกิดขึ้นหรืออีเมลของคุณไม่ได้รับการยืนยัน',\n        },\n        success: false,\n        resumes: null,\n        id,\n      },\n      headers,\n    );\n  }\n  messageContextStorage.setSuccessMessage(\n    errorActionMessage(context.userContext.language),\n    errorActionTitle(context.userContext.language),\n  );\n  headers.append('Set-Cookie', await messageContextStorage.commit());\n  return badRequest(\n    {\n      fieldErrors: null,\n      bodyFormData: null,\n      formError: {\n        en: 'Something went wrong or your email is not confirm',\n        th: 'มีข้อผิดพลาดเกิดขึ้นหรืออีเมลของคุณไม่ได้รับการยืนยัน',\n      },\n      success: false,\n      resumes: null,\n      id,\n    },\n    headers,\n  );\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const widthScreen = useScreenWidth();\n  const submit = useSubmit();\n  const formRef = useRef(null);\n\n  const { dictionaries, pagination } = request;\n\n  const [maxPageSize, setMaxPageSize] = useState(+(pagination?.max_page_size as string) || 10);\n  const [currentPage, setCurrentPage] = useState(+(pagination?.current_page as string) || 1);\n  const [currentToken, setCurrentToken] = useState(pagination?.current_token || undefined);\n\n  const handleSubmit = () => {\n    submit(formRef.current, { preventScrollReset: true });\n  };\n\n  return request.resumes.data.length > 0 ? (\n    <Box flexDirection='column' width='100%'>\n      <ResumesComponent\n        actionData={actionData as ListResumeResponse}\n        resumes={request.resumes.data}\n        dictionaries={dictionaries}\n      />\n\n      {pagination?.maxPages && pagination?.maxPages > 1 && (\n        <Form\n          method='GET'\n          style={{ width: '100%', margin: widthScreen > 1280 ? '24px 0' : '16px 0' }}\n          onChange={handleSubmit}\n          ref={formRef}\n          preventScrollReset\n        >\n          <Pagination\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage}\n            setCurrentToken={setCurrentToken}\n            paginationRange={pagination?.paginationRange as IPaginationRange[]}\n            maxPages={pagination?.maxPages}\n            maxPageSize={maxPageSize}\n            setMaxPageSize={setMaxPageSize}\n            handleSubmit={handleSubmit}\n            widthScreen={widthScreen}\n          />\n          <input type='hidden' name='current_page' value={currentPage} />\n          <input type='hidden' name='current_token' value={currentToken} />\n          <input type='hidden' name='max_pages' value={pagination?.maxPages} />\n        </Form>\n      )}\n    </Box>\n  ) : (\n    <CreateEntityCard />\n  );\n}\n", "import { Form, Link, useSubmit } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useState } from 'react';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport Button from '~/components/common/Button';\nimport { Icon } from '~/components/common/Icon';\nimport SvgAttention from '~/components/common/Icons/Attention';\nimport { Switcher } from '~/components/common/Switcher';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport ModalConfirmDelete from '~/components/entities/ModalConfirmDelete';\nimport { useApp, useCheckIncompleteEntityInList, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { ListResumeResponse } from '~/types/interfaces/iForms';\nimport { DEFAULT_USER_AVATAR } from '~/utils/constants';\nimport {\n  calculateAge,\n  calculateTotalDurationWorkExperience,\n  checkCompleteness,\n  getImageUrl,\n  getSalary,\n  getValueLang,\n} from '~/utils/helpers';\n\nimport { BoxCard } from '../../../common/Card';\nimport { BoxButtons, BoxControl, BoxHeading, DataBox, Field, HeadingInformation } from './styles';\n\nexport const ResumesComponent = memo(\n  ({\n    resumes,\n    dictionaries,\n    actionData,\n  }: {\n    resumes?: Resume[] | null;\n    dictionaries?: IDictionaries;\n    actionData?: ListResumeResponse;\n  }): JSX.Element => {\n    const { theme, t, userContext } = useApp();\n    const widthScreen = useScreenWidth();\n\n    const submit = useSubmit();\n\n    const handleChangeForm = (event: React.FormEvent<HTMLFormElement>, resumeId?: string) => {\n      event.preventDefault();\n      const action = (event.target as HTMLInputElement).name;\n\n      const formElement = event.currentTarget as HTMLFormElement;\n\n      if (action === 'published') {\n        submit(formElement, { preventScrollReset: true });\n      }\n    };\n\n    const [visibleDelete, setVisibleDelete] = useState(false);\n    const [deleteSelectedId, setSelectedId] = useState('');\n\n    const handleClickDelete = (id?: string) => {\n      setSelectedId(id || '');\n      setVisibleDelete(true);\n    };\n\n    const hasIncompleteResume = useCheckIncompleteEntityInList(resumes);\n\n    return (\n      <Box\n        flexDirection='column'\n        width='100%'\n        gap={widthScreen > 1024 ? '24px' : '16px'}\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        {/* <Heading variant='resumes' title={t('user:my_resumes')} /> */}\n\n        {hasIncompleteResume && (\n          <BoxInformation\n            variant={BoxInformationEnum.warning}\n            title={t('user:you_have_incomplete_resumes')}\n            flexDirection='column'\n          />\n        )}\n\n        {resumes?.map((resume) => (\n          <BoxCard variant={VariantCardEnum.userCard} key={resume.id}>\n            <Link key={resume.id} to={resume?.id || '#'}>\n              <BoxHeading>\n                <img\n                  src={\n                    resume?.general_information?.photo_uri\n                      ? getImageUrl(resume?.general_information?.photo_uri)\n                      : DEFAULT_USER_AVATAR\n                  }\n                  alt='avatar'\n                />\n                {!checkCompleteness(resume, null) && <SvgAttention />}\n\n                <HeadingInformation>\n                  <Text className='title' variant={TextVariantEnum.textHeading2}>\n                    {resume.job_position?.position}\n                  </Text>\n                  <Text\n                    variant={TextVariantEnum.textBody1medium}\n                    color={theme.user.descriptionTextColor}\n                  >\n                    {getValueLang(resume.job_position?.specialization_name, userContext.language)}\n                  </Text>\n\n                  {(resume.job_position?.salary_fixed ||\n                    (resume.job_position?.salary_from && resume.job_position?.salary_to)) && (\n                    <Box>\n                      {resume.job_position?.salary_from && resume.job_position?.salary_to ? (\n                        <Text className='price' variant={TextVariantEnum.textHeading3}>\n                          {resume.job_position?.salary_from} - {resume.job_position?.salary_to}\n                          &nbsp;\n                          {getSalary(\n                            resume.job_position.currency_name?.en,\n                            resume.job_position.salary_payout_period_name?.en,\n                            userContext.language,\n                          )}\n                        </Text>\n                      ) : (\n                        <Text className='price' variant={TextVariantEnum.textHeading3}>\n                          {resume.job_position?.salary_fixed}&nbsp;\n                          {getSalary(\n                            resume.job_position.currency_name?.en,\n                            resume.job_position.salary_payout_period_name?.en,\n                            userContext.language,\n                          )}\n                        </Text>\n                      )}\n                    </Box>\n                  )}\n                </HeadingInformation>\n              </BoxHeading>\n            </Link>\n\n            <DataBox>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:district')}\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(resume.location?.city_name, userContext.language)}\n                </Text>\n              </Field>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:age')}\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {calculateAge(resume?.general_information?.birthdate?.en)}\n                </Text>\n              </Field>\n              <Field>\n                <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n                  {t('user:work_experience')}\n                </Text>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {calculateTotalDurationWorkExperience(\n                    resume?.total_work_experience_in_months,\n                    userContext.language,\n                  )}{' '}\n                </Text>\n              </Field>\n            </DataBox>\n\n            <BoxControl>\n              <Form\n                method='PATCH'\n                onChange={(event) => handleChangeForm(event, resume?.id)} // Pass resumeId to handleChangeForm\n                preventScrollReset\n              >\n                <input type='hidden' name='id' value={resume?.id} />\n                <input type='hidden' name='action' value='published' />\n                <input type='hidden' name='publish' value={resume?.published ? 'false' : 'true'} />\n                <input\n                  type='hidden'\n                  name='checkFields'\n                  value={checkCompleteness(resume)?.toString()}\n                />\n\n                <Switcher\n                  checked={Boolean(resume?.published)}\n                  htmlLabel={resume?.id}\n                  name='published'\n                  variant='default'\n                  checkedLabel={t('user:published')}\n                  unCheckedLabel={t('user:published')}\n                  control\n                />\n              </Form>\n\n              <BoxButtons>\n                <Button\n                  className='icon'\n                  priority='secondary'\n                  onlyIcon\n                  onClick={() => handleClickDelete(resume?.id)}\n                >\n                  <Icon name={IconEnum.cart} color={theme.user.iconColor} />\n                </Button>\n\n                <Form method='POST' preventScrollReset style={{ width: 'fit-content' }}>\n                  <input type='hidden' name='id' value={resume?.id} />\n                  <Button\n                    type='submit'\n                    className='icon'\n                    priority='secondary'\n                    onlyIcon\n                    value='copy'\n                    name='action'\n                  >\n                    <Icon name={IconEnum.copy} color={theme.user.iconColor} />\n                  </Button>\n                </Form>\n\n                <Link key={resume?.id} to={resume?.id || '#'}>\n                  <Button className='icon' priority='secondary' onlyIcon>\n                    <Icon name={IconEnum.view} color={theme.user.iconColor} />\n                  </Button>\n                </Link>\n              </BoxButtons>\n            </BoxControl>\n          </BoxCard>\n        ))}\n        <ModalConfirmDelete\n          id={deleteSelectedId}\n          visibility={visibleDelete}\n          setVisibility={setVisibleDelete}\n        />\n      </Box>\n    );\n  },\n);\n", "import styled from 'styled-components';\n\nimport { FONT_SIZES_DESC, LINE_HEIGHTS_DESC } from '~/components/common/Text';\n\nexport const BoxHeading = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 16px;\n  align-items: flex-start;\n  padding-bottom: 16px;\n  border-bottom: 1px solid ${({ theme }) => theme.user.borderColor};\n  position: relative;\n  img {\n    border-radius: 50%;\n    width: 64px;\n    height: 64px;\n    object-fit: cover;\n  }\n  svg {\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n`;\n\nexport const HeadingInformation = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  gap: 4px;\n\n  @media (min-width: 768px) {\n    gap: 8px;\n    .title {\n      font-size: ${FONT_SIZES_DESC.textHeading3};\n      line-height: ${LINE_HEIGHTS_DESC.textHeading3};\n    }\n  }\n`;\n\nexport const DataBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 16px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${({ theme }) => theme.user.borderColor};\n  @media (min-width: 768px) {\n    gap: 32px;\n  }\n`;\n\nexport const Field = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const BoxControl = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 768px) {\n    flex-direction: row;\n    form {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n  }\n`;\n\nexport const SwitcherBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport const BoxLabel = styled.div`\n  cursor: pointer;\n`;\n\nexport const BoxButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 16px;\n  padding-top: 16px;\n  margin-top: 16px;\n  justify-content: center;\n  border-top: 1px solid ${({ theme }) => theme.user.borderColor};\n  @media (min-width: 768px) {\n    padding-top: 8px;\n    margin: 0;\n    border: none;\n  }\n`;\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "ResumesComponent", "memo", "resumes", "dictionaries", "actionData", "theme", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "submit", "useSubmit", "handleChangeForm", "event", "resumeId", "preventDefault", "action", "target", "name", "formElement", "currentTarget", "preventScrollReset", "visibleDelete", "setVisibleDelete", "useState", "deleteSelectedId", "setSelectedId", "handleClickDelete", "id", "hasIncompleteResume", "useCheckIncompleteEntityInList", "motion", "div", "opacity", "BoxInformationEnum", "warning", "map", "resume", "VariantCardEnum", "userCard", "general_information", "photo_uri", "getImageUrl", "DEFAULT_USER_AVATAR", "checkCompleteness", "TextVariantEnum", "textHeading2", "job_position", "position", "textBody1medium", "user", "descriptionTextColor", "getValueLang", "specialization_name", "language", "salary_fixed", "salary_from", "salary_to", "textHeading3", "getSalary", "currency_name", "en", "salary_payout_period_name", "textBody2", "textBody2medium", "location", "city_name", "calculateAge", "birthdate", "calculateTotalDurationWorkExperience", "total_work_experience_in_months", "published", "toString", "Boolean", "IconEnum", "cart", "iconColor", "width", "copy", "view", "import_jsx_dev_runtime", "BoxPagination", "styled", "div", "withConfig", "displayName", "componentId", "request", "useLoaderData", "actionData", "useActionData", "widthScreen", "useScreenWidth", "submit", "useSubmit", "formRef", "useRef", "dictionaries", "pagination", "maxPageSize", "setMaxPageSize", "useState", "max_page_size", "currentPage", "setCurrentPage", "current_page", "currentToken", "setCurrentToken", "current_token", "undefined", "handleSubmit", "current", "preventScrollReset", "resumes", "data", "length", "maxPages", "width", "margin", "paginationRange"]
}
