{
  "version": 3,
  "sources": ["../../../../app/routes/user/vacancy.create.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/VacancyCreate.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { CompaniesApi } from 'shared/v2/companies';\nimport type { Vacancy, VacancyPage } from 'shared/v2/vacancies';\nimport { VacanciesApi } from 'shared/v2/vacancies';\n\nimport { VacancyCreate } from '~/components/pages/User/Vacancies/Vacancy/VacancyCreate';\nimport { getMessageContext } from '~/storages/message.server';\nimport { getUserContextStorage } from '~/storages/userContext.server';\nimport type { IBodyFormData, IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { collectData } from '~/utils/helpers.client';\nimport { createVacancyMessage, createVacancyTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validateDescription,\n  validateEmail,\n  validatePhone,\n  validateRequireField,\n  validateThaiOrEnglish,\n  validateUnknownString,\n} from '~/utils/validations';\n\nexport const loader = async ({ context, request, params }: LoaderArgs) => {\n  if (!context.userContext.user.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  const clientVacancies = ClientFactory.createClient(VacanciesApi, context.session);\n  const clientCompanies = ClientFactory.createClient(CompaniesApi, context.session);\n\n  const url = new URL(request.url);\n  const step = Number(url.searchParams.get('step') ?? '1');\n\n  const userContextStorage = await getUserContextStorage(request);\n  const userContext = userContextStorage.getUserContext();\n\n  try {\n    const vacancyId: string = params.id || userContext.forms?.vacancy || '';\n\n    const [\n      genders,\n      specializations,\n      location,\n      employment,\n      workfeatures,\n      payoutPeriods,\n      currency,\n      sources,\n      languages,\n      employeeNumbers,\n      countries,\n      emailNotificationsSettings,\n      requirementsLevel,\n      complianceOfRequirements,\n      educationLevel,\n      yearsOfExperience,\n      languageLevel,\n      skills,\n      responseCanBeDoneBy,\n      drivingLicenses,\n      languagesOfNotify,\n      companies,\n      vacancy,\n    ] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationsMap,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      context.references.payoutPeriodsMap,\n      context.references.currencyMap,\n      context.references.sourceMap,\n      context.references.languagesMap,\n      context.references.employeeNumbersMap,\n      context.references.countriesMap,\n      context.references.emailNotificationsSettingsMap,\n      context.references.requirementsLevelMap,\n      context.references.complianceOfRequirementsMap,\n      context.references.educationLevelMap,\n      context.references.yearsOfExperienceMap,\n      context.references.languageLevelMap,\n      context.references.skillsMap,\n      context.references.responseCanBeDoneByMap,\n      context.references.drivingLicensesMap,\n      context.references.languagesOfNotify,\n      clientCompanies.getCompanies({ only_my: true }),\n      vacancyId ? clientVacancies.getVacancy({ id: vacancyId }) : null,\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n      employment: employment.ToArray(),\n      workfeatures: workfeatures.ToArray(),\n      payoutPeriods: payoutPeriods.ToArray(),\n      currency: currency.ToArray(),\n      sources: sources.ToArray(),\n      languages: languages.ToArray(),\n      employeeNumbers: employeeNumbers.ToArray(),\n      countries: countries.ToArray(),\n      emailNotificationsSettings: emailNotificationsSettings.ToArray(),\n      requirementsLevel: requirementsLevel.ToArray(),\n      complianceOfRequirements: complianceOfRequirements.ToArray(),\n      educationLevel: educationLevel.ToArray(),\n      yearsOfExperience: yearsOfExperience.ToArray(),\n      languageLevel: languageLevel.ToArray(),\n      skills: skills.ToArray(),\n      responseCanBeDoneBy: responseCanBeDoneBy.ToArray(),\n      drivingLicenses: drivingLicenses.ToArray(),\n      languagesOfNotify: languagesOfNotify.ToArray(),\n    };\n\n    return json({ step, vacancy, dictionaries, companies, vacancyId });\n  } catch (e) {\n    const updateUserContext = {\n      ...userContext,\n      forms: {\n        ...userContext.forms,\n        vacancy: '',\n      },\n    };\n    const headers: HeadersInit = new Headers();\n\n    userContextStorage.setUserContext(updateUserContext);\n    headers.append('Set-Cookie', await userContextStorage.commit());\n    return badRequest(\n      {\n        step: 1,\n        formError: null,\n        success: false,\n        vacancy: null,\n        companies: {\n          data: [],\n        },\n        vacancyId: '',\n        dictionaries: {},\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context, params }: ActionArgs) => {\n  const text = await request.text();\n  const parsedData = qs.parse(text);\n  const { step, action, ...data } = qs.parse(text);\n  const nameCard = data?.nameCard;\n  const clientVacancies = ClientFactory.createClient(VacanciesApi, context.session);\n  const userContextStorage = await getUserContextStorage(request);\n  const userContext = userContextStorage.getUserContext();\n  const messageContextStorage = await getMessageContext(request);\n\n  const vacancyId: string = params.id || userContext.forms?.vacancy || '';\n  const bodyFormData: IBodyFormData = {\n    id: vacancyId || '',\n  };\n\n  if (action === 'previous') {\n    const nextPage = Number(step) - 1;\n\n    return redirect(`?step=${nextPage}`);\n  }\n\n  if (nameCard === 'vacancy_page') {\n    try {\n      const fieldErrors = {\n        specialization_id: validateRequireField(parsedData.specialization?.toString()),\n        position: validateRequireField(parsedData.position?.toString()),\n        employment_type_ids: validateRequireField(parsedData.employment?.toString()),\n        work_feature_ids: validateRequireField(parsedData.work_features?.toString()),\n        salary_payout_period_id: validateRequireField(parsedData.salary_payout_period?.toString()),\n        currency_id: validateRequireField(parsedData.currency?.toString()),\n        description: validateDescription(parsedData.description?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, bodyFormData, formError: null });\n      }\n\n      bodyFormData.vacancy_page = {\n        specialization_id: parsedData.specialization?.toString() || null,\n        position: parsedData.position?.toString() || null,\n        employment_type_ids: parsedData.employment?.toString()\n          ? parsedData.employment?.toString()?.split(',')\n          : [],\n        work_feature_ids: parsedData.work_features?.toString()\n          ? parsedData.work_features?.toString()?.split(',')\n          : [],\n        salary_payout_period_id: parsedData.salary_payout_period?.toString() || null,\n        salary_fixed: Number(parsedData.fixed?.toString()) || 0,\n        salary_from: Number(parsedData.from?.toString()) || 0,\n        salary_to: Number(parsedData.to?.toString()) || 0,\n        currency_id: parsedData.currency?.toString() || null,\n        description: parsedData.description?.toString() || '',\n      };\n\n      let createVacancy = {};\n\n      if (vacancyId) {\n        createVacancy = await clientVacancies.patchVacancy({\n          id: vacancyId,\n          vacancy: bodyFormData,\n        });\n\n        if ('error' in createVacancy) {\n          return badRequest({\n            fieldErrors: validateUnknownString(createVacancy.error as string),\n            formError: null,\n          });\n        }\n\n        const nextPage = Number(step) + 1;\n\n        return redirect(`?step=${nextPage}`);\n      }\n\n      createVacancy = await clientVacancies.postVacancies({\n        vacancy: {\n          vacancy_page: bodyFormData.vacancy_page as VacancyPage,\n        } as Vacancy,\n      });\n\n      if ('error' in createVacancy) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createVacancy.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      const userContextStorage = await getUserContextStorage(request);\n      const userContext = userContextStorage.getUserContext();\n\n      userContext.forms = {\n        ...userContext.forms,\n        vacancy: (createVacancy as Vacancy).id,\n      };\n      const headers: HeadersInit = new Headers();\n\n      userContextStorage.setUserContext(userContext);\n\n      headers.append('Set-Cookie', await userContextStorage.commit());\n\n      return redirect(`?step=${nextPage}`, {\n        headers,\n      });\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: 'Some data entered incorrectly',\n      });\n    }\n  }\n\n  if (nameCard === 'contacts') {\n    try {\n      const fieldErrors = {\n        company_id: validateRequireField(parsedData.company_id?.toString()),\n        contact_phone: validatePhone(parsedData.contact_phone?.toString()),\n        first_name: validateRequireField(parsedData.first_name?.toString()),\n        last_name: validateRequireField(parsedData.last_name?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, bodyFormData, formError: null });\n      }\n\n      bodyFormData.contacts = {\n        company_id: parsedData.company_id?.toString() || null,\n        contact_phone: parsedData.contact_phone?.toString() || null,\n        first_name: parsedData.first_name?.toString() || null,\n        last_name: parsedData.last_name?.toString() || null,\n        source_of_discovery_id: parsedData.source?.toString() || null,\n      };\n\n      const createVacancy = await clientVacancies.patchVacancy({\n        id: vacancyId,\n        vacancy: bodyFormData,\n      });\n\n      if ('error' in createVacancy) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createVacancy.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: 'Some data entered incorrectly',\n      });\n    }\n  }\n\n  if (nameCard === 'location') {\n    try {\n      const fieldErrors = {\n        country_id: validateRequireField(parsedData.country?.toString()),\n        region_id: validatePhone(parsedData.region?.toString()),\n        city_id: validateRequireField(parsedData.city?.toString()),\n        language_of_notify_id: validateRequireField(parsedData.language_of_notify?.toString()),\n        number_of_employees_id: validateRequireField(parsedData.number_of_employees?.toString()),\n        address: validateThaiOrEnglish(parsedData.address?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, bodyFormData, formError: null });\n      }\n\n      bodyFormData.location = {\n        country_id: parsedData.country?.toString() || null,\n        region_id: parsedData.region?.toString() || null,\n        city_id: parsedData.city?.toString() || null,\n        language_of_notify_id: parsedData.language_of_notify?.toString() || null,\n        number_of_employees_id: parsedData.number_of_employees?.toString() || null,\n        address: parsedData.address?.toString() || '',\n      };\n\n      const createVacancy = await clientVacancies.patchVacancy({\n        id: vacancyId,\n        vacancy: bodyFormData,\n      });\n\n      if ('error' in createVacancy) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createVacancy.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: 'Some data entered incorrectly',\n      });\n    }\n  }\n\n  if (nameCard === 'requirements') {\n    try {\n      const education = collectData(\n        context,\n        { education_id: (parsedData.education as string[]) || null },\n        { level_id: (parsedData.education_level as string[]) || null },\n        { specialization_id: (parsedData.education_specialization as string[]) || null },\n      );\n\n      const work_experience = collectData(\n        context,\n        { work_experience_id: (parsedData.workExperience as string[]) || null },\n        { period_of_work_id: (parsedData.periodOfWork as string[]) || null },\n        { specialization_id: (parsedData.workExperience_specialization as string[]) || null },\n      );\n\n      const language = collectData(\n        context,\n        { language_id: (parsedData.language as string[]) || null },\n        { language_knowledge_id: (parsedData.language_knowledge as string[]) || null },\n        { level_id: (parsedData.language_level as string[]) || null },\n      );\n\n      bodyFormData.requirements = {\n        education: education || [],\n        work_experience: work_experience || [],\n        language: language || [],\n      };\n\n      const createVacancy = await clientVacancies.patchVacancy({\n        id: vacancyId,\n        vacancy: bodyFormData,\n      });\n\n      if ('error' in createVacancy) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createVacancy.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: 'Some data entered incorrectly',\n      });\n    }\n  }\n\n  if (nameCard === 'responses_vacancy') {\n    try {\n      const fieldErrors = {\n        response_can_be_done_by_id: validateRequireField(parsedData.canBeDoneBy?.toString()),\n        email_for_the_responses: validateEmail(parsedData.email?.toString()),\n        get_email_notifications_for_id: validateRequireField(\n          parsedData.notificationsSettings?.toString(),\n        ),\n        compliance_of_requirements_id: validateRequireField(\n          parsedData.complianceOfRequirements?.toString(),\n        ),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, bodyFormData, formError: null });\n      }\n\n      bodyFormData.responses_vacancy = {\n        response_can_be_done_by_id: parsedData.canBeDoneBy?.toString() || null,\n        email_for_the_responses: parsedData.email?.toString() || null,\n        get_email_notifications_for_id: parsedData.notificationsSettings?.toString() || null,\n        compliance_of_requirements_id: parsedData.complianceOfRequirements?.toString() || null,\n        show_phone_number: Boolean(parsedData.show_phone?.toString()) || null,\n        show_email: Boolean(parsedData.show_email?.toString()) || null,\n      };\n\n      const createVacancy = await clientVacancies.patchVacancy({\n        id: vacancyId,\n        vacancy: bodyFormData,\n      });\n\n      if ('error' in createVacancy) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createVacancy.error as string),\n          formError: null,\n        });\n      }\n\n      const nextPage = Number(step) + 1;\n\n      return redirect(`?step=${nextPage}`);\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: 'Some data entered incorrectly',\n      });\n    }\n  }\n\n  if (nameCard === 'additional_skills') {\n    try {\n      const fieldErrors = {\n        other_license: validateThaiOrEnglish(parsedData.other_license as string),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.additional_skills = {\n        skill_ids: parsedData.skills?.toString() ? parsedData.skills?.toString()?.split(',') : null,\n        driver_license_ids: parsedData.driver_license?.toString()\n          ? parsedData.driver_license?.toString()?.split(',')\n          : [],\n        other_licenses: parsedData.other_licenses?.toString()\n          ? parsedData.other_licenses?.toString()?.split(',')\n          : [],\n      };\n\n      const createVacancy = await clientVacancies.patchVacancy({\n        id: vacancyId,\n        vacancy: bodyFormData,\n      });\n\n      if ('error' in createVacancy) {\n        return badRequest({\n          fieldErrors: validateUnknownString(createVacancy.error as string),\n          formError: null,\n        });\n      }\n\n      const userContextStorage = await getUserContextStorage(request);\n      const userContext = userContextStorage.getUserContext();\n\n      userContext.forms = {\n        ...userContext.forms,\n        vacancy: '',\n      };\n      const headers: HeadersInit = new Headers();\n\n      userContextStorage.setUserContext(userContext);\n      messageContextStorage.setSuccessMessage(\n        createVacancyMessage(context.userContext.language),\n        createVacancyTitle(context.userContext.language),\n      );\n\n      headers.append('Set-Cookie', await userContextStorage.commit());\n      headers.append('Set-Cookie', await messageContextStorage.commit());\n\n      return redirect(`/user/vacancy`, {\n        headers,\n      });\n    } catch (error) {\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: 'Some data entered incorrectly',\n      });\n    }\n  }\n\n  return badRequest({\n    fieldErrors: null,\n    formError: 'Some data entered incorrectly',\n  });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  const { step, dictionaries, vacancyId } = request;\n\n  const companies = request?.companies?.data;\n  const vacancy = request?.vacancy;\n\n  return (\n    <VacancyCreate\n      step={step}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n      companies={companies}\n      vacancyId={vacancyId}\n      actionData={actionData as IUpdateVacancy}\n    />\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { memo } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport ModalCompanyCreated from '~/components/entities/ModalCompanyCreated';\nimport { useModalForParams } from '~/hooks';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport { Wrapper } from '../styles';\nimport VacancyAdditionalEdit from './components/VacancyAdditional/VacancyAdditionalEdit';\nimport VacancyComponentCardEdit from './components/VacancyComponentCard/VacancyComponentCardEdit';\nimport VacancyContactsEdit from './components/VacancyContacts/VacancyContactsEdit';\nimport VacancyLocationEdit from './components/VacancyLocation/VacancyLocationEdit';\nimport VacancyRequirementsEdit from './components/VacancyRequirements/VacancyRequirementsEdit';\nimport VacancyResponsesEdit from './components/VacancyResponses/VacancyResponsesEdit';\n\nexport const VacancyCreate = memo(\n  ({\n    step,\n    vacancy,\n    dictionaries,\n    companies,\n    vacancyId,\n    actionData,\n  }: {\n    step?: number;\n    vacancy?: Vacancy | null;\n    dictionaries?: IDictionaries;\n    companies?: Company[];\n    vacancyId?: string;\n    actionData?: IUpdateVacancy;\n  }): JSX.Element => {\n    const { visibilityModal, setVisibilityModal } = useModalForParams('create');\n\n    return (\n      <Wrapper>\n        {step === 1 && (\n          <Form method='POST' style={{ width: '100%' }}>\n            <input name='step' type='hidden' value={step} />\n            <VacancyComponentCardEdit\n              state='create'\n              vacancy={vacancy}\n              dictionaries={dictionaries}\n              step={step}\n              actionData={actionData}\n            />\n          </Form>\n        )}\n        {step === 2 && (\n          <Form method='PATCH' style={{ width: '100%' }}>\n            <input name='step' type='hidden' value={step} />\n            <input name='vacancy_id' type='hidden' value={vacancyId} />\n            <VacancyContactsEdit\n              state='create'\n              vacancy={vacancy}\n              dictionaries={dictionaries}\n              step={step}\n              companies={companies}\n              actionData={actionData}\n            />\n          </Form>\n        )}\n        {step === 3 && (\n          <Form method='PATCH' style={{ width: '100%' }}>\n            <input name='step' type='hidden' value={step} />\n            <input name='vacancy_id' type='hidden' value={vacancyId} />\n            <VacancyLocationEdit\n              state='create'\n              vacancy={vacancy}\n              dictionaries={dictionaries}\n              step={step}\n              actionData={actionData}\n            />\n          </Form>\n        )}\n        {step === 4 && (\n          <Form method='PATCH' style={{ width: '100%' }}>\n            <input name='step' type='hidden' value={step} />\n            <input name='vacancy_id' type='hidden' value={vacancyId} />\n            <VacancyRequirementsEdit\n              state='create'\n              vacancy={vacancy}\n              dictionaries={dictionaries}\n              step={step}\n              actionData={actionData}\n            />\n          </Form>\n        )}\n        {step === 5 && (\n          <Form method='PATCH' style={{ width: '100%' }}>\n            <input name='step' type='hidden' value={step} />\n            <input name='vacancy_id' type='hidden' value={vacancyId} />\n            <VacancyResponsesEdit\n              state='create'\n              vacancy={vacancy}\n              dictionaries={dictionaries}\n              step={step}\n              actionData={actionData}\n            />\n          </Form>\n        )}\n        {step === 6 && (\n          <Form method='PATCH' style={{ width: '100%' }}>\n            <input name='step' type='hidden' value={step} />\n            <input name='vacancy_id' type='hidden' value={vacancyId} />\n            <VacancyAdditionalEdit\n              state='create'\n              vacancy={vacancy}\n              dictionaries={dictionaries}\n              step={step}\n              actionData={actionData}\n            />\n          </Form>\n        )}\n\n        <ModalCompanyCreated visibility={visibilityModal} setVisibility={setVisibilityModal} />\n      </Wrapper>\n    );\n  },\n);\n"],
  "mappings": "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",
  "names": ["import_react", "VacancyCreate", "memo", "step", "vacancy", "dictionaries", "companies", "vacancyId", "actionData", "visibilityModal", "setVisibilityModal", "useModalForParams", "width", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "step", "dictionaries", "vacancyId", "companies", "data", "vacancy"]
}
