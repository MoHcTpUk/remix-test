{
  "version": 3,
  "sources": ["../../../../app/routes/user/vacancy.$id.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/index.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyAdditional/index.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyAdditional/VacancyAdditionalData.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyComponentCard/index.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyComponentCard/VacancyComponentCardData.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyContacts/index.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyContacts/VacancyContactsData.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyLocation/index.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyLocation/VacancyLocationData.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyRequirements/index.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyRequirements/VacancyRequirementsData.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyResponses/index.tsx", "../../../../app/components/pages/User/Vacancies/Vacancy/components/VacancyResponses/VacancyResponsesData.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json, redirect } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { CompaniesApi } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\nimport { VacanciesApi } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport VacancyComponent from '~/components/pages/User/Vacancies/Vacancy';\nimport { useApp, useCheckIncompleteness, useScreenWidth } from '~/hooks';\nimport { getMessageContext } from '~/storages/message.server';\nimport { getUserContextStorage } from '~/storages/userContext.server';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport type { IError } from '~/types/interfaces/IError';\nimport type { IBodyFormData, IUpdateVacancy } from '~/types/interfaces/iForms';\nimport { collectData } from '~/utils/helpers';\nimport { errorActionMessage, errorActionTitle } from '~/utils/messages';\nimport { badRequest } from '~/utils/request.server';\nimport {\n  validateDescription,\n  validateEmail,\n  validatePhone,\n  validateRequireField,\n  validateThaiOrEnglish,\n  validateUnknownString,\n} from '~/utils/validations';\n\nexport const loader = async ({ params, context, request }: LoaderArgs) => {\n  if (!context.userContext.user.isAuthenticated) {\n    return redirect('/', {\n      status: 302,\n    });\n  }\n\n  const clientVacancy = ClientFactory.createClient(VacanciesApi, context.session);\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n\n  try {\n    const vacancyId = params.id;\n\n    const [\n      genders,\n      specializations,\n      location,\n      employment,\n      workfeatures,\n      payoutPeriods,\n      currency,\n      sources,\n      languages,\n      employeeNumbers,\n      countries,\n      emailNotificationsSettings,\n      requirementsLevel,\n      complianceOfRequirements,\n      educationLevel,\n      yearsOfExperience,\n      languageLevel,\n      skills,\n      responseCanBeDoneBy,\n      drivingLicenses,\n      languagesOfNotify,\n      vacancy,\n      companies,\n    ] = await Promise.all([\n      context.references.gendersMap,\n      context.references.specializationsMap,\n      context.references.locationMap,\n      context.references.employmentsMap,\n      context.references.workFeaturesMap,\n      context.references.payoutPeriodsMap,\n      context.references.currencyMap,\n      context.references.sourceMap,\n      context.references.languagesMap,\n      context.references.employeeNumbersMap,\n      context.references.countriesMap,\n      context.references.emailNotificationsSettingsMap,\n      context.references.requirementsLevelMap,\n      context.references.complianceOfRequirementsMap,\n      context.references.educationLevelMap,\n      context.references.yearsOfExperienceMap,\n      context.references.languageLevelMap,\n      context.references.skillsMap,\n      context.references.responseCanBeDoneByMap,\n      context.references.drivingLicensesMap,\n      context.references.languagesOfNotify,\n      clientVacancy.getVacancy({ id: vacancyId || '' }),\n      clientCompany.getCompanies({ only_my: true }),\n    ]);\n\n    const dictionaries = {\n      genders: genders.ToArray(),\n      specializations: specializations.ToArray(),\n      location: location.ToArray(),\n      employment: employment.ToArray(),\n      workfeatures: workfeatures.ToArray(),\n      payoutPeriods: payoutPeriods.ToArray(),\n      currency: currency.ToArray(),\n      sources: sources.ToArray(),\n      languages: languages.ToArray(),\n      employeeNumbers: employeeNumbers.ToArray(),\n      countries: countries.ToArray(),\n      emailNotificationsSettings: emailNotificationsSettings.ToArray(),\n      requirementsLevel: requirementsLevel.ToArray(),\n      complianceOfRequirements: complianceOfRequirements.ToArray(),\n      educationLevel: educationLevel.ToArray(),\n      yearsOfExperience: yearsOfExperience.ToArray(),\n      languageLevel: languageLevel.ToArray(),\n      skills: skills.ToArray(),\n      responseCanBeDoneBy: responseCanBeDoneBy.ToArray(),\n      drivingLicenses: drivingLicenses.ToArray(),\n      languagesOfNotify: languagesOfNotify.ToArray(),\n    };\n\n    return json({ vacancy, companies, dictionaries });\n  } catch (e) {\n    console.log(e);\n    const messageContextStorage = await getMessageContext(request);\n\n    messageContextStorage.setErrorMessage(\n      errorActionMessage(context.userContext.language),\n      errorActionTitle(context.userContext.language),\n    );\n    const headers: HeadersInit = new Headers();\n\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n\n    return badRequest(\n      {\n        dictionaries: {},\n        companies: {\n          data: [],\n        },\n        vacancy: null,\n      },\n      headers,\n    );\n  }\n};\n\nexport const action = async ({ request, context, params }: ActionArgs) => {\n  const text = await request.text();\n  const parsedData = qs.parse(text);\n  const { action, ...data } = qs.parse(text);\n  const nameCard = data?.nameCard;\n  const client = ClientFactory.createClient(VacanciesApi, context.session);\n  const vacancyId = params?.id;\n  const bodyFormData: IBodyFormData = {\n    id: vacancyId || '',\n  };\n\n  let updateVacancy: Vacancy | IError = {};\n\n  if (nameCard === 'vacancy_page') {\n    try {\n      const fieldErrors = {\n        specialization_id: validateRequireField(parsedData.specialization?.toString()),\n        position: validateRequireField(parsedData.position?.toString()),\n        employment_type_ids: validateRequireField(parsedData.employment?.toString()),\n        work_feature_ids: validateRequireField(parsedData.work_features?.toString()),\n        salary_payout_period_id: validateRequireField(parsedData.salary_payout_period?.toString()),\n        currency_id: validateRequireField(parsedData.currency?.toString()),\n        description: validateDescription(parsedData.description?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.vacancy_page = {\n        specialization_id: parsedData.specialization?.toString() || null,\n        position: parsedData.position?.toString() || null,\n        employment_type_ids: parsedData.employment?.toString()\n          ? parsedData.employment?.toString()?.split(',')\n          : [],\n        work_feature_ids: parsedData.work_features?.toString()\n          ? parsedData.work_feature_ids?.toString()?.split(',')\n          : [],\n        salary_payout_period_id: parsedData.salary_payout_period?.toString() || null,\n        salary_fixed: Number(parsedData.fixed?.toString()) || 0,\n        salary_from: Number(parsedData.from?.toString()) || 0,\n        salary_to: Number(parsedData.to?.toString()) || 0,\n        currency_id: parsedData.currency?.toString() || null,\n        description: parsedData.description?.toString() || '',\n      };\n\n      updateVacancy = await client.patchVacancy({\n        id: vacancyId || '',\n        vacancy: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      return badRequest({\n        fieldErrors: error,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'contacts') {\n    try {\n      const fieldErrors = {\n        company_id: validateRequireField(parsedData.company_id?.toString()),\n        contact_phone: validatePhone(parsedData.contact_phone?.toString()),\n        first_name: validateRequireField(parsedData.first_name?.toString()),\n        last_name: validateRequireField(parsedData.last_name?.toString()),\n        address: validateThaiOrEnglish(parsedData.address?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.contacts = {\n        company_id: parsedData.company_id?.toString() || null,\n        contact_phone: parsedData.contact_phone?.toString() || null,\n        first_name: parsedData.first_name?.toString() || null,\n        last_name: parsedData.last_name?.toString() || null,\n        source_of_discovery_id: parsedData.source?.toString() || null,\n      };\n\n      updateVacancy = await client.patchVacancy({\n        id: vacancyId || '',\n        vacancy: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      console.log(error);\n      badRequest({\n        fieldErrors: error,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'location') {\n    try {\n      const fieldErrors = {\n        country_id: validateRequireField(parsedData.country?.toString()),\n        region_id: validatePhone(parsedData.region?.toString()),\n        city_id: validateRequireField(parsedData.city?.toString()),\n        language_of_notify_id: validateRequireField(parsedData.language_of_notify?.toString()),\n        number_of_employees_id: validateRequireField(parsedData.number_of_employees?.toString()),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.location = {\n        country_id: parsedData.country?.toString() || null,\n        region_id: parsedData.region?.toString() || null,\n        city_id: parsedData.city?.toString() || null,\n        language_of_notify_id: parsedData.language_of_notify?.toString() || null,\n        number_of_employees_id: parsedData.number_of_employees?.toString() || null,\n        address: parsedData.address?.toString() || '',\n      };\n\n      updateVacancy = await client.patchVacancy({\n        id: vacancyId || '',\n        vacancy: bodyFormData,\n      });\n    } catch (error) {\n      console.log(error);\n      // Handle the error\n      badRequest({\n        fieldErrors: error,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'requirements') {\n    try {\n      const education = collectData(\n        context,\n        { education_id: (parsedData.education as string[]) || null },\n        { level_id: (parsedData.education_level as string[]) || null },\n        { specialization_id: (parsedData.education_specialization as string[]) || null },\n      );\n\n      const work_experience = collectData(\n        context,\n        { work_experience_id: (parsedData.workExperience as string[]) || null },\n        { period_of_work_id: (parsedData.periodOfWork as string[]) || null },\n        { specialization_id: (parsedData.workExperience_specialization as string[]) || null },\n      );\n\n      const language = collectData(\n        context,\n        { language_id: (parsedData.language as string[]) || null },\n        { language_knowledge_id: (parsedData.language_knowledge as string[]) || null },\n        { level_id: (parsedData.language_level as string[]) || null },\n      );\n\n      bodyFormData.requirements = {\n        education: education || [],\n        work_experience: work_experience || [],\n        language: language || [],\n      };\n\n      updateVacancy = await client.patchVacancy({\n        id: vacancyId || '',\n        vacancy: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      console.log(error);\n      badRequest({\n        fieldErrors: error,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'responses_vacancy') {\n    try {\n      const fieldErrors = {\n        response_can_be_done_by_id: validateRequireField(parsedData.canBeDoneBy?.toString()),\n        email_for_the_responses: validateEmail(parsedData.email?.toString()),\n        get_email_notifications_for_id: validateRequireField(\n          parsedData.notificationsSettings?.toString(),\n        ),\n        compliance_of_requirements_id: validateRequireField(\n          parsedData.complianceOfRequirements?.toString(),\n        ),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.responses_vacancy = {\n        response_can_be_done_by_id: parsedData.canBeDoneBy?.toString() || null,\n        email_for_the_responses: parsedData.email?.toString() || null,\n        get_email_notifications_for_id: parsedData.notificationsSettings?.toString() || null,\n        compliance_of_requirements_id: parsedData.complianceOfRequirements?.toString() || null,\n        show_phone_number: Boolean(parsedData.show_phone?.toString()) || null,\n        show_email: Boolean(parsedData.show_email?.toString()) || null,\n      };\n\n      updateVacancy = await client.patchVacancy({\n        id: vacancyId || '',\n        vacancy: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      console.log(error);\n      badRequest({\n        fieldErrors: error,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if (nameCard === 'additional_skills') {\n    try {\n      const fieldErrors = {\n        other_license: validateThaiOrEnglish(parsedData.other_license as string),\n      };\n\n      if (Object.values(fieldErrors).some(Boolean)) {\n        return badRequest({ fieldErrors, formError: null, success: false });\n      }\n\n      bodyFormData.additional_skills = {\n        skill_ids: parsedData.skills?.toString() ? parsedData.skills?.toString()?.split(',') : null,\n        driver_license_ids: parsedData.driver_license?.toString()\n          ? parsedData.driver_license?.toString()?.split(',')\n          : [],\n        other_licenses: parsedData.other_licenses?.toString()\n          ? parsedData.other_licenses?.toString()?.split(',')\n          : [],\n      };\n\n      updateVacancy = await client.patchVacancy({\n        id: vacancyId || '',\n        vacancy: bodyFormData,\n      });\n    } catch (error) {\n      // Handle the error\n      console.log(error);\n      badRequest({\n        fieldErrors: error,\n        formError: {\n          en: 'Some data entered incorrectly',\n          th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n        },\n        success: false,\n      });\n    }\n  }\n\n  if ('error' in updateVacancy) {\n    return badRequest({\n      fieldErrors: validateUnknownString(updateVacancy.error as string),\n      formError: null,\n      success: false,\n    });\n  }\n\n  if (\n    (updateVacancy as IError)?.status?.includes('Internal Server Error') ||\n    ('status' in (updateVacancy as IError) &&\n      (updateVacancy as IError)?.status?.includes('Invalid request'))\n  ) {\n    return badRequest({\n      fieldErrors: null,\n      formError: {\n        en: 'Some data entered incorrectly',\n        th: 'ป้อนข้อมูลบางอย่างไม่ถูกต้อง',\n      },\n      success: false,\n    });\n  }\n\n  return json({ success: true, fieldErrors: null, formError: null });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n\n  const vacancy = request?.vacancy;\n  const actionData = useActionData<typeof action>();\n  const { companies } = request;\n  const { dictionaries } = request;\n  const { t } = useApp();\n  const widthScreen = useScreenWidth();\n  const incompleteness = useCheckIncompleteness(null, vacancy);\n\n  return (\n    <Box flexDirection='column' width='100%' gap={widthScreen > 1024 ? '24px' : '16px'}>\n      {incompleteness && (\n        <BoxInformation\n          variant={BoxInformationEnum.warning}\n          title={t('user:vacancy_is_incomplete')}\n          information={t(\n            'user:if_the_required_fields_are_not_filled_in_the_vacancy_then_it_will_not_be_placed_in_the_database',\n          )}\n          flexDirection='column'\n        />\n      )}\n\n      <VacancyComponent\n        vacancy={vacancy}\n        dictionaries={dictionaries}\n        companies={companies.data}\n        actionData={actionData as IUpdateVacancy}\n      />\n    </Box>\n  );\n}\n", "import { useEffect, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport VacancyAdditional from './components/VacancyAdditional';\nimport VacancyComponentCard from './components/VacancyComponentCard';\nimport VacancyContacts from './components/VacancyContacts';\nimport VacancyLocation from './components/VacancyLocation';\nimport VacancyRequirements from './components/VacancyRequirements';\nimport VacancyResponses from './components/VacancyResponses';\nimport { Wrapper } from './styles';\n\nexport default function VacancyComponent({\n  vacancy,\n  dictionaries,\n  actionData,\n  companies,\n}: {\n  vacancy: Vacancy | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateVacancy;\n  companies?: Company[];\n}) {\n  const [editCard, setEditCard] = useState(VacancyCardEnum.all);\n\n  useEffect(() => {\n    if (actionData?.success) setEditCard(VacancyCardEnum.all);\n  }, [vacancy]);\n\n  return (\n    <Wrapper>\n      <VacancyComponentCard\n        dictionaries={dictionaries}\n        vacancy={vacancy}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <VacancyContacts\n        dictionaries={dictionaries}\n        vacancy={vacancy}\n        companies={companies}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <VacancyLocation\n        dictionaries={dictionaries}\n        vacancy={vacancy}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <VacancyRequirements\n        dictionaries={dictionaries}\n        vacancy={vacancy}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <VacancyResponses\n        dictionaries={dictionaries}\n        vacancy={vacancy}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n      <VacancyAdditional\n        dictionaries={dictionaries}\n        vacancy={vacancy}\n        editCard={editCard}\n        setEditCard={setEditCard}\n        actionData={actionData}\n      />\n    </Wrapper>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { type Dispatch, type SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport VacancyAdditionalData from './VacancyAdditionalData';\nimport VacancyAdditionalEdit from './VacancyAdditionalEdit';\n\nexport default function VacancyAdditional({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  vacancy: Vacancy | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateVacancy;\n}) {\n  return editCard === VacancyCardEnum.additional ? (\n    <Form method='PATCH' style={{ width: '100%' }}>\n      <VacancyAdditionalEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        vacancy={vacancy}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <VacancyAdditionalData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\nimport { validate as uuidValidate } from 'uuid';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueFromDictionaries } from '~/utils/helpers';\n\nexport default function VacancyAdditionalData({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:additional_information')}\n      withEditButton\n      nameCard={VacancyCardEnum.additional}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      {vacancy?.additional_skills && (\n        <CardContainer\n          as={motion.div}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n        >\n          <DataField variant='custom' label={t('user:skills')}>\n            <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n              {vacancy?.additional_skills?.skill_ids?.map((item) => (\n                <BoxDataChips key={item}>\n                  <Text variant={TextVariantEnum.textBody2medium}>\n                    {uuidValidate(item || '')\n                      ? getValueFromDictionaries(dictionaries?.skills, item, userContext.language)\n                      : item}\n                  </Text>\n                </BoxDataChips>\n              ))}\n            </Box>\n          </DataField>\n          <DataField variant='custom' label={t('user:driver_license')}>\n            <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n              {vacancy?.additional_skills?.driver_license_ids?.map((item) => (\n                <BoxDataChips key={item}>\n                  <Text variant={TextVariantEnum.textBody2medium}>\n                    {getValueFromDictionaries(\n                      dictionaries?.drivingLicenses,\n                      item,\n                      userContext.language,\n                    )}\n                  </Text>\n                </BoxDataChips>\n              ))}\n            </Box>\n          </DataField>\n          <DataField variant='custom' label={t('user:other_licenses')}>\n            <Box flexDirection='row' flexWrap='wrap' gap='4px'>\n              {Array.isArray(vacancy?.additional_skills?.other_licenses)\n                ? vacancy?.additional_skills?.other_licenses?.map((item) => (\n                    <BoxDataChips key={item}>\n                      <Text variant={TextVariantEnum.textBody2medium}>{item}</Text>\n                    </BoxDataChips>\n                  ))\n                : vacancy?.additional_skills?.other_licenses && (\n                    <BoxDataChips>\n                      <Text variant={TextVariantEnum.textBody2medium}>\n                        {vacancy?.additional_skills?.other_licenses}\n                      </Text>\n                    </BoxDataChips>\n                  )}\n            </Box>\n          </DataField>\n        </CardContainer>\n      )}\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { type Dispatch, type SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport VacancyComponentCardData from './VacancyComponentCardData';\nimport VacancyComponentCardEdit from './VacancyComponentCardEdit';\n\nexport default function VacancyComponentCard({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  vacancy: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  actionData?: IUpdateVacancy;\n}) {\n  return editCard === VacancyCardEnum.vacancy ? (\n    <Form method='POST' style={{ width: '100%' }}>\n      <VacancyComponentCardEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        vacancy={vacancy}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <VacancyComponentCardData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxDataChips, CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueFromDictionaries, getValueLang } from '~/utils/helpers';\n\nexport default function VacancyComponentCardData({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:vacancy')}\n      withEditButton\n      nameCard={VacancyCardEnum.vacancy}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField\n          label={t('user:specialization')}\n          data={getValueLang(vacancy?.vacancy_page?.specialization_name, userContext.language)}\n        />\n        <DataField label={t('user:position')} data={vacancy?.vacancy_page?.position} />\n        <DataField variant='custom' label={t('user:employment')}>\n          <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n            {vacancy?.vacancy_page?.employment_type_names?.map((item) => (\n              <BoxDataChips key={item.en}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueLang(item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n        <DataField variant='custom' label={t('user:work_features')}>\n          <Box flexDirection='row' gap='4px' flexWrap='wrap'>\n            {vacancy?.vacancy_page?.work_feature_ids?.map((item) => (\n              <BoxDataChips key={item}>\n                <Text variant={TextVariantEnum.textBody2medium}>\n                  {getValueFromDictionaries(dictionaries?.workfeatures, item, userContext.language)}\n                </Text>\n              </BoxDataChips>\n            ))}\n          </Box>\n        </DataField>\n\n        <DataField\n          label={t('user:salary_fixed')}\n          data={vacancy?.vacancy_page?.salary_fixed?.toString() || ''}\n        />\n\n        <DataField\n          label={t('user:salary')}\n          data={\n            vacancy?.vacancy_page?.salary_from\n              ? `${t('user:from')} ${vacancy?.vacancy_page?.salary_from || ''} - ${\n                  vacancy?.vacancy_page?.salary_to || ''\n                }`\n              : ''\n          }\n        />\n\n        <DataField\n          label={t('user:currency')}\n          data={getValueFromDictionaries(\n            dictionaries?.currency,\n            vacancy?.vacancy_page?.currency_id,\n            userContext.language,\n          )}\n        />\n        <DataField label={t('user:description')} data={vacancy?.vacancy_page?.description} />\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { type Dispatch, type SetStateAction } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport VacancyContactsData from './VacancyContactsData';\nimport VacancyContactsEdit from './VacancyContactsEdit';\n\nexport default function VacancyContacts({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n  companies,\n  actionData,\n}: {\n  vacancy: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  companies?: Company[];\n  actionData?: IUpdateVacancy;\n}) {\n  return editCard === VacancyCardEnum.employer ? (\n    <Form method='PATCH' style={{ width: '100%' }}>\n      <VacancyContactsEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        vacancy={vacancy}\n        dictionaries={dictionaries}\n        companies={companies}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <VacancyContactsData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n      companies={companies}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport type { ResumeCardEnum } from '~/types/enums/stateCardEnum';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { findCompanyById, getValueFromDictionaries } from '~/utils/helpers';\n\nexport default function VacancyContactsData({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n  companies,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: ResumeCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  companies?: Company[];\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:vacancy_contacts')}\n      withEditButton\n      nameCard={VacancyCardEnum.employer}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField\n          label={t('user:company_name')}\n          data={findCompanyById(vacancy?.contacts?.company_id, companies)?.name}\n        />\n        <DataField label={t('user:contact_phone')} data={vacancy?.contacts?.contact_phone} />\n        <DataField label={t('user:first_name')} data={vacancy?.contacts?.first_name} />\n        <DataField label={t('user:last_name')} data={vacancy?.contacts?.last_name} />\n        <DataField\n          label={t('user:how_did_you_know_about_us')}\n          data={getValueFromDictionaries(\n            dictionaries?.sources,\n            vacancy?.contacts?.source_of_discovery_id,\n            userContext.language,\n          )}\n        />\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { type Dispatch, type SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport VacancyLocationData from './VacancyLocationData';\nimport VacancyLocationEdit from './VacancyLocationEdit';\n\nexport default function VacancyLocation({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  vacancy: Vacancy | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateVacancy;\n}) {\n  return editCard === VacancyCardEnum.location ? (\n    <Form method='PATCH' style={{ width: '100%' }}>\n      <VacancyLocationEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        vacancy={vacancy}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <VacancyLocationData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueLang } from '~/utils/helpers';\n\nexport default function VacancyLocationData({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:location')}\n      withEditButton\n      nameCard={VacancyCardEnum.location}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField\n          label={t('user:country')}\n          data={getValueLang(vacancy?.location?.city_name, userContext.language)}\n        />\n        <DataField\n          label={t('user:province')}\n          data={getValueLang(vacancy?.location?.region_name, userContext.language)}\n        />\n        <DataField\n          label={t('user:district')}\n          data={getValueLang(vacancy?.location?.city_name, userContext.language)}\n        />\n        {/* <DataField label={t('user:address')}  /> */}\n        <DataField\n          label={t('user:language_of_notify')}\n          data={getValueLang(vacancy?.location?.language_of_notify_name, userContext.language)}\n        />\n        <DataField\n          label={t('user:number_of_employees')}\n          data={getValueLang(vacancy?.location?.number_of_employees_name, userContext.language)}\n        />\n      </CardContainer>\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { type Dispatch, type SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport VacancyRequirementsData from './VacancyRequirementsData';\nimport VacancyRequirementsEdit from './VacancyRequirementsEdit';\n\nexport default function VacancyRequirements({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  vacancy: Vacancy | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateVacancy;\n}) {\n  return editCard === VacancyCardEnum.requirements ? (\n    <Form method='PATCH' style={{ width: '100%' }}>\n      <VacancyRequirementsEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        vacancy={vacancy}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <VacancyRequirementsData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueFromDictionaries, getValueLang } from '~/utils/helpers';\n\nexport default function VacancyRequirementsData({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, userContext } = useApp();\n\n  return (\n    <BoxCard\n      title={t('user:requirements')}\n      withEditButton\n      nameCard={VacancyCardEnum.requirements}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      {vacancy?.requirements?.education && (\n        <CardContainer\n          as={motion.div}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n        >\n          <Box flexDirection='column' gap='24px'>\n            {vacancy?.requirements?.education?.map((item) => (\n              <Box flexDirection='column' gap='10px' key={item.specialization_id}>\n                <DataField\n                  label={t('user:education')}\n                  data={getValueLang(item.education_name, userContext.language)}\n                />\n                <DataField\n                  label={t('user:specialization')}\n                  data={getValueLang(item.specialization_name, userContext.language)}\n                />\n                <DataField\n                  label={t('user:level')}\n                  data={getValueLang(item.level_name, userContext.language)}\n                />\n              </Box>\n            ))}\n          </Box>\n\n          <Box flexDirection='column' gap='24px'>\n            {vacancy?.requirements?.work_experience?.map((item) => (\n              <Box flexDirection='column' gap='10px' key={item.specialization_id}>\n                <DataField\n                  label={t('user:work_experience')}\n                  data={getValueLang(item.work_experience_name, userContext.language)}\n                />\n                <DataField\n                  label={t('user:period_of_work')}\n                  data={getValueLang(item.period_of_work_name, userContext.language)}\n                />\n                <DataField\n                  label={t('user:specialization')}\n                  data={getValueLang(item.specialization_name, userContext.language)}\n                />\n              </Box>\n            ))}\n          </Box>\n\n          <Box flexDirection='column' gap='24px'>\n            {vacancy?.requirements?.language?.map((item) => (\n              <Box flexDirection='column' gap='10px' key={item.language_knowledge_id}>\n                <DataField\n                  label={t('user:language_knowledge')}\n                  data={getValueLang(item.language_knowledge_name, userContext.language)}\n                />\n                <DataField\n                  label={t('user:language')}\n                  data={getValueLang(item.language_name, userContext.language)}\n                />\n\n                <DataField\n                  label={t('user:level')}\n                  data={getValueLang(item.level_name, userContext.language)}\n                />\n              </Box>\n            ))}\n          </Box>\n        </CardContainer>\n      )}\n    </BoxCard>\n  );\n}\n", "import { Form } from '@remix-run/react';\nimport { type Dispatch, type SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport type { IUpdateVacancy } from '~/types/interfaces/iForms';\n\nimport VacancyResponsesData from './VacancyResponsesData';\nimport VacancyResponsesEdit from './VacancyResponsesEdit';\n\nexport default function VacancyResponses({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n  actionData,\n}: {\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n  vacancy: Vacancy | null;\n  dictionaries?: IDictionaries;\n  actionData?: IUpdateVacancy;\n}) {\n  return editCard === VacancyCardEnum.responses ? (\n    <Form method='PATCH' style={{ width: '100%' }}>\n      <VacancyResponsesEdit\n        editCard={editCard}\n        setEditCard={setEditCard}\n        vacancy={vacancy}\n        dictionaries={dictionaries}\n        actionData={actionData}\n      />\n    </Form>\n  ) : (\n    <VacancyResponsesData\n      editCard={editCard}\n      setEditCard={setEditCard}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport type { Dispatch, SetStateAction } from 'react';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { BoxCard } from '~/components/common/Card';\nimport { Switcher } from '~/components/common/Switcher';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataField } from '~/components/entities/DataFIeld';\nimport { BoxSetting } from '~/components/pages/User/Resumes/Resume/components/ResumeSettings/styles';\nimport { CardContainer } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { VacancyCardEnum } from '~/types/enums/stateCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueFromDictionaries } from '~/utils/helpers';\n\nimport { BoxLabel, SwitcherBox } from '../../../styles';\nimport { FieldsWrapper } from '../../styles';\n\nexport default function VacancyResponsesData({\n  editCard,\n  setEditCard,\n  vacancy,\n  dictionaries,\n}: {\n  vacancy?: Vacancy | null;\n  dictionaries?: IDictionaries;\n  editCard: VacancyCardEnum;\n  setEditCard: Dispatch<SetStateAction<string>>;\n}) {\n  const { t, theme, userContext } = useApp();\n\n  const renderFormFields = (disabled?: boolean) => (\n    <>\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>\n          {t('user:show_phone_number_for_verified_employees_only')}\n        </Text>\n        <SwitcherBox>\n          <Switcher\n            checked={Boolean(vacancy?.responses_vacancy?.show_phone_number)}\n            htmlLabel='i_show_phone'\n            name='show_phone'\n            disabled\n          />\n          <BoxLabel style={{ cursor: 'pointer' }}>\n            <Text\n              color={\n                vacancy?.responses_vacancy?.show_phone_number\n                  ? theme.switcher.backgroundChecked\n                  : theme.switcher.textDefaultColor\n              }\n              variant={TextVariantEnum.textBody2}\n            >\n              {vacancy?.responses_vacancy?.show_phone_number ? t('common:show') : t('common:hide')}\n            </Text>\n          </BoxLabel>\n        </SwitcherBox>\n      </BoxSetting>\n\n      <BoxSetting>\n        <Text variant={TextVariantEnum.textBody2medium}>\n          {t('user:show_email_for_verified_employees_only')}\n        </Text>\n        <SwitcherBox>\n          <Switcher\n            // onChange={handleOnChange}\n            htmlLabel='i_show_email'\n            name='show_email'\n            disabled\n            checked={Boolean(vacancy?.responses_vacancy?.show_email)}\n          />\n          <BoxLabel style={{ cursor: 'pointer' }}>\n            <Text\n              color={\n                vacancy?.responses_vacancy?.show_email\n                  ? theme.switcher.backgroundChecked\n                  : theme.switcher.textDefaultColor\n              }\n              variant={TextVariantEnum.textBody2}\n            >\n              {vacancy?.responses_vacancy?.show_email ? t('common:show') : t('common:hide')}\n            </Text>\n          </BoxLabel>\n        </SwitcherBox>\n      </BoxSetting>\n    </>\n  );\n\n  return (\n    <BoxCard\n      title={t('user:responses_vacancy')}\n      withEditButton\n      nameCard={VacancyCardEnum.responses}\n      editCard={editCard}\n      setEditCard={setEditCard}\n    >\n      <CardContainer\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n      >\n        <DataField\n          label={t('user:response_can_be_done_by')}\n          data={getValueFromDictionaries(\n            dictionaries?.responseCanBeDoneBy,\n            vacancy?.responses_vacancy?.response_can_be_done_by_id,\n            userContext.language,\n          )}\n        />\n        <DataField\n          label={t('user:email_for_the_responses')}\n          data={vacancy?.responses_vacancy?.email_for_the_responses}\n        />\n        <DataField\n          label={t('user:get_email_notifications_for')}\n          data={getValueFromDictionaries(\n            dictionaries?.emailNotificationsSettings,\n            vacancy?.responses_vacancy?.get_email_notifications_for_id,\n            userContext.language,\n          )}\n        />\n        <DataField\n          label={t('user:compliance_of_requirements')}\n          data={getValueFromDictionaries(\n            dictionaries?.complianceOfRequirements,\n            vacancy?.responses_vacancy?.compliance_of_requirements_id,\n            userContext.language,\n          )}\n        />\n        <FieldsWrapper variant='data'>{renderFormFields()}</FieldsWrapper>\n      </CardContainer>\n    </BoxCard>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "editCard", "setEditCard", "vacancy", "dictionaries", "t", "userContext", "useApp", "VacancyCardEnum", "additional", "additional_skills", "motion", "div", "opacity", "type", "bounce", "duration", "skill_ids", "map", "item", "TextVariantEnum", "textBody2medium", "uuidValidate", "getValueFromDictionaries", "skills", "language", "driver_license_ids", "drivingLicenses", "Array", "isArray", "other_licenses", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "actionData", "VacancyCardEnum", "additional", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "t", "userContext", "useApp", "VacancyCardEnum", "motion", "div", "opacity", "type", "bounce", "duration", "getValueLang", "vacancy_page", "specialization_name", "language", "position", "employment_type_names", "map", "item", "TextVariantEnum", "textBody2medium", "en", "work_feature_ids", "getValueFromDictionaries", "workfeatures", "salary_fixed", "toString", "salary_from", "salary_to", "currency", "currency_id", "description", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "actionData", "VacancyCardEnum", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "companies", "t", "userContext", "useApp", "VacancyCardEnum", "employer", "motion", "div", "opacity", "type", "bounce", "duration", "findCompanyById", "contacts", "company_id", "name", "contact_phone", "first_name", "last_name", "getValueFromDictionaries", "sources", "source_of_discovery_id", "language", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "companies", "actionData", "VacancyCardEnum", "employer", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "t", "userContext", "useApp", "VacancyCardEnum", "location", "motion", "div", "opacity", "type", "bounce", "duration", "getValueLang", "city_name", "language", "region_name", "language_of_notify_name", "number_of_employees_name", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "actionData", "VacancyCardEnum", "location", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "t", "userContext", "useApp", "VacancyCardEnum", "requirements", "education", "motion", "div", "opacity", "type", "bounce", "duration", "map", "item", "getValueLang", "education_name", "language", "specialization_name", "level_name", "specialization_id", "work_experience", "work_experience_name", "period_of_work_name", "language_knowledge_name", "language_name", "language_knowledge_id", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "actionData", "VacancyCardEnum", "requirements", "width", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "t", "theme", "userContext", "useApp", "renderFormFields", "disabled", "TextVariantEnum", "textBody2medium", "Boolean", "responses_vacancy", "show_phone_number", "cursor", "switcher", "backgroundChecked", "textDefaultColor", "textBody2", "show_email", "VacancyCardEnum", "responses", "motion", "div", "opacity", "type", "bounce", "duration", "getValueFromDictionaries", "responseCanBeDoneBy", "response_can_be_done_by_id", "language", "email_for_the_responses", "emailNotificationsSettings", "get_email_notifications_for_id", "complianceOfRequirements", "compliance_of_requirements_id", "import_jsx_dev_runtime", "editCard", "setEditCard", "vacancy", "dictionaries", "actionData", "VacancyCardEnum", "responses", "width", "import_jsx_dev_runtime", "vacancy", "dictionaries", "actionData", "companies", "editCard", "setEditCard", "useState", "VacancyCardEnum", "all", "useEffect", "success", "import_jsx_dev_runtime", "request", "useLoaderData", "vacancy", "actionData", "useActionData", "companies", "dictionaries", "t", "useApp", "widthScreen", "useScreenWidth", "incompleteness", "useCheckIncompleteness", "BoxInformationEnum", "warning", "data"]
}
