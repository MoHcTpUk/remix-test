{
  "version": 3,
  "sources": ["../../../../app/routes/search/vacancy.$id.request.tsx", "../../../../app/components/pages/Search/Resumes/ResumesRequest/index.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { Vacancies } from 'shared/client/Vacancies';\nimport { Vacancy } from 'shared/client/Vacancy';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { ResumesApi } from 'shared/v2/resumes';\nimport { VacanciesApi } from 'shared/v2/vacancies';\n\nimport { ResumesRequest } from '~/components/pages/Search/Resumes/ResumesRequest';\nimport { ResumesComponent } from '~/components/pages/User/Resumes';\nimport { getMessageContext } from '~/storages/message.server';\nimport { successAccessMessage, successAccessTitle } from '~/utils/messages';\n\nexport const loader = async ({ request, context }: LoaderArgs) => {\n  const clientResume = ClientFactory.createClient(ResumesApi, context.session);\n\n  const [genders, specializations, location, resumes] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationsMap,\n    context.references.locationMap,\n    clientResume.getResumes({ only_my: true }),\n  ]);\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n  };\n\n  return json({ dictionaries, resumes }, { headers: { 'Cache-Control': 'public, max-age=120' } });\n};\n\nexport const action = async ({ request, context, params }: ActionArgs) => {\n  const text = await request.text();\n\n  const clientVacancy = ClientFactory.createClient(VacanciesApi, context.session);\n  const messageContextStorage = await getMessageContext(request);\n\n  // const clientVacancy = new Vacancies();\n  // clientVacancy.auth(context.session);\n\n  const parsedData = qs.parse(text);\n\n  const vacancy_id = params.id || '';\n  const resume_id = parsedData?.id?.toString() || '';\n\n  // const res = await clientVacancy.postVacanciesAccess({ id: resume_id || '' });\n\n  try {\n    const res = await clientVacancy.postVacanciesAccess({\n      id: vacancy_id || '',\n      request_access: {\n        locale: context.userContext.language,\n        resume_id,\n      },\n    });\n\n    // const res = await clientVacancy.requestPersonalDataDetail(vacancy_id, {\n    //   locale: context.userContext.language,\n    //   resume_id,\n    // });\n\n    if (!res?.id) {\n      return json({\n        success: false,\n        message: {\n          en: 'Something went wrong',\n          th: 'มีบางอย่างผิดพลาด',\n        },\n      });\n    }\n\n    const headers: HeadersInit = new Headers();\n\n    messageContextStorage.setSuccessMessage('', successAccessMessage(context.userContext.language));\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n\n    // if (\n    //   res.data?.message?.en?.includes('you must first confirm your email') ||\n    //   res.data.message?.en?.includes('log in or register')\n    // ) {\n    //   return json({ success: false, message: res.data.message });\n    // }\n\n    return json(\n      {\n        success: true,\n        message: {\n          en: 'Successfully!',\n          th: 'สำเร็จ!',\n        },\n      },\n      { headers: { 'Set-Cookie': await messageContextStorage.commit() } },\n    );\n  } catch (e) {\n    console.log(e);\n    return json({\n      success: false,\n      message: {\n        en: 'Something went wrong',\n        th: 'มีบางอย่างผิดพลาด',\n      },\n    });\n  }\n\n  // return json({\n  //   success: res.access_requested,\n  //   message: {\n  //     en: 'this is good',\n  //     th: 'บางอย่างผิดพลาด',\n  //   },\n  // });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  const resumes = request.resumes.data;\n\n  const { dictionaries } = request;\n\n  return (\n    <ResumesRequest\n      actionRequest={actionData?.success}\n      message={actionData?.message}\n      resumes={resumes}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { motion } from 'framer-motion';\nimport { memo, useEffect, useState } from 'react';\nimport type { EntityMessage } from 'shared/client/data-contracts';\nimport type { Resume } from 'shared/v2/resumes';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport ModalRequestConfirm from '~/components/entities/ModalRequestConfirm';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nimport { ResumeRequest } from './ResumeRequest';\n\nexport const ResumesRequest = memo(\n  ({\n    resumes,\n    dictionaries,\n    actionRequest,\n    message,\n  }: {\n    resumes?: Resume[] | null;\n    dictionaries?: IDictionaries;\n    actionRequest?: boolean;\n    message?: EntityMessage;\n  }): JSX.Element => {\n    const { t, userContext } = useApp();\n\n    const widthScreen = useScreenWidth();\n\n    const [confirmResume, setConfirmResume] = useState(false);\n    const [selectedResume, setSelectedResume] = useState('');\n\n    const [publishedResumes, setPublishedResumes] = useState<Resume[]>();\n\n    useEffect(() => {\n      if (resumes) {\n        const newResume = resumes.filter((resume) => resume.published);\n        setPublishedResumes(newResume);\n      }\n    }, [resumes]);\n\n    useEffect(() => {\n      if (actionRequest) {\n        setConfirmResume(false);\n      }\n    }, [actionRequest]);\n\n    const handleConfirm = (id?: string) => {\n      if (id) setSelectedResume(id);\n\n      setConfirmResume(!confirmResume);\n    };\n\n    return (\n      <Box\n        flexDirection='column'\n        width='100%'\n        gap={widthScreen > 1024 ? '24px' : '16px'}\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        {actionRequest === undefined && (\n          <BoxInformation\n            variant={BoxInformationEnum.info}\n            title={t('user:select_vacancy_to_send')}\n          />\n        )}\n\n        {actionRequest === false && message && (\n          <BoxInformation\n            variant={BoxInformationEnum.error}\n            title={message[userContext.language]}\n          />\n        )}\n\n        {actionRequest === true && (\n          <BoxInformation\n            variant={BoxInformationEnum.success}\n            title={t('user:your_request_has_been_sent')}\n          />\n        )}\n        {publishedResumes?.map((resume) => (\n          <Box\n            width='100%'\n            style={{ cursor: 'pointer' }}\n            key={resume.id}\n            onClick={() => handleConfirm(resume?.id)}\n          >\n            <ResumeRequest resume={resume} dictionaries={dictionaries} />\n          </Box>\n        ))}\n        <ModalRequestConfirm\n          id={selectedResume}\n          variant={EntityVariantEnum.resume}\n          visibility={confirmResume}\n          setVisibility={setConfirmResume}\n        />\n      </Box>\n    );\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAAqB;AACrB;AACA,gBAAe;;;ACFf,mBAA0C;AAiEhC;AAnDH,IAAMA,qBAAiBC,mBAC5B,CAAC;EACCC;EACAC;EACAC;EACAC;AAMF,MAAmB;AACjB,QAAM;IAAEC;IAAGC;EAAY,IAAIC,OAAO;AAElC,QAAMC,cAAcC,eAAe;AAEnC,QAAM,CAACC,eAAeC,gBAAgB,QAAIC,uBAAS,KAAK;AACxD,QAAM,CAACC,gBAAgBC,iBAAiB,QAAIF,uBAAS,EAAE;AAEvD,QAAM,CAACG,kBAAkBC,mBAAmB,QAAIJ,uBAAmB;AAEnEK,8BAAU,MAAM;AACd,QAAIhB,SAAS;AACX,YAAMiB,YAAYjB,QAAQkB,OAAQC,YAAWA,OAAOC,SAAS;AAC7DL,0BAAoBE,SAAS;IAC/B;EACF,GAAG,CAACjB,OAAO,CAAC;AAEZgB,8BAAU,MAAM;AACd,QAAId,eAAe;AACjBQ,uBAAiB,KAAK;IACxB;EACF,GAAG,CAACR,aAAa,CAAC;AAElB,QAAMmB,gBAAgBA,CAACC,OAAgB;AACrC,QAAIA;AAAIT,wBAAkBS,EAAE;AAE5BZ,qBAAiB,CAACD,aAAa;EACjC;AAEA,SACE,mDAAC,OACC,eAAc,UACd,OAAM,QACN,KAAKF,cAAc,OAAO,SAAS,QACnC,IAAIgB,OAAOC,KACX,SAAS;IAAEC,SAAS;EAAE,GACtB,SAAS;IAAEA,SAAS;EAAE,GACtB,MAAM;IAAEA,SAAS;EAAE,GAElBvB;sBAAkBwB,UACjB,mDAAC,0BACC,SAASC,mBAAmBC,MAC5B,OAAOxB,EAAE,6BAA6B,KAFxC;;;;WAE0C;IAI3CF,kBAAkB,SAASC,WAC1B,mDAAC,0BACC,SAASwB,mBAAmBE,OAC5B,OAAO1B,QAAQE,YAAYyB,QAAQ,KAFrC;;;;WAEuC;IAIxC5B,kBAAkB,QACjB,mDAAC,0BACC,SAASyB,mBAAmBI,SAC5B,OAAO3B,EAAE,iCAAiC,KAF5C;;;;WAE8C;IAG/CU,kBAAkBkB,IAAKb,YACtB,mDAAC,OACC,OAAM,QACN,OAAO;MAAEc,QAAQ;IAAU,GAE3B,SAAS,MAAMZ,cAAcF,QAAQG,EAAE,GAEvC,6DAAC,iBAAc,QAAgB,gBAA/B;;;;WAA0D,KAHrDH,OAAOG,IAHd;;;;WAOA,CACD;IACD,mDAAC,uBACC,IAAIV,gBACJ,SAASsB,kBAAkBf,QAC3B,YAAYV,eACZ,eAAeC,oBAJjB;;;;WAIkC;OA3CpC;;;;SA6CA;AAEJ,CACF;;;AD5FA,qBAAkC;AAiH9B,IAAAyB,0BAAA;AATW,SAAf,QAAgC;AAC9B,QAAMC,UAAUC,cAA6B;AAC7C,QAAMC,aAAaC,cAA6B;AAEhD,QAAMC,UAAUJ,QAAQI,QAAQC;AAEhC,QAAM;IAAEC;EAAa,IAAIN;AAEzB,SACE,oDAAC,kBACC,eAAeE,YAAYK,SAC3B,SAASL,YAAYM,SACrB,SACA,gBAJF;;;;SAI6B;AAGjC;",
  "names": ["ResumesRequest", "memo", "resumes", "dictionaries", "actionRequest", "message", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "confirmResume", "setConfirmResume", "useState", "selectedResume", "setSelectedResume", "publishedResumes", "setPublishedResumes", "useEffect", "newResume", "filter", "resume", "published", "handleConfirm", "id", "motion", "div", "opacity", "undefined", "BoxInformationEnum", "info", "error", "language", "success", "map", "cursor", "EntityVariantEnum", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "resumes", "data", "dictionaries", "success", "message"]
}
