{
  "version": 3,
  "sources": ["../../../../app/routes/search/resume.tsx", "../../../../app/components/pages/Search/Resumes/index.tsx"],
  "sourcesContent": ["import type { LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useBeforeUnload, useLoaderData } from '@remix-run/react';\nimport { useCallback, useLayoutEffect, useRef, useState } from 'react';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { isServer } from 'shared/utils';\nimport { CompaniesApi } from 'shared/v2/companies';\nimport type { GetResumesDateEnum } from 'shared/v2/resumes';\nimport { ResumesApi } from 'shared/v2/resumes';\nimport { VacanciesApi } from 'shared/v2/vacancies';\n\nimport { SearchResumesComponent } from '~/components/pages/Search/Resumes';\nimport { getPaginationPages, getPaginationRange } from '~/utils/helpers.client';\n\nexport const loader = async ({ request, context }: LoaderArgs) => {\n  const url = new URL(request.url);\n  const query = url.searchParams.get('q');\n  const experience = url.searchParams.getAll('work_experience');\n  const resumeId = url.searchParams.get('id');\n  const date_of_post = url.searchParams.get('date_of_post');\n  const specialization = url.searchParams.get('specialization');\n  const salary_estimate_from = url.searchParams.get('salary_estimate_from');\n  const employmentQuery = url.searchParams.getAll('employment');\n  const features = url.searchParams.getAll('features');\n  const educations = url.searchParams.getAll('education_level');\n  const search_by_city = url.searchParams.get('search_by_city');\n  const max_page_size = url.searchParams.get('max_page_size');\n  const currentPage = url.searchParams.get('current_page');\n  const currentToken = url.searchParams.get('current_token');\n  const max_pages = url.searchParams.get('max_pages');\n  const pages = getPaginationPages(currentPage, max_pages);\n\n  const clientResume = ClientFactory.createClient(ResumesApi, context.session);\n  const clientVacancy = ClientFactory.createClient(VacanciesApi, context.session);\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n\n  const [\n    genders,\n    specializations,\n    location,\n    employment,\n    workfeatures,\n    educationLevel,\n    yearsOfExperience,\n    citizenship,\n    relocation,\n    religions,\n    maritalStatuses,\n    resume,\n    resumes,\n    myVacancies,\n    myCompanies,\n  ] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationsMap,\n    context.references.locationMap,\n    context.references.employmentsMap,\n    context.references.workFeaturesMap,\n    context.references.educationLevelMap,\n    context.references.yearsOfExperienceMap,\n    context.references.citizenshipMap,\n    context.references.relocationsMap,\n    context.references.religionsMap,\n    context.references.maritalStatusesMap,\n    resumeId ? clientResume.getResume({ id: resumeId || '' }) : null,\n    clientResume.getResumes({\n      q: query || '',\n      date: date_of_post ? (+date_of_post as GetResumesDateEnum) : undefined,\n      specializations: specialization ? specialization.split(',') : undefined,\n      salary_from: salary_estimate_from ? +salary_estimate_from : undefined,\n      employments: employmentQuery?.length ? employmentQuery : undefined,\n      features: features?.length ? features : undefined,\n      educations: educations?.length ? educations : undefined,\n      experience: experience?.length ? experience : undefined,\n      location: search_by_city || '',\n      max_page_size: max_page_size ? +max_page_size : 10,\n      pages,\n      page_token: currentPage && +currentPage !== 1 && currentToken ? currentToken : undefined,\n    }),\n    clientVacancy.getVacancies({ only_my: true }),\n    clientCompany.getCompanies({ only_my: true }),\n  ]);\n\n  const paginationRange = getPaginationRange(pages, resumes?.max_pages, resumes?.page_tokens);\n  const maxPages = resumes.max_pages;\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n    employment: employment.ToArray(),\n    workfeatures: workfeatures.ToArray(),\n    educationLevel: educationLevel.ToArray(),\n    yearsOfExperience: yearsOfExperience.ToArray(),\n    citizenship: citizenship.ToArray(),\n    relocation: relocation.ToArray(),\n    religions: religions.ToArray(),\n    maritalStatuses: maritalStatuses.ToArray(),\n  };\n\n  return json(\n    // { dictionaries, resumesWithJobPositions, updatedResume },\n    { dictionaries, resumes, resume, myCompanies, myVacancies, paginationRange, maxPages },\n    { headers: { 'Cache-Control': 'public, max-age=120' } },\n  );\n};\n\nconst useSSRLayoutEffect = isServer() ? () => {} : useLayoutEffect;\n\nfunction useIsHydrating(queryString: string) {\n  const [isHydrating] = useState(() => !isServer && Boolean(document.querySelector(queryString)));\n  return isHydrating;\n}\n\nexport default function Search() {\n  const request = useLoaderData<typeof loader>();\n\n  const resumes = request.resumes?.data;\n  const myVacancies = request.myVacancies?.data;\n  const myCompanies = request.myCompanies.data;\n\n  const { dictionaries } = request;\n\n  const resume = request?.resume ? request?.resume : resumes?.[0];\n\n  const hydrating = useIsHydrating('[data-hydrating-signal]');\n\n  const parentRef = useRef<HTMLDivElement>(null);\n\n  useBeforeUnload(\n    useCallback(() => {\n      if (!parentRef.current) return;\n      sessionStorage.setItem('infiniteScrollTop', parentRef.current.scrollTop.toString());\n    }, []),\n  );\n\n  useSSRLayoutEffect(() => {\n    if (!hydrating) return;\n    if (!parentRef.current) return;\n\n    const infiniteScrollTop = sessionStorage.getItem('infiniteScrollTop');\n    if (!infiniteScrollTop) return;\n\n    parentRef.current.scrollTop = Number(infiniteScrollTop);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      sessionStorage.removeItem('infiniteScrollTop');\n    };\n  }, [hydrating]);\n\n  return (\n    <SearchResumesComponent\n      resumes={resumes}\n      resume={resume}\n      myVacancies={myVacancies}\n      myCompanies={myCompanies}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { useLocation } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\nimport type { Resume } from 'shared/v2/resumes';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport { List, ListItem } from '~/components/common/BoxInformation/styles';\nimport { ResumePartCardWidget } from '~/components/entities/cardWidgets';\nimport ModalShare from '~/components/entities/ModalShare';\nimport { BoxSelectedCard } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { CLIENT_BASE_URL } from '~/utils/constants';\n\nimport ResumeSearchCard from './Resume';\n\nexport const SearchResumesComponent = memo(\n  ({\n    resumes,\n    resume,\n    myVacancies,\n    myCompanies,\n    dictionaries,\n  }: {\n    resumes?: Resume[] | null;\n    myCompanies?: Company[] | null;\n    myVacancies?: Vacancy[] | null;\n    resume?: Resume;\n    dictionaries?: IDictionaries;\n  }): JSX.Element => {\n    const { t } = useApp();\n    const [visibleShare, setVisibleShare] = useState(false);\n    const location = useLocation();\n    const [linkShare, setLinkShare] = useState('');\n    const widthScreen = useScreenWidth();\n    const [visibleRequest, setVisibleRequest] = useState(false);\n\n    const handleRequest = () => {\n      setVisibleRequest(!visibleRequest);\n    };\n\n    return (\n      <Box\n        flexDirection='row'\n        alignItems='flex-start'\n        width='100%'\n        gap='24px'\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        <Box\n          flexDirection='column'\n          width='100%'\n          gap={widthScreen > 1024 ? '24px' : '16px'}\n          style={{\n            flex: '1',\n          }}\n        >\n          {/* <Heading variant='resumes' title={t('user:my_resumes')} /> */}\n\n          {resumes?.map((item) => (\n            <ResumePartCardWidget\n              resume={item}\n              selectedResume={resume?.id}\n              variant={PageVariantEnum.search}\n              // key={item?.id}\n              handleRequest={handleRequest}\n            />\n          ))}\n          {!resumes?.[0] && (\n            <BoxInformation\n              variant={BoxInformationEnum.info}\n              title={t('user:the_search_has_not_given_any_results_try_changing_your_search_terms')}\n              information={\n                <List>\n                  <ListItem>{t('user:try_more_general_keywords')}</ListItem>\n                  <ListItem>{t('user:try_changing_the_value_of_one_of_the_filters')}</ListItem>\n                  <ListItem>{t('user:check_your_spelling')}</ListItem>\n                </List>\n              }\n              flexDirection='column'\n            />\n          )}\n          <ModalShare\n            link={`${CLIENT_BASE_URL}${location.pathname}/${linkShare}`}\n            visibility={visibleShare}\n            setVisibility={setVisibleShare}\n          />\n        </Box>\n        {resume?.id && (\n          <BoxSelectedCard>\n            <ResumeSearchCard\n              myCompanies={myCompanies}\n              myVacancies={myVacancies}\n              resume={resume}\n              dictionaries={dictionaries}\n              // handleClickShare={handleClickShare}\n            />\n          </BoxSelectedCard>\n        )}\n      </Box>\n    );\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAAqB;AACrB;AACA,IAAAA,gBAA+D;;;ACH/D;AAEA,IAAAC,gBAA+B;AAkEnB;AA/CL,IAAMC,6BAAyBC,oBACpC,CAAC;EACCC;EACAC;EACAC;EACAC;EACAC;AAOF,MAAmB;AACjB,QAAM;IAAEC;EAAE,IAAIC,OAAO;AACrB,QAAM,CAACC,cAAcC,eAAe,QAAIC,wBAAS,KAAK;AACtD,QAAMC,WAAWC,YAAY;AAC7B,QAAM,CAACC,WAAWC,YAAY,QAAIJ,wBAAS,EAAE;AAC7C,QAAMK,cAAcC,eAAe;AACnC,QAAM,CAACC,gBAAgBC,iBAAiB,QAAIR,wBAAS,KAAK;AAE1D,QAAMS,gBAAgBA,MAAM;AAC1BD,sBAAkB,CAACD,cAAc;EACnC;AAEA,SACE,mDAAC,OACC,eAAc,OACd,YAAW,cACX,OAAM,QACN,KAAI,QACJ,IAAIG,OAAOC,KACX,SAAS;IAAEC,SAAS;EAAE,GACtB,SAAS;IAAEA,SAAS;EAAE,GACtB,MAAM;IAAEA,SAAS;EAAE,GAEnB;uDAAC,OACC,eAAc,UACd,OAAM,QACN,KAAKP,cAAc,OAAO,SAAS,QACnC,OAAO;MACLQ,MAAM;IACR,GAICtB;eAASuB,IAAKC,UACb;QAAC;;UACC,QAAQA;UACR,gBAAgBvB,QAAQwB;UACxB,SAASC,gBAAgBC;UAEzB;;QALF;;;;;;;;MAK+B,CAEhC;MACA,CAAC3B,UAAU,CAAC,KACX,mDAAC,0BACC,SAAS4B,mBAAmBC,MAC5B,OAAOxB,EAAE,0EAA0E,GACnF,aACE,mDAAC,QACC;2DAAC,YAAUA,YAAE,gCAAgC,KAA7C;;;;eAA+C;QAC/C,mDAAC,YAAUA,YAAE,mDAAmD,KAAhE;;;;eAAkE;QAClE,mDAAC,YAAUA,YAAE,0BAA0B,KAAvC;;;;eAAyC;WAH3C;;;;aAIA,GAEF,eAAc,YAVhB;;;;aAUwB;MAG1B,mDAAC,cACC,MAAO,GAAEyB,kBAAkBpB,SAASqB,YAAYnB,aAChD,YAAYL,cACZ,eAAeC,mBAHjB;;;;aAGiC;SApCnC;;;;WAsCA;IACCP,QAAQwB,MACP,mDAAC,mBACC;MAAC;;QACC;QACA;QACA;QACA;;MAJF;;;;;;;;IAKE,KANJ;;;;WAQA;OA1DJ;;;;SA4DA;AAEJ,CACF;;;AD0CI,IAAAO,0BAAA;AA7CJ,IAAMC,qBAAqBC,SAAS,IAAI,MAAM;AAAC,IAAIC;AAEnD,SAASC,eAAeC,aAAqB;AAC3C,QAAM,CAACC,WAAW,QAAIC,wBAAS,MAAM,CAACL,YAAYM,QAAQC,SAASC,cAAcL,WAAW,CAAC,CAAC;AAC9F,SAAOC;AACT;AAEe,SAAf,SAAiC;AAC/B,QAAMK,UAAUC,cAA6B;AAE7C,QAAMC,UAAUF,QAAQE,SAASC;AACjC,QAAMC,cAAcJ,QAAQI,aAAaD;AACzC,QAAME,cAAcL,QAAQK,YAAYF;AAExC,QAAM;IAAEG;EAAa,IAAIN;AAEzB,QAAMO,SAASP,SAASO,SAASP,SAASO,SAASL,UAAU,CAAC;AAE9D,QAAMM,YAAYf,eAAe,yBAAyB;AAE1D,QAAMgB,gBAAYC,sBAAuB,IAAI;AAE7CC,sBACEC,2BAAY,MAAM;AAChB,QAAI,CAACH,UAAUI;AAAS;AACxBC,mBAAeC,QAAQ,qBAAqBN,UAAUI,QAAQG,UAAUC,SAAS,CAAC;EACpF,GAAG,CAAA,CAAE,CACP;AAEA3B,qBAAmB,MAAM;AACvB,QAAI,CAACkB;AAAW;AAChB,QAAI,CAACC,UAAUI;AAAS;AAExB,UAAMK,oBAAoBJ,eAAeK,QAAQ,mBAAmB;AACpE,QAAI,CAACD;AAAmB;AAExBT,cAAUI,QAAQG,YAAYI,OAAOF,iBAAiB;AAGtD,WAAO,MAAM;AACXJ,qBAAeO,WAAW,mBAAmB;IAC/C;EACF,GAAG,CAACb,SAAS,CAAC;AAEd,SACE,oDAAC,0BACC,SACA,QACA,aACA,aACA,gBALF;;;;SAK6B;AAGjC;",
  "names": ["import_react", "import_react", "SearchResumesComponent", "memo", "resumes", "resume", "myVacancies", "myCompanies", "dictionaries", "t", "useApp", "visibleShare", "setVisibleShare", "useState", "location", "useLocation", "linkShare", "setLinkShare", "widthScreen", "useScreenWidth", "visibleRequest", "setVisibleRequest", "handleRequest", "motion", "div", "opacity", "flex", "map", "item", "id", "PageVariantEnum", "search", "BoxInformationEnum", "info", "CLIENT_BASE_URL", "pathname", "import_jsx_dev_runtime", "useSSRLayoutEffect", "isServer", "useLayoutEffect", "useIsHydrating", "queryString", "isHydrating", "useState", "Boolean", "document", "querySelector", "request", "useLoaderData", "resumes", "data", "myVacancies", "myCompanies", "dictionaries", "resume", "hydrating", "parentRef", "useRef", "useBeforeUnload", "useCallback", "current", "sessionStorage", "setItem", "scrollTop", "toString", "infiniteScrollTop", "getItem", "Number", "removeItem"]
}
