{
  "version": 3,
  "sources": ["../../../../app/routes/search/vacancy.tsx"],
  "sourcesContent": ["import type { LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useBeforeUnload, useLoaderData } from '@remix-run/react';\nimport { useCallback, useLayoutEffect, useRef, useState } from 'react';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { isServer } from 'shared/utils';\nimport type { GetResumesDateEnum } from 'shared/v2/resumes';\nimport { ResumesApi } from 'shared/v2/resumes';\nimport { VacanciesApi } from 'shared/v2/vacancies';\n\nimport { SearchVacanciesComponent } from '~/components/pages/Search/Vacancies';\nimport { getPaginationPages, getPaginationRange } from '~/utils/helpers.client';\n\nexport const loader = async ({ request, context }: LoaderArgs) => {\n  const url = new URL(request.url);\n  const query = url.searchParams.get('q');\n  const vacancyId = url.searchParams.get('id');\n  const date_of_post = url.searchParams.get('date_of_post');\n  const specialization = url.searchParams.get('specialization');\n  const salary_estimate_from = url.searchParams.get('salary_estimate_from');\n  const employmentQuery = url.searchParams.getAll('employment');\n  const features = url.searchParams.getAll('features');\n  const educations = url.searchParams.getAll('education_level');\n  const experience = url.searchParams.getAll('work_experience');\n  const search_by_city = url.searchParams.get('search_by_city');\n  const max_page_size = url.searchParams.get('max_page_size');\n  const currentPage = url.searchParams.get('current_page');\n  const currentToken = url.searchParams.get('current_token');\n  const max_pages = url.searchParams.get('max_pages');\n\n  const pages = getPaginationPages(currentPage, max_pages);\n\n  const clientResume = ClientFactory.createClient(ResumesApi, context.session);\n  const clientVacancy = ClientFactory.createClient(VacanciesApi, context.session);\n\n  const [\n    genders,\n    specializations,\n    location,\n    employment,\n    workfeatures,\n    educationLevel,\n    yearsOfExperience,\n    vacancy,\n    vacancies,\n    myResumes,\n  ] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationsMap,\n    context.references.locationMap,\n    context.references.employmentsMap,\n    context.references.workFeaturesMap,\n    context.references.educationLevelMap,\n    context.references.yearsOfExperienceMap,\n    vacancyId ? clientVacancy.getVacancy({ id: vacancyId || '' }) : null,\n    clientVacancy.getVacancies({\n      q: query || '',\n      date: date_of_post ? (+date_of_post as GetResumesDateEnum) : undefined,\n      specializations: specialization ? specialization.split(',') : undefined,\n      salary_from: salary_estimate_from ? +salary_estimate_from : undefined,\n      employments: employmentQuery?.length ? employmentQuery : undefined,\n      features: features?.length ? features : undefined,\n      educations: educations?.length ? educations : undefined,\n      experience: experience?.length ? experience : undefined,\n      location: search_by_city || '',\n      max_page_size: max_page_size ? +max_page_size : 10,\n      pages,\n      page_token: currentPage && +currentPage !== 1 && currentToken ? currentToken : undefined,\n    }),\n    clientResume.getResumes({ only_my: true }),\n  ]);\n\n  const paginationRange = getPaginationRange(pages, vacancies?.max_pages, vacancies?.page_tokens);\n  const maxPages = vacancies.max_pages;\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n    employment: employment.ToArray(),\n    workfeatures: workfeatures.ToArray(),\n    educationLevel: educationLevel.ToArray(),\n    yearsOfExperience: yearsOfExperience.ToArray(),\n  };\n\n  return json(\n    { dictionaries, vacancies, vacancy, myResumes, paginationRange, maxPages },\n    { headers: { 'Cache-Control': 'public, max-age=120' } },\n  );\n};\n\nconst useSSRLayoutEffect = isServer() ? () => {} : useLayoutEffect;\n\nfunction useIsHydrating(queryString: string) {\n  const [isHydrating] = useState(() => !isServer && Boolean(document.querySelector(queryString)));\n  return isHydrating;\n}\n\nexport default function Search() {\n  const request = useLoaderData<typeof loader>();\n  const vacancies = request?.vacancies?.data;\n  const vacancy = request?.vacancy ? request?.vacancy : vacancies?.[0];\n  const myResumes = request?.myResumes?.data;\n\n  const { dictionaries } = request;\n\n  const hydrating = useIsHydrating('[data-hydrating-signal]');\n\n  const parentRef = useRef<HTMLDivElement>(null);\n\n  useBeforeUnload(\n    useCallback(() => {\n      if (!parentRef.current) return;\n      sessionStorage.setItem('infiniteScrollTop', parentRef.current.scrollTop.toString());\n    }, []),\n  );\n\n  useSSRLayoutEffect(() => {\n    if (!hydrating) return;\n    if (!parentRef.current) return;\n\n    const infiniteScrollTop = sessionStorage.getItem('infiniteScrollTop');\n    if (!infiniteScrollTop) return;\n\n    parentRef.current.scrollTop = Number(infiniteScrollTop);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      sessionStorage.removeItem('infiniteScrollTop');\n    };\n  }, [hydrating]);\n\n  return (\n    <SearchVacanciesComponent\n      vacancies={vacancies}\n      vacancy={vacancy}\n      myResumes={myResumes}\n      dictionaries={dictionaries}\n    />\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAAqB;AACrB;AACA,IAAAA,gBAA+D;AAkI3D;AA1CJ,IAAMC,qBAAqBC,SAAS,IAAI,MAAM;AAAC,IAAIC;AAEnD,SAASC,eAAeC,aAAqB;AAC3C,QAAM,CAACC,WAAW,QAAIC,wBAAS,MAAM,CAACL,YAAYM,QAAQC,SAASC,cAAcL,WAAW,CAAC,CAAC;AAC9F,SAAOC;AACT;AAEe,SAAf,SAAiC;AAC/B,QAAMK,UAAUC,cAA6B;AAC7C,QAAMC,YAAYF,SAASE,WAAWC;AACtC,QAAMC,UAAUJ,SAASI,UAAUJ,SAASI,UAAUF,YAAY,CAAC;AACnE,QAAMG,YAAYL,SAASK,WAAWF;AAEtC,QAAM;IAAEG;EAAa,IAAIN;AAEzB,QAAMO,YAAYd,eAAe,yBAAyB;AAE1D,QAAMe,gBAAYC,sBAAuB,IAAI;AAE7CC,sBACEC,2BAAY,MAAM;AAChB,QAAI,CAACH,UAAUI;AAAS;AACxBC,mBAAeC,QAAQ,qBAAqBN,UAAUI,QAAQG,UAAUC,SAAS,CAAC;EACpF,GAAG,CAAA,CAAE,CACP;AAEA1B,qBAAmB,MAAM;AACvB,QAAI,CAACiB;AAAW;AAChB,QAAI,CAACC,UAAUI;AAAS;AAExB,UAAMK,oBAAoBJ,eAAeK,QAAQ,mBAAmB;AACpE,QAAI,CAACD;AAAmB;AAExBT,cAAUI,QAAQG,YAAYI,OAAOF,iBAAiB;AAGtD,WAAO,MAAM;AACXJ,qBAAeO,WAAW,mBAAmB;IAC/C;EACF,GAAG,CAACb,SAAS,CAAC;AAEd,SACE,mDAAC,4BACC,WACA,SACA,WACA,gBAJF;;;;SAI6B;AAGjC;",
  "names": ["import_react", "useSSRLayoutEffect", "isServer", "useLayoutEffect", "useIsHydrating", "queryString", "isHydrating", "useState", "Boolean", "document", "querySelector", "request", "useLoaderData", "vacancies", "data", "vacancy", "myResumes", "dictionaries", "hydrating", "parentRef", "useRef", "useBeforeUnload", "useCallback", "current", "sessionStorage", "setItem", "scrollTop", "toString", "infiniteScrollTop", "getItem", "Number", "removeItem"]
}
