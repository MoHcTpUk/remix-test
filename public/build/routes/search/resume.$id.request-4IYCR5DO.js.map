{
  "version": 3,
  "sources": ["../../../../app/routes/search/resume.$id.request.tsx", "../../../../app/components/pages/Search/Vacancies/VacanciesRequest/index.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useActionData, useLoaderData } from '@remix-run/react';\nimport qs from 'qs';\nimport { Resumes } from 'shared/client/Resumes';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { CompaniesApi } from 'shared/v2/companies';\nimport { ResumesApi } from 'shared/v2/resumes';\nimport { VacanciesApi } from 'shared/v2/vacancies';\n\nimport { VacanciesRequest } from '~/components/pages/Search/Vacancies/VacanciesRequest';\nimport { getMessageContext } from '~/storages/message.server';\nimport { successAccessMessage, successAccessTitle } from '~/utils/messages';\n\nexport const loader = async ({ context, request }: LoaderArgs) => {\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n  const clientVacancy = ClientFactory.createClient(VacanciesApi, context.session);\n\n  const [\n    genders,\n    specializations,\n    location,\n    employment,\n    workfeatures,\n    educationLevel,\n    yearsOfExperience,\n    vacancies,\n    companies,\n  ] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationsMap,\n    context.references.locationMap,\n    context.references.employmentsMap,\n    context.references.workFeaturesMap,\n    context.references.educationLevelMap,\n    context.references.yearsOfExperienceMap,\n    clientVacancy.getVacancies({ only_my: true }),\n    clientCompany.getCompanies({ only_my: true }),\n  ]);\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n    employment: employment.ToArray(),\n    workfeatures: workfeatures.ToArray(),\n    educationLevel: educationLevel.ToArray(),\n    yearsOfExperience: yearsOfExperience.ToArray(),\n  };\n\n  return json({ vacancies, dictionaries, companies });\n};\n\nexport const action = async ({ request, context, params }: ActionArgs) => {\n  const text = await request.text();\n  const messageContextStorage = await getMessageContext(request);\n\n  const clientResume = ClientFactory.createClient(ResumesApi, context.session);\n\n  // const clientResume = new Resumes();\n  // clientResume.auth(context.session);\n\n  const parsedData = qs.parse(text);\n\n  const resume_id = params.id || '';\n  const vacancy_id = parsedData?.id?.toString() || '';\n\n  try {\n    const res = await clientResume.postResumesAccess({\n      id: resume_id || '',\n      request_access: {\n        locale: context.userContext.language,\n        vacancy_id,\n      },\n    });\n\n    // const res = await clientResume.requestPersonalDataDetail(resume_id, {\n    //   locale: context.userContext.language,\n    //   vacancy_id,\n    // });\n\n    if (!res?.id) {\n      return json({\n        success: false,\n        message: {\n          en: 'Something went wrong',\n          th: 'มีบางอย่างผิดพลาด',\n        },\n      });\n    }\n\n    const headers: HeadersInit = new Headers();\n\n    messageContextStorage.setSuccessMessage('', successAccessMessage(context.userContext.language));\n    headers.append('Set-Cookie', await messageContextStorage.commit());\n\n    // if (\n    //   res.data?.message?.en?.includes('you must first confirm your email') ||\n    //   res.data.message?.en?.includes('log in or register')\n    // ) {\n    //   return json({ success: false, message: res.data.message });\n    // }\n\n    // return json({ success: true, message: res.data.message });\n    return json(\n      {\n        success: true,\n        message: {\n          en: 'Successfully!',\n          th: 'สำเร็จ!',\n        },\n      },\n      { headers: { 'Set-Cookie': await messageContextStorage.commit() } },\n    );\n  } catch (e) {\n    console.log(e);\n    return json({\n      success: false,\n      message: {\n        en: 'Something went wrong',\n        th: 'มีบางอย่างผิดพลาด',\n      },\n    });\n  }\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const vacancies = request.vacancies.data;\n  const companies = request.companies.data;\n\n  const { dictionaries } = request;\n\n  return (\n    <VacanciesRequest\n      actionRequest={actionData?.success}\n      message={actionData?.message}\n      vacancies={vacancies}\n      companies={companies}\n      dictionaries={dictionaries}\n    />\n  );\n}\n", "import { useMatches } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useEffect, useState } from 'react';\nimport type { EntityMessage } from 'shared/client/data-contracts';\nimport type { Company } from 'shared/v2/companies';\nimport type { Vacancy } from 'shared/v2/vacancies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport ModalRequestConfirm from '~/components/entities/ModalRequestConfirm';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { IconEnum } from '~/types/enums/iconEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\n\nimport { VacancyRequest } from './VacancyRequest';\n\nexport const VacanciesRequest = memo(\n  ({\n    vacancies,\n    dictionaries,\n    companies,\n    actionRequest,\n    message,\n  }: {\n    vacancies?: Vacancy[] | null;\n    companies?: Company[] | null;\n    dictionaries?: IDictionaries;\n    actionRequest?: boolean;\n    message: EntityMessage | undefined;\n  }): JSX.Element => {\n    const { t, userContext } = useApp();\n    const widthScreen = useScreenWidth();\n    const [confirmVacancy, setConfirmVacancy] = useState(false);\n    const [selectedVacancy, setSelectedVacancy] = useState('');\n\n    const [publishedVacancies, setPublishedVacancies] = useState<Vacancy[]>();\n\n    useEffect(() => {\n      if (vacancies) {\n        const newVacancies = vacancies.filter((vacancy) => vacancy.published);\n        setPublishedVacancies(newVacancies);\n      }\n    }, [vacancies]);\n\n    useEffect(() => {\n      if (actionRequest) {\n        setConfirmVacancy(false);\n      }\n    }, [actionRequest]);\n\n    const handleConfirm = (id?: string) => {\n      if (id) setSelectedVacancy(id);\n\n      setConfirmVacancy(!confirmVacancy);\n    };\n\n    return (\n      <Box\n        flexDirection='column'\n        width='100%'\n        gap={widthScreen > 1024 ? '24px' : '16px'}\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        {actionRequest === undefined && (\n          <BoxInformation\n            variant={BoxInformationEnum.info}\n            title={t('user:select_vacancy_to_send')}\n          />\n        )}\n\n        {actionRequest === false && message && (\n          <BoxInformation\n            variant={BoxInformationEnum.error}\n            title={message[userContext.language]}\n          />\n        )}\n\n        {actionRequest === true && (\n          <BoxInformation\n            variant={BoxInformationEnum.success}\n            title={t('user:your_request_has_been_sent')}\n          />\n        )}\n        {publishedVacancies?.map((vacancy) => (\n          <Box\n            width='100%'\n            style={{ cursor: 'pointer' }}\n            key={vacancy?.id}\n            onClick={() => handleConfirm(vacancy?.id)}\n          >\n            <VacancyRequest vacancy={vacancy} companies={companies} dictionaries={dictionaries} />\n          </Box>\n        ))}\n        <ModalRequestConfirm\n          id={selectedVacancy}\n          variant='vacancy'\n          visibility={confirmVacancy}\n          setVisibility={setConfirmVacancy}\n        />\n      </Box>\n    );\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAAqB;AACrB;AACA,gBAAe;;;ACDf,mBAA0C;AAkEhC;AAnDH,IAAMA,uBAAmBC,mBAC9B,CAAC;EACCC;EACAC;EACAC;EACAC;EACAC;AAOF,MAAmB;AACjB,QAAM;IAAEC;IAAGC;EAAY,IAAIC,OAAO;AAClC,QAAMC,cAAcC,eAAe;AACnC,QAAM,CAACC,gBAAgBC,iBAAiB,QAAIC,uBAAS,KAAK;AAC1D,QAAM,CAACC,iBAAiBC,kBAAkB,QAAIF,uBAAS,EAAE;AAEzD,QAAM,CAACG,oBAAoBC,qBAAqB,QAAIJ,uBAAoB;AAExEK,8BAAU,MAAM;AACd,QAAIjB,WAAW;AACb,YAAMkB,eAAelB,UAAUmB,OAAQC,aAAYA,QAAQC,SAAS;AACpEL,4BAAsBE,YAAY;IACpC;EACF,GAAG,CAAClB,SAAS,CAAC;AAEdiB,8BAAU,MAAM;AACd,QAAId,eAAe;AACjBQ,wBAAkB,KAAK;IACzB;EACF,GAAG,CAACR,aAAa,CAAC;AAElB,QAAMmB,gBAAgBA,CAACC,OAAgB;AACrC,QAAIA;AAAIT,yBAAmBS,EAAE;AAE7BZ,sBAAkB,CAACD,cAAc;EACnC;AAEA,SACE,mDAAC,OACC,eAAc,UACd,OAAM,QACN,KAAKF,cAAc,OAAO,SAAS,QACnC,IAAIgB,OAAOC,KACX,SAAS;IAAEC,SAAS;EAAE,GACtB,SAAS;IAAEA,SAAS;EAAE,GACtB,MAAM;IAAEA,SAAS;EAAE,GAElBvB;sBAAkBwB,UACjB,mDAAC,0BACC,SAASC,mBAAmBC,MAC5B,OAAOxB,EAAE,6BAA6B,KAFxC;;;;WAE0C;IAI3CF,kBAAkB,SAASC,WAC1B,mDAAC,0BACC,SAASwB,mBAAmBE,OAC5B,OAAO1B,QAAQE,YAAYyB,QAAQ,KAFrC;;;;WAEuC;IAIxC5B,kBAAkB,QACjB,mDAAC,0BACC,SAASyB,mBAAmBI,SAC5B,OAAO3B,EAAE,iCAAiC,KAF5C;;;;WAE8C;IAG/CU,oBAAoBkB,IAAKb,aACxB,mDAAC,OACC,OAAM,QACN,OAAO;MAAEc,QAAQ;IAAU,GAE3B,SAAS,MAAMZ,cAAcF,SAASG,EAAE,GAExC,6DAAC,kBAAe,SAAkB,WAAsB,gBAAxD;;;;WAAmF,KAH9EH,SAASG,IAHhB;;;;WAOA,CACD;IACD,mDAAC,uBACC,IAAIV,iBACJ,SAAQ,WACR,YAAYH,gBACZ,eAAeC,qBAJjB;;;;WAImC;OA3CrC;;;;SA6CA;AAEJ,CACF;;;AD/FA,qBAAkC;AA4H9B,IAAAwB,0BAAA;AATW,SAAf,QAAgC;AAC9B,QAAMC,UAAUC,cAA6B;AAC7C,QAAMC,aAAaC,cAA6B;AAChD,QAAMC,YAAYJ,QAAQI,UAAUC;AACpC,QAAMC,YAAYN,QAAQM,UAAUD;AAEpC,QAAM;IAAEE;EAAa,IAAIP;AAEzB,SACE,oDAAC,oBACC,eAAeE,YAAYM,SAC3B,SAASN,YAAYO,SACrB,WACA,WACA,gBALF;;;;SAK6B;AAGjC;",
  "names": ["VacanciesRequest", "memo", "vacancies", "dictionaries", "companies", "actionRequest", "message", "t", "userContext", "useApp", "widthScreen", "useScreenWidth", "confirmVacancy", "setConfirmVacancy", "useState", "selectedVacancy", "setSelectedVacancy", "publishedVacancies", "setPublishedVacancies", "useEffect", "newVacancies", "filter", "vacancy", "published", "handleConfirm", "id", "motion", "div", "opacity", "undefined", "BoxInformationEnum", "info", "error", "language", "success", "map", "cursor", "import_jsx_dev_runtime", "request", "useLoaderData", "actionData", "useActionData", "vacancies", "data", "companies", "dictionaries", "success", "message"]
}
