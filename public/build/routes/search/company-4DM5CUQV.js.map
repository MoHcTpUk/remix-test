{
  "version": 3,
  "sources": ["../../../../app/routes/search/company.tsx", "../../../../app/components/pages/Search/Companies/index.tsx", "../../../../app/components/entities/cardWidgets/CompanyPartCard/index.tsx", "../../../../app/components/entities/cardComponents/partCard/CompanyPartCardHeading/index.tsx", "../../../../app/components/entities/cardComponents/partCard/CompanyPartCardInfo/index.tsx"],
  "sourcesContent": ["import type { LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useLoaderData } from '@remix-run/react';\nimport { ClientFactory } from 'shared/clientFactory';\nimport type { Company } from 'shared/v2/companies';\nimport { CompaniesApi } from 'shared/v2/companies';\n\nimport { SearchCompaniesComponent } from '~/components/pages/Search/Companies';\nimport { getPaginationPages, getPaginationRange } from '~/utils/helpers';\n\nexport const loader = async ({ request, context }: LoaderArgs) => {\n  const url = new URL(request.url);\n  const query = url.searchParams.get('q');\n  const max_page_size = url.searchParams.get('max_page_size');\n  const specialization = url.searchParams.get('specialization');\n  const number_of_employees = url.searchParams.get('number_of_employees');\n  const number_of_vacancies = url.searchParams.get('number_of_vacancies');\n  const search_by_city = url.searchParams.get('search_by_city');\n  const max_pages = url.searchParams.get('max_pages');\n  const currentPage = url.searchParams.get('current_page');\n  const currentToken = url.searchParams.get('current_token');\n\n  const pages = getPaginationPages(currentPage, max_pages);\n\n  const companyId = url.searchParams.get('id');\n\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n\n  const [\n    genders,\n    specializations,\n    location,\n    employment,\n    workfeatures,\n    educationLevel,\n    yearsOfExperience,\n    employeeNumbers,\n    company,\n    companies,\n  ] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationForCompany,\n    context.references.locationMap,\n    context.references.employmentsMap,\n    context.references.workFeaturesMap,\n    context.references.educationLevelMap,\n    context.references.yearsOfExperienceMap,\n    context.references.employeeNumbersMap,\n    companyId ? clientCompany.getCompany({ id: companyId || '' }) : null,\n    clientCompany.getCompanies({\n      specializations: specialization ? specialization.split(',') : undefined,\n      number_of_employees: number_of_employees ? number_of_employees.split(',') : undefined,\n      number_of_vacancies: number_of_vacancies ? +number_of_vacancies : undefined,\n      location: search_by_city || '',\n      q: query || '',\n      max_page_size: max_page_size ? +max_page_size : 10,\n      pages,\n      page_token: currentPage && +currentPage !== 1 && currentToken ? currentToken : undefined,\n    }),\n  ]);\n\n  const paginationRange = getPaginationRange(pages, companies?.max_pages, companies?.page_tokens);\n  const maxPages = companies.max_pages;\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n    employment: employment.ToArray(),\n    workfeatures: workfeatures.ToArray(),\n    educationLevel: educationLevel.ToArray(),\n    yearsOfExperience: yearsOfExperience.ToArray(),\n    employeeNumbers: employeeNumbers.ToArray(),\n  };\n\n  return json(\n    { dictionaries, companies, company, paginationRange, maxPages },\n    { headers: { 'Cache-Control': 'public, max-age=120' } },\n  );\n};\n\nexport default function Search() {\n  const request = useLoaderData<typeof loader>();\n  const companies: Company[] | undefined = request?.companies.data;\n  const company = request.company ? request.company : companies?.[0];\n  const { dictionaries } = request;\n\n  return (\n    <SearchCompaniesComponent companies={companies} dictionaries={dictionaries} company={company} />\n  );\n}\n", "import { useLocation } from '@remix-run/react';\nimport { motion } from 'framer-motion';\nimport { memo, useState } from 'react';\nimport type { Company } from 'shared/v2/companies';\n\nimport { Box } from '~/components/common/Box';\nimport BoxInformation from '~/components/common/BoxInformation';\nimport { List, ListItem } from '~/components/common/BoxInformation/styles';\nimport { CompanyPartCardWidget } from '~/components/entities/cardWidgets';\nimport ModalShare from '~/components/entities/ModalShare';\nimport { BoxSelectedCard } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { BoxInformationEnum } from '~/types/enums/boxInformationEnum';\nimport { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { CLIENT_BASE_URL } from '~/utils/constants';\n\nimport CompanySearchCard from './Company';\n\nexport const SearchCompaniesComponent = memo(\n  ({\n    company,\n    dictionaries,\n    companies,\n  }: {\n    companies?: Company[] | null;\n    company?: Company;\n    dictionaries?: IDictionaries;\n  }): JSX.Element => {\n    const { t } = useApp();\n    const [visibleShare, setVisibleShare] = useState(false);\n    const location = useLocation();\n    const widthScreen = useScreenWidth();\n\n    return (\n      <Box\n        flexDirection='row'\n        alignItems='flex-start'\n        width='100%'\n        gap='24px'\n        as={motion.div}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        <Box\n          flexDirection='column'\n          width='100%'\n          gap={widthScreen > 1024 ? '24px' : '16px'}\n          style={{ flex: '1' }}\n        >\n          {companies?.map((item) => (\n            <CompanyPartCardWidget\n              company={item}\n              selectedCompany={company?.id}\n              dictionaries={dictionaries}\n              variant={PageVariantEnum.search}\n              key={item?.id}\n            />\n          ))}\n          {!companies?.[0] && (\n            <BoxInformation\n              variant={BoxInformationEnum.info}\n              title={t('user:the_search_has_not_given_any_results_try_changing_your_search_terms')}\n              information={\n                <List>\n                  <ListItem>{t('user:try_more_general_keywords')}</ListItem>\n                  <ListItem>{t('user:try_changing_the_value_of_one_of_the_filters')}</ListItem>\n                  <ListItem>{t('user:check_your_spelling')}</ListItem>\n                </List>\n              }\n              flexDirection='column'\n            />\n          )}\n          <ModalShare\n            link={`${CLIENT_BASE_URL}${location.pathname}/${company?.id || ''}`}\n            visibility={visibleShare}\n            setVisibility={setVisibleShare}\n          />\n        </Box>\n        {company && (\n          <BoxSelectedCard>\n            <CompanySearchCard company={company} dictionaries={dictionaries} />\n          </BoxSelectedCard>\n        )}\n      </Box>\n    );\n  },\n);\n", "import { Link, useLocation } from '@remix-run/react';\nimport type { Company } from 'shared/v2/companies';\n\nimport { Box } from '~/components/common/Box';\nimport { BoxCard } from '~/components/common/Card';\nimport {\n  CompanyPartCardHeading,\n  CompanyPartCardInfo,\n} from '~/components/entities/cardComponents/partCard';\nimport { MediaBox } from '~/components/ui/Card';\nimport { useApp, useScreenWidth } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport type { PageVariantEnum } from '~/types/enums/pageVariantEnum';\nimport { SizeCardVariantEnum } from '~/types/enums/sizeCardVariantEnum';\nimport { VariantCardEnum } from '~/types/enums/variantCardEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { updateSearchString } from '~/utils/helpers';\n\nimport { BoxControlContainer } from '../../BoxControl';\n\nexport function CompanyPartCardWidget({\n  company,\n  dictionaries,\n  variant,\n  selectedCompany,\n}: {\n  company: Company;\n  dictionaries?: IDictionaries;\n  variant?: PageVariantEnum;\n  selectedCompany?: string;\n}): JSX.Element {\n  const { theme, t } = useApp();\n  const location = useLocation();\n  const widthScreen = useScreenWidth();\n\n  const boxHeading = (company: Company) => (\n    <>\n      <CompanyPartCardHeading company={company} />\n      <CompanyPartCardInfo company={company} dictionaries={dictionaries} />\n    </>\n  );\n\n  return (\n    <Box\n      width='100%'\n      style={{\n        cursor: 'pointer',\n        borderRadius: '12px',\n        transition: 'all 0.2s cubic-bezier(0.2, 0, 0, 1)',\n        border:\n          widthScreen >= 1280 && company.id === selectedCompany\n            ? `2px solid ${theme.modal.borderCardsColor}`\n            : '',\n      }}\n      key={company?.id}\n    >\n      <BoxCard key={company?.id} variant={VariantCardEnum.userCard}>\n        <MediaBox variant='mobile'>\n          <Link to={company?.id || '#'}>{boxHeading(company)}</Link>\n        </MediaBox>\n\n        <MediaBox variant='desktop'>\n          <Link\n            to={`/search/company${updateSearchString(location.search, company?.id)}`}\n            preventScrollReset\n          >\n            {boxHeading(company)}\n          </Link>\n        </MediaBox>\n\n        <BoxControlContainer\n          company={company}\n          id={company?.id}\n          variant={variant}\n          typeEntity={EntityVariantEnum.company}\n          typeCard={SizeCardVariantEnum.part}\n        />\n\n        {/* <BoxControl>\n          <Form>\n            <BoxButtons>\n              <Button className='icon' priority='secondary' onlyIcon>\n              <Icon name={IconEnum.download} color={theme.user.iconColor} />\n            </Button>\n              <Button\n                className='icon'\n                priority='secondary'\n                onlyIcon\n                onClick={() => handleClick(company?.id || '')}\n              >\n                <Icon name={IconEnum.share} color={theme.user.iconColor} />\n              </Button>\n              <Link to={company?.id || '#'} target='_blank'>\n                <Button className='icon' priority='secondary' onlyIcon>\n                  <Icon name={IconEnum.view} color={theme.user.iconColor} />\n                </Button>\n              </Link>\n              {company?.number_of_vacancies !== 0 && (\n                <Link to={`${company?.id || ''}/vacancy`} target='_blank'>\n                  <Button priority='primary'>\n                    <Text variant={TextVariantEnum.textBody2}>{t('user:show_vacancies')}</Text>\n                  </Button>\n                </Link>\n              )}\n            </BoxButtons>\n          </Form>\n        </BoxControl> */}\n      </BoxCard>\n    </Box>\n  );\n}\n", "import type { Company } from 'shared/v2/companies';\n\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { BoxHeading, HeadingInformation } from '~/components/ui/Card';\nimport { useApp } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport { DEFAULT_COMPANY_LOGO } from '~/utils/constants';\nimport { getImageUrl, getValueLang } from '~/utils/helpers';\n\nexport function CompanyPartCardHeading({ company }: { company?: Company }): JSX.Element {\n  const { theme, userContext } = useApp();\n\n  return (\n    <BoxHeading variant={EntityVariantEnum.company}>\n      <img\n        src={company?.logo_uri ? getImageUrl(company?.logo_uri) : DEFAULT_COMPANY_LOGO}\n        alt='company logo'\n      />\n      <HeadingInformation>\n        <Text className='title' variant={TextVariantEnum.textHeading2}>\n          {company?.name}\n        </Text>\n        <Text variant={TextVariantEnum.textBody1medium} color={theme.user.descriptionTextColor}>\n          {getValueLang(company?.specialization_name, userContext.language)}\n        </Text>\n      </HeadingInformation>\n    </BoxHeading>\n  );\n}\n", "import type { Company } from 'shared/v2/companies';\n\nimport { Box } from '~/components/common/Box';\nimport { Text } from '~/components/common/Text';\nimport { TextVariantEnum } from '~/components/common/Text/enums';\nimport { DataBox } from '~/components/ui/DataBox';\nimport { Field } from '~/components/ui/Field';\nimport { useApp } from '~/hooks';\nimport { EntityVariantEnum } from '~/types/enums/entityVariantEnum';\nimport type { IDictionaries } from '~/types/interfaces/iDictionaries';\nimport { getValueFromDictionaries } from '~/utils/helpers';\n\nexport function CompanyPartCardInfo({\n  company,\n  dictionaries,\n}: {\n  company: Company;\n  dictionaries?: IDictionaries;\n}): JSX.Element {\n  const { theme, t, userContext } = useApp();\n\n  return (\n    <Box\n      flexDirection='column'\n      gap='8px'\n      width='100%'\n      padding='16px 0'\n      style={{\n        borderTop: `1px solid ${theme.user.borderColor}`,\n        borderBottom: `1px solid ${theme.user.borderColor}`,\n      }}\n    >\n      {company.description && (\n        <Field>\n          <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n            {t('user:about_company')}\n          </Text>\n          <Text variant={TextVariantEnum.textBody2medium} className='shortDescription'>\n            {company.description}\n          </Text>\n        </Field>\n      )}\n      <DataBox variant={EntityVariantEnum.company}>\n        <Field className='field'>\n          <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n            {t('user:number_of_employees')}\n          </Text>\n          <Text variant={TextVariantEnum.textBody2medium}>\n            {getValueFromDictionaries(\n              dictionaries?.employeeNumbers,\n              company.number_of_employees_id,\n              userContext.language,\n            )}\n          </Text>\n        </Field>\n        <Field className='field'>\n          <Text variant={TextVariantEnum.textBody2} color={theme.user.descriptionTextColor}>\n            {t('user:opened_vacancies')}\n          </Text>\n          <Box flexDirection='column' gap='4px'>\n            <Text variant={TextVariantEnum.textBody2medium}>{company.number_of_vacancies}</Text>\n          </Box>\n        </Field>\n      </DataBox>\n    </Box>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "CompanyPartCardHeading", "company", "theme", "userContext", "useApp", "EntityVariantEnum", "logo_uri", "getImageUrl", "DEFAULT_COMPANY_LOGO", "TextVariantEnum", "textHeading2", "name", "textBody1medium", "user", "descriptionTextColor", "getValueLang", "specialization_name", "language", "import_jsx_dev_runtime", "CompanyPartCardInfo", "company", "dictionaries", "theme", "t", "userContext", "useApp", "borderTop", "user", "borderColor", "borderBottom", "description", "TextVariantEnum", "textBody2", "descriptionTextColor", "textBody2medium", "EntityVariantEnum", "getValueFromDictionaries", "employeeNumbers", "number_of_employees_id", "language", "number_of_vacancies", "import_jsx_dev_runtime", "CompanyPartCardWidget", "company", "dictionaries", "variant", "selectedCompany", "theme", "t", "useApp", "location", "useLocation", "widthScreen", "useScreenWidth", "boxHeading", "cursor", "borderRadius", "transition", "border", "id", "modal", "borderCardsColor", "VariantCardEnum", "userCard", "updateSearchString", "search", "EntityVariantEnum", "SizeCardVariantEnum", "part", "import_jsx_dev_runtime", "SearchCompaniesComponent", "memo", "company", "dictionaries", "companies", "t", "useApp", "visibleShare", "setVisibleShare", "useState", "location", "useLocation", "widthScreen", "useScreenWidth", "motion", "div", "opacity", "flex", "map", "item", "id", "PageVariantEnum", "search", "BoxInformationEnum", "info", "CLIENT_BASE_URL", "pathname", "import_jsx_dev_runtime", "request", "useLoaderData", "companies", "data", "company", "dictionaries"]
}
