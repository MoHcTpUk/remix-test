{
  "version": 3,
  "sources": ["../../../../app/routes/search/company.$id.vacancy.tsx"],
  "sourcesContent": ["import type { LoaderArgs } from '@remix-run/cloudflare';\nimport { json } from '@remix-run/cloudflare';\nimport { useLoaderData } from '@remix-run/react';\nimport { ClientFactory } from 'shared/clientFactory';\nimport { CompaniesApi } from 'shared/v2/companies';\nimport type { GetResumesDateEnum } from 'shared/v2/resumes';\nimport { VacanciesApi } from 'shared/v2/vacancies';\n\nimport { SearchVacanciesComponent } from '~/components/pages/Search/Vacancies';\nimport { getPaginationPages } from '~/utils/helpers';\n\nexport const loader = async ({ params, context, request }: LoaderArgs) => {\n  const url = new URL(request.url);\n\n  const clientCompany = ClientFactory.createClient(CompaniesApi, context.session);\n  const clientVacancy = ClientFactory.createClient(VacanciesApi, context.session);\n\n  const companyId = params.id;\n  const vacancyId = url.searchParams.get('id');\n  const query = url.searchParams.get('q');\n  const date_of_post = url.searchParams.get('date_of_post');\n  const specialization = url.searchParams.get('specialization');\n  const salary_estimate_from = url.searchParams.get('salary_estimate_from');\n  const employmentQuery = url.searchParams.getAll('employment');\n  const features = url.searchParams.getAll('features');\n  const educations = url.searchParams.getAll('education_level');\n  const experience = url.searchParams.getAll('work_experience');\n  const search_by_city = url.searchParams.get('search_by_city');\n  const max_page_size = url.searchParams.get('max_page_size');\n  const currentPage = url.searchParams.get('current_page');\n  const currentToken = url.searchParams.get('current_token');\n  const max_pages = url.searchParams.get('max_pages');\n\n  const pages = getPaginationPages(currentPage, max_pages);\n\n  const [\n    genders,\n    specializations,\n    location,\n    employment,\n    workfeatures,\n    educationLevel,\n    yearsOfExperience,\n    employeeNumbers,\n    company,\n    vacancies,\n    vacancy,\n  ] = await Promise.all([\n    context.references.gendersMap,\n    context.references.specializationsMap,\n    context.references.locationMap,\n    context.references.employmentsMap,\n    context.references.workFeaturesMap,\n    context.references.educationLevelMap,\n    context.references.yearsOfExperienceMap,\n    context.references.employeeNumbersMap,\n    clientCompany.getCompany({ id: companyId || '' }),\n    clientVacancy.getVacancies({\n      q: query || '',\n      date: date_of_post ? (+date_of_post as GetResumesDateEnum) : undefined,\n      specializations: specialization ? specialization.split(',') : undefined,\n      salary_from: salary_estimate_from ? +salary_estimate_from : undefined,\n      employments: employmentQuery?.length ? employmentQuery : undefined,\n      features: features?.length ? features : undefined,\n      educations: educations?.length ? educations : undefined,\n      experience: experience?.length ? experience : undefined,\n      location: search_by_city || '',\n      max_page_size: max_page_size ? +max_page_size : 10,\n      company: companyId || undefined,\n      pages,\n      page_token: currentPage && +currentPage !== 1 && currentToken ? currentToken : undefined,\n    }),\n    vacancyId ? clientVacancy.getVacancy({ id: vacancyId || '' }) : undefined,\n  ]);\n\n  const dictionaries = {\n    genders: genders.ToArray(),\n    specializations: specializations.ToArray(),\n    location: location.ToArray(),\n    employment: employment.ToArray(),\n    workfeatures: workfeatures.ToArray(),\n    educationLevel: educationLevel.ToArray(),\n    yearsOfExperience: yearsOfExperience.ToArray(),\n    employeeNumbers: employeeNumbers.ToArray(),\n  };\n\n  return json({ company, dictionaries, vacancies, vacancy });\n};\n\nexport default function Index() {\n  const request = useLoaderData<typeof loader>();\n  const vacancies = request?.vacancies.data;\n  const company = request?.company;\n\n  const vacancy = request?.vacancy ? request?.vacancy : vacancies?.[0];\n\n  const { dictionaries } = request;\n\n  return (\n    <SearchVacanciesComponent\n      company={company}\n      vacancies={vacancies}\n      vacancy={vacancy}\n      dictionaries={dictionaries}\n    />\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wBAAqB;AACrB;AAiGI;AAVW,SAAf,QAAgC;AAC9B,QAAMA,UAAUC,cAA6B;AAC7C,QAAMC,YAAYF,SAASE,UAAUC;AACrC,QAAMC,UAAUJ,SAASI;AAEzB,QAAMC,UAAUL,SAASK,UAAUL,SAASK,UAAUH,YAAY,CAAC;AAEnE,QAAM;IAAEI;EAAa,IAAIN;AAEzB,SACE,mDAAC,4BACC,SACA,WACA,SACA,gBAJF;;;;SAI6B;AAGjC;",
  "names": ["request", "useLoaderData", "vacancies", "data", "company", "vacancy", "dictionaries"]
}
